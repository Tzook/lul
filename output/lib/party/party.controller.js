'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const master_controller_1 = require("../master/master.controller");
let config = require('../../../server/lib/party/party.config.json');
class PartyController extends master_controller_1.default {
    constructor() {
        super(...arguments);
        this.charToParty = new Map();
    }
    init(files, app) {
        this.middleware = files.middleware;
        super.init(files, app);
    }
    getCharParty(socket) {
        return this.getParty(socket.character.name);
    }
    getParty(name) {
        return this.charToParty.get(name);
        ;
    }
    createParty(socket) {
        socket.emit(config.CLIENT_GETS.CREATE_PARTY.name, {});
        let party = {
            name: this.services.getPartyName(),
            leader: socket.character.name,
            members: new Set(),
            invitees: new Map(),
        };
        this.charToParty.set(socket.character.name, party);
        socket.join(party.name);
    }
    inviteToParty(inviteeSocket, party) {
        inviteeSocket.emit(config.CLIENT_GETS.INVITE_TO_PARTY.name, {});
        party.invitees.set(inviteeSocket.character.name, setTimeout(() => {
            party.invitees.delete(inviteeSocket.character.name);
        }, config.INVITE_EXPIRE_TIME));
    }
    joinParty(socket, party) {
        socket.join(party.name);
        this.io.to(party.name).emit(config.CLIENT_GETS.JOIN_PARTY.name, {
            char_name: socket.character.name
        });
        this.tellPartyMembers(socket, party);
        this.charToParty.set(socket.character.name, party);
        party.members.add(socket.character.name);
        clearTimeout(party.invitees.get(socket.character.name));
        party.invitees.delete(socket.character.name);
    }
    leaveParty(socket, party) {
        this.io.to(party.name).emit(config.CLIENT_GETS.LEAVE_PARTY.name, {
            char_name: socket.character.name
        });
        socket.leave(party.name);
        if (this.middleware.isLeader(socket.character.name, party)) {
            if (party.members.size > 0) {
                party.leader = this.services.pickLeader(socket, party);
                this.io.to(party.name).emit(config.CLIENT_GETS.LEAD_PARTY.name, {
                    char_name: party.leader
                });
            }
            else {
                for (let [, timeout] of party.invitees) {
                    clearTimeout(timeout);
                }
            }
        }
        else {
            party.members.delete(socket.character.name);
        }
        this.charToParty.delete(socket.character.name);
    }
    makeLeader(socket, charName, party) {
        this.io.to(party.name).emit(config.CLIENT_GETS.LEAD_PARTY.name, {
            char_name: charName
        });
        party.leader = charName;
        party.members.delete(charName);
        party.members.add(socket.character.name);
    }
    kickFromParty(socket, charName, party) {
        this.io.to(party.name).emit(config.CLIENT_GETS.KICK_FROM_PARTY.name, {
            char_name: charName
        });
        let kickedSocket = socket.map.get(charName);
        if (kickedSocket) {
            kickedSocket.leave(party.name);
        }
        party.members.delete(charName);
        this.charToParty.delete(charName);
    }
    tellPartyMembers(socket, party) {
        socket.emit(config.CLIENT_GETS.PARTY_MEMBERS.name, {
            leader_name: party.leader,
            chars_names: Array.from(party.members)
        });
    }
    getPartyMembersInMap(socket) {
        let sockets = [];
        let party = this.getCharParty(socket);
        if (!party) {
            sockets.push(socket);
        }
        else {
            let allPartyMembers = this.services.getAllPartyMembers(party);
            for (let memberName of allPartyMembers) {
                let memberSocket = socket.map.get(memberName);
                if (memberSocket && memberSocket.character.room === socket.character.room && memberSocket.alive) {
                    sockets.push(memberSocket);
                }
            }
        }
        return sockets;
    }
    arePartyMembers(name1, name2) {
        let areMembers = false;
        let party = this.getParty(name1);
        if (party) {
            areMembers = this.middleware.isInParty(name2, party);
        }
        return areMembers;
    }
}
exports.default = PartyController;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

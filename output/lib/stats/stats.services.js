'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const master_services_1 = require("../master/master.services");
let config = require('../../../server/lib/stats/stats.config.json');
const _ = require("underscore");
class StatsServices extends master_services_1.default {
    magToMp(mag) {
        return mag * config.MAG_TO_MP_RATIO;
    }
    strToHp(str) {
        return str * config.STR_TO_HP_RATIO;
    }
    getExp(level) {
        return Math.round(this.getAbsoluteExp(level + 1) - this.getAbsoluteExp(level));
    }
    getAbsoluteExp(a) {
        return (50 / 3) * (a * a * a - 6 * a * a + 17 * a - 12);
    }
    lvlUp(socket) {
        let stats = socket.character.stats;
        stats.lvl++;
        let str, dex, mag;
        str = dex = mag = config.LEVEL_UP_STAT_BONUS;
        this.addStr(stats, str);
        this.addMag(stats, mag);
        this.addDex(stats, dex);
        stats.hp.now = socket.maxHp;
        stats.mp.now = socket.maxMp;
        console.log("Level up", stats);
    }
    addStr(stats, str) {
        stats.str += str;
        this.addHp(stats, this.strToHp(str));
    }
    addMag(stats, mag) {
        stats.mag += mag;
        this.addMp(stats, this.magToMp(mag));
    }
    addDex(stats, dex) {
        stats.dex += dex;
    }
    addHp(stats, hp) {
        stats.hp.total += hp;
    }
    addMp(stats, mp) {
        stats.mp.total += mp;
    }
    getHpAfterDamage(hp, dmg) {
        return Math.max(0, Math.floor(hp - dmg));
    }
    static getMainStat(socket) {
        return socket.character.stats.primaryAbility === "range" ? "dex" : "str";
    }
}
exports.default = StatsServices;
;
StatsServices.prototype.getExp = _.memoize(StatsServices.prototype.getExp);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci9saWIvc3RhdHMvc3RhdHMuc2VydmljZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUNiLCtEQUF1RDtBQUN2RCxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsNkNBQTZDLENBQUMsQ0FBQztBQUNwRSxnQ0FBZ0M7QUFFaEMsbUJBQW1DLFNBQVEseUJBQWM7SUFDOUMsT0FBTyxDQUFDLEdBQVc7UUFDdEIsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDO0lBQ3hDLENBQUM7SUFFTSxPQUFPLENBQUMsR0FBVztRQUN0QixNQUFNLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUM7SUFDeEMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFhO1FBQ3ZCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNuRixDQUFDO0lBRVMsY0FBYyxDQUFDLENBQVM7UUFFOUIsTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQWtCO1FBQzNCLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO1FBQ25DLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUVaLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7UUFDbEIsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDLG1CQUFtQixDQUFDO1FBQzdDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDNUIsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUU1QixPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQVksRUFBRSxHQUFXO1FBQ25DLEtBQUssQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBQ00sTUFBTSxDQUFDLEtBQVksRUFBRSxHQUFXO1FBQ25DLEtBQUssQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBQ00sTUFBTSxDQUFDLEtBQVksRUFBRSxHQUFXO1FBQ25DLEtBQUssQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDO0lBQ3JCLENBQUM7SUFDTSxLQUFLLENBQUMsS0FBWSxFQUFFLEVBQVU7UUFDakMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFDTSxLQUFLLENBQUMsS0FBWSxFQUFFLEVBQVU7UUFDakMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRyxnQkFBZ0IsQ0FBQyxFQUFVLEVBQUUsR0FBVztRQUM5QyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRVMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFrQjtRQUN4QyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsY0FBYyxLQUFLLE9BQU8sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQzdFLENBQUM7Q0FDSjtBQTFERCxnQ0EwREM7QUFBQSxDQUFDO0FBRUYsYUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDIiwiZmlsZSI6ImxpYi9zdGF0cy9zdGF0cy5zZXJ2aWNlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmltcG9ydCBNYXN0ZXJTZXJ2aWNlcyBmcm9tICcuLi9tYXN0ZXIvbWFzdGVyLnNlcnZpY2VzJztcbmxldCBjb25maWcgPSByZXF1aXJlKCcuLi8uLi8uLi9zZXJ2ZXIvbGliL3N0YXRzL3N0YXRzLmNvbmZpZy5qc29uJyk7XG5pbXBvcnQgKiBhcyBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0c1NlcnZpY2VzIGV4dGVuZHMgTWFzdGVyU2VydmljZXMge1xuICAgIHB1YmxpYyBtYWdUb01wKG1hZzogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBtYWcgKiBjb25maWcuTUFHX1RPX01QX1JBVElPO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdHJUb0hwKHN0cjogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBzdHIgKiBjb25maWcuU1RSX1RPX0hQX1JBVElPO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRFeHAobGV2ZWw6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh0aGlzLmdldEFic29sdXRlRXhwKGxldmVsICsgMSkgLSB0aGlzLmdldEFic29sdXRlRXhwKGxldmVsKSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldEFic29sdXRlRXhwKGE6IG51bWJlcikge1xuICAgICAgICAvLyBzZWUgaHR0cDovL3RpYmlhLndpa2lhLmNvbS93aWtpL0V4cGVyaWVuY2VfRm9ybXVsYVxuICAgICAgICByZXR1cm4gKDUwIC8gMykgKiAoYSAqIGEgKiBhIC0gNiAqIGEgKiBhICsgMTcgKiBhIC0gMTIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBsdmxVcChzb2NrZXQ6IEdhbWVTb2NrZXQpIHtcbiAgICAgICAgbGV0IHN0YXRzID0gc29ja2V0LmNoYXJhY3Rlci5zdGF0cztcbiAgICAgICAgc3RhdHMubHZsKys7XG5cbiAgICAgICAgbGV0IHN0ciwgZGV4LCBtYWc7XG4gICAgICAgIHN0ciA9IGRleCA9IG1hZyA9IGNvbmZpZy5MRVZFTF9VUF9TVEFUX0JPTlVTO1xuICAgICAgICB0aGlzLmFkZFN0cihzdGF0cywgc3RyKTtcbiAgICAgICAgdGhpcy5hZGRNYWcoc3RhdHMsIG1hZyk7XG4gICAgICAgIHRoaXMuYWRkRGV4KHN0YXRzLCBkZXgpO1xuICAgICAgICBzdGF0cy5ocC5ub3cgPSBzb2NrZXQubWF4SHA7XG4gICAgICAgIHN0YXRzLm1wLm5vdyA9IHNvY2tldC5tYXhNcDtcblxuICAgICAgICBjb25zb2xlLmxvZyhcIkxldmVsIHVwXCIsIHN0YXRzKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkU3RyKHN0YXRzOiBTdGF0cywgc3RyOiBudW1iZXIpIHtcbiAgICAgICAgc3RhdHMuc3RyICs9IHN0cjtcbiAgICAgICAgdGhpcy5hZGRIcChzdGF0cywgdGhpcy5zdHJUb0hwKHN0cikpO1xuICAgIH1cbiAgICBwdWJsaWMgYWRkTWFnKHN0YXRzOiBTdGF0cywgbWFnOiBudW1iZXIpIHtcbiAgICAgICAgc3RhdHMubWFnICs9IG1hZztcbiAgICAgICAgdGhpcy5hZGRNcChzdGF0cywgdGhpcy5tYWdUb01wKG1hZykpO1xuICAgIH1cbiAgICBwdWJsaWMgYWRkRGV4KHN0YXRzOiBTdGF0cywgZGV4OiBudW1iZXIpIHtcbiAgICAgICAgc3RhdHMuZGV4ICs9IGRleDtcbiAgICB9XG4gICAgcHVibGljIGFkZEhwKHN0YXRzOiBTdGF0cywgaHA6IG51bWJlcikge1xuICAgICAgICBzdGF0cy5ocC50b3RhbCArPSBocDtcbiAgICB9XG4gICAgcHVibGljIGFkZE1wKHN0YXRzOiBTdGF0cywgbXA6IG51bWJlcikge1xuICAgICAgICBzdGF0cy5tcC50b3RhbCArPSBtcDtcbiAgICB9XG5cblx0cHVibGljIGdldEhwQWZ0ZXJEYW1hZ2UoaHA6IG51bWJlciwgZG1nOiBudW1iZXIpOiBudW1iZXIge1xuXHRcdHJldHVybiBNYXRoLm1heCgwLCBNYXRoLmZsb29yKGhwIC0gZG1nKSk7XG5cdH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0TWFpblN0YXQoc29ja2V0OiBHYW1lU29ja2V0KTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHNvY2tldC5jaGFyYWN0ZXIuc3RhdHMucHJpbWFyeUFiaWxpdHkgPT09IFwicmFuZ2VcIiA/IFwiZGV4XCIgOiBcInN0clwiO1xuICAgIH0gXG59O1xuLy8gY2FjaGUgY29tcHV0YXRpb25zXG5TdGF0c1NlcnZpY2VzLnByb3RvdHlwZS5nZXRFeHAgPSA8YW55Pl8ubWVtb2l6ZShTdGF0c1NlcnZpY2VzLnByb3RvdHlwZS5nZXRFeHApOyJdfQ==

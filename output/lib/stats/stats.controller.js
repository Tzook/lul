'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const master_controller_1 = require("../master/master.controller");
class StatsController extends master_controller_1.default {
    addExp(socket, exp) {
        const { character } = socket;
        character.stats.exp += exp;
        let expNeededToLevel = this.services.getExp(character.stats.lvl);
        if (character.stats.exp >= expNeededToLevel) {
            character.stats.exp -= expNeededToLevel;
            this.services.lvlUp(socket);
            expNeededToLevel = this.services.getExp(character.stats.lvl);
            if (character.stats.exp >= expNeededToLevel) {
                console.log("Stopping 2nd level", character.stats.exp, expNeededToLevel);
                character.stats.exp = expNeededToLevel - 1;
            }
        }
    }
    addHp(socket, hp) {
        let nowHp = socket.character.stats.hp.now;
        socket.character.stats.hp.now = Math.min(nowHp + hp, socket.maxHp);
        let gainedHp = nowHp !== socket.character.stats.hp.now;
        return gainedHp;
    }
    addMp(socket, mp) {
        let nowMp = socket.character.stats.mp.now;
        socket.character.stats.mp.now = Math.min(nowMp + mp, socket.maxMp);
        let gainedMp = nowMp !== socket.character.stats.mp.now;
        return gainedMp;
    }
}
exports.default = StatsController;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci9saWIvc3RhdHMvc3RhdHMuY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7O0FBQ2IsbUVBQTJEO0FBRzNELHFCQUFxQyxTQUFRLDJCQUFnQjtJQUdsRCxNQUFNLENBQUMsTUFBa0IsRUFBRSxHQUFXO1FBQ3pDLE1BQU0sRUFBQyxTQUFTLEVBQUMsR0FBRyxNQUFNLENBQUM7UUFDM0IsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDO1FBRTNCLElBQUksZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqRSxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7WUFDMUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksZ0JBQWdCLENBQUM7WUFDeEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7WUFHNUIsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM3RCxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7Z0JBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztnQkFDekUsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO1lBQy9DLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFrQixFQUFFLEVBQVU7UUFDdkMsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQztRQUMxQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLEVBQUUsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkUsSUFBSSxRQUFRLEdBQUcsS0FBSyxLQUFLLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7UUFDdkQsTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUNwQixDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQWtCLEVBQUUsRUFBVTtRQUN2QyxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsRUFBRSxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuRSxJQUFJLFFBQVEsR0FBRyxLQUFLLEtBQUssTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQztRQUN2RCxNQUFNLENBQUMsUUFBUSxDQUFDO0lBQ3BCLENBQUM7Q0FDSjtBQWxDRCxrQ0FrQ0M7QUFBQSxDQUFDIiwiZmlsZSI6ImxpYi9zdGF0cy9zdGF0cy5jb250cm9sbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IE1hc3RlckNvbnRyb2xsZXIgZnJvbSAnLi4vbWFzdGVyL21hc3Rlci5jb250cm9sbGVyJztcbmltcG9ydCBTdGF0c1NlcnZpY2VzIGZyb20gJy4vc3RhdHMuc2VydmljZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0c0NvbnRyb2xsZXIgZXh0ZW5kcyBNYXN0ZXJDb250cm9sbGVyIHtcbiAgICBwcm90ZWN0ZWQgc2VydmljZXM6IFN0YXRzU2VydmljZXM7XG5cbiAgICBwdWJsaWMgYWRkRXhwKHNvY2tldDogR2FtZVNvY2tldCwgZXhwOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3Qge2NoYXJhY3Rlcn0gPSBzb2NrZXQ7XG4gICAgICAgIGNoYXJhY3Rlci5zdGF0cy5leHAgKz0gZXhwO1xuICAgICAgICAvLyBsZXZlbCB1cCB0aGUgY2hhciBpZiBoZSBwYXNzZWQgdGhlIGV4cCBuZWVkZWRcbiAgICAgICAgbGV0IGV4cE5lZWRlZFRvTGV2ZWwgPSB0aGlzLnNlcnZpY2VzLmdldEV4cChjaGFyYWN0ZXIuc3RhdHMubHZsKTtcbiAgICAgICAgaWYgKGNoYXJhY3Rlci5zdGF0cy5leHAgPj0gZXhwTmVlZGVkVG9MZXZlbCkge1xuICAgICAgICAgICAgY2hhcmFjdGVyLnN0YXRzLmV4cCAtPSBleHBOZWVkZWRUb0xldmVsO1xuICAgICAgICAgICAgdGhpcy5zZXJ2aWNlcy5sdmxVcChzb2NrZXQpO1xuXG4gICAgICAgICAgICAvLyBpZiB0aGUgY2hhciBwYXNzZWQgdGhlIGV4cCwgcHV0IGhpcyBleHAgdG8gMSBiZWxvdyB0aGUgbmVlZGVkXG4gICAgICAgICAgICBleHBOZWVkZWRUb0xldmVsID0gdGhpcy5zZXJ2aWNlcy5nZXRFeHAoY2hhcmFjdGVyLnN0YXRzLmx2bCk7XG4gICAgICAgICAgICBpZiAoY2hhcmFjdGVyLnN0YXRzLmV4cCA+PSBleHBOZWVkZWRUb0xldmVsKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTdG9wcGluZyAybmQgbGV2ZWxcIiwgY2hhcmFjdGVyLnN0YXRzLmV4cCwgZXhwTmVlZGVkVG9MZXZlbCk7XG4gICAgICAgICAgICAgICAgY2hhcmFjdGVyLnN0YXRzLmV4cCA9IGV4cE5lZWRlZFRvTGV2ZWwgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFkZEhwKHNvY2tldDogR2FtZVNvY2tldCwgaHA6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgbm93SHAgPSBzb2NrZXQuY2hhcmFjdGVyLnN0YXRzLmhwLm5vdztcbiAgICAgICAgc29ja2V0LmNoYXJhY3Rlci5zdGF0cy5ocC5ub3cgPSBNYXRoLm1pbihub3dIcCArIGhwLCBzb2NrZXQubWF4SHApO1xuICAgICAgICBsZXQgZ2FpbmVkSHAgPSBub3dIcCAhPT0gc29ja2V0LmNoYXJhY3Rlci5zdGF0cy5ocC5ub3c7XG4gICAgICAgIHJldHVybiBnYWluZWRIcDtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkTXAoc29ja2V0OiBHYW1lU29ja2V0LCBtcDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBub3dNcCA9IHNvY2tldC5jaGFyYWN0ZXIuc3RhdHMubXAubm93O1xuICAgICAgICBzb2NrZXQuY2hhcmFjdGVyLnN0YXRzLm1wLm5vdyA9IE1hdGgubWluKG5vd01wICsgbXAsIHNvY2tldC5tYXhNcCk7XG4gICAgICAgIGxldCBnYWluZWRNcCA9IG5vd01wICE9PSBzb2NrZXQuY2hhcmFjdGVyLnN0YXRzLm1wLm5vdztcbiAgICAgICAgcmV0dXJuIGdhaW5lZE1wO1xuICAgIH1cbn07Il19

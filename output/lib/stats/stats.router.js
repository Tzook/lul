'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const socketio_router_base_1 = require("../socketio/socketio.router.base");
const equips_model_1 = require("../equips/equips.model");
const stats_model_1 = require("./stats.model");
let config = require('../../../server/lib/stats/stats.config.json');
let roomsConfig = require('../../../server/lib/rooms/rooms.config.json');
class StatsRouter extends socketio_router_base_1.default {
    init(files, app) {
        this.services = files.services;
        super.init(files, app);
    }
    [config.SERVER_INNER.GAIN_EXP.name](data, socket) {
        let exp = data.exp;
        if (!(exp > 0)) {
            return this.sendError(data, socket, "trying to gain exp that is not positive");
        }
        let currentLevel = socket.character.stats.lvl;
        this.controller.addExp(socket, exp);
        socket.emit(this.CLIENT_GETS.GAIN_EXP.name, {
            exp,
            now: socket.character.stats.exp
        });
        if (currentLevel !== socket.character.stats.lvl) {
            this.io.to(socket.character.room).emit(this.CLIENT_GETS.LEVEL_UP.name, {
                id: socket.character._id,
            });
            socket.emit(this.CLIENT_GETS.GAIN_STATS.name, {
                stats: socket.character.stats
            });
        }
    }
    [config.SERVER_INNER.TAKE_DMG.name](data, socket) {
        let dmg = data.dmg;
        let hpAfterDmg = this.services.getHpAfterDamage(socket.character.stats.hp.now, dmg);
        let hadFullHp = socket.character.stats.hp.now === socket.maxHp;
        socket.character.stats.hp.now = hpAfterDmg;
        this.io.to(socket.character.room).emit(this.CLIENT_GETS.TAKE_DMG.name, {
            id: socket.character._id,
            dmg,
            hp: socket.character.stats.hp.now
        });
        if (!socket.alive) {
            this.log({}, socket, "character is ded");
            this.io.to(socket.character.room).emit(this.CLIENT_GETS.DEATH.name, {
                id: socket.character._id,
            });
        }
        else {
            this.regenHpIfNeeds(socket, hadFullHp);
        }
    }
    [config.SERVER_INNER.GAIN_HP.name](data, socket) {
        let hp = data.hp;
        let gainedHp = this.controller.addHp(socket, hp);
        if (gainedHp) {
            socket.emit(this.CLIENT_GETS.GAIN_HP.name, {
                hp,
                now: socket.character.stats.hp.now
            });
        }
    }
    [config.SERVER_INNER.GAIN_MP.name](data, socket) {
        let mp = data.mp;
        let gainedMp = this.controller.addMp(socket, mp);
        if (gainedMp) {
            socket.emit(this.CLIENT_GETS.GAIN_MP.name, {
                mp,
                now: socket.character.stats.mp.now
            });
        }
    }
    [config.SERVER_INNER.GAIN_STATS.name](data, socket) {
        let { stats } = data;
        this.services.addStr(socket.character.stats, stats.str || 0);
        this.services.addMag(socket.character.stats, stats.mag || 0);
        this.services.addDex(socket.character.stats, stats.dex || 0);
        this.services.addHp(socket.character.stats, stats.hp || 0);
        this.services.addMp(socket.character.stats, stats.mp || 0);
        socket.emit(this.CLIENT_GETS.GAIN_STATS.name, {
            stats: socket.character.stats
        });
    }
    [config.SERVER_GETS.RELEASE_DEATH.name](data, socket) {
        socket.character.stats.hp.now = socket.maxHp;
        socket.emit(this.CLIENT_GETS.RESURRECT.name, {});
        this.emitter.emit(roomsConfig.SERVER_INNER.MOVE_TO_TOWN.name, {}, socket);
    }
    [config.SERVER_INNER.STATS_ADD.name](data, socket) {
        this.toggleStats(data.stats, socket, true);
    }
    [config.SERVER_INNER.STATS_REMOVE.name](data, socket) {
        this.toggleStats(data.stats, socket, false);
    }
    toggleStats(stats, socket, on) {
        const sign = on ? 1 : -1;
        const hadFullHp = socket.character.stats.hp.now === socket.maxHp;
        for (var stat in stats_model_1.BASE_STATS_SCHEMA) {
            if (stats[stat]) {
                socket.bonusStats[stat] += stats[stat] * sign;
            }
        }
        socket.bonusStats.hp += this.services.strToHp(stats.str || 0) * sign;
        socket.bonusStats.mp += this.services.magToMp(stats.mag || 0) * sign;
        if (socket.character.stats.hp.now > socket.maxHp) {
            socket.character.stats.hp.now = socket.maxHp;
        }
        if (socket.character.stats.mp.now > socket.maxMp) {
            socket.character.stats.mp.now = socket.maxMp;
        }
        this.regenHpIfNeeds(socket, hadFullHp);
    }
    onConnected(socket) {
        Object.defineProperty(socket, 'alive', { get: () => socket.character.stats.hp.now > 0 });
        Object.defineProperty(socket, 'maxHp', { get: () => socket.character.stats.hp.total + socket.bonusStats.hp });
        Object.defineProperty(socket, 'maxMp', { get: () => socket.character.stats.mp.total + socket.bonusStats.mp });
        socket.bonusStats = {};
        for (var stat in stats_model_1.BASE_STATS_SCHEMA) {
            socket.bonusStats[stat] = 0;
        }
        for (var itemKey in equips_model_1.EQUIPS_SCHEMA) {
            this[config.SERVER_INNER.STATS_ADD.name]({ stats: socket.character.equips[itemKey] }, socket);
        }
        this.regenHpInterval(socket);
        this.regenMpInterval(socket);
    }
    regenHpIfNeeds(socket, hadFullHp) {
        if (hadFullHp && socket.character.stats.hp.now < socket.maxHp) {
            this.regenHpInterval(socket);
        }
    }
    regenHpInterval(socket) {
        if (socket.character.stats.hp.now < socket.maxHp) {
            clearTimeout(this.hpTimeoutId);
            this.hpTimeoutId = setTimeout(() => {
                if (socket.connected && socket.alive) {
                    this.emitter.emit(config.SERVER_INNER.GAIN_HP.name, { hp: socket.character.stats.hp.regen }, socket);
                    this.regenHpInterval(socket);
                }
            }, config.REGEN_INTERVAL);
        }
    }
    regenMpInterval(socket) {
        if (socket.character.stats.mp.now < socket.maxMp) {
            clearTimeout(this.mpTimeoutId);
            this.mpTimeoutId = setTimeout(() => {
                if (socket.connected && socket.alive) {
                    this.emitter.emit(config.SERVER_INNER.GAIN_MP.name, { mp: socket.character.stats.mp.regen }, socket);
                    this.regenMpInterval(socket);
                }
            }, config.REGEN_INTERVAL);
        }
    }
}
exports.default = StatsRouter;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci9saWIvc3RhdHMvc3RhdHMucm91dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7QUFDYiwyRUFBa0U7QUFHbEUseURBQXVEO0FBQ3ZELCtDQUFrRDtBQUNsRCxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsNkNBQTZDLENBQUMsQ0FBQztBQUNwRSxJQUFJLFdBQVcsR0FBRyxPQUFPLENBQUMsNkNBQTZDLENBQUMsQ0FBQztBQUV6RSxpQkFBaUMsU0FBUSw4QkFBa0I7SUFNMUQsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHO1FBQ2QsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO1FBQy9CLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFFLElBQUksRUFBRSxNQUFrQjtRQUN6RCxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ25CLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2IsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSx5Q0FBeUMsQ0FBQyxDQUFDO1FBQ25GLENBQUM7UUFDRCxJQUFJLFlBQVksR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDOUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRXBDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFO1lBQ3hDLEdBQUc7WUFDSCxHQUFHLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENB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QUFlLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ2pDLENBQUM7WUFDTCxDQUFDLEVBQUUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzlCLENBQUM7SUFDTCxDQUFDO0lBQ08sZUFBZSxDQUFDLE1BQWtCO1FBQ3RDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDL0MsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztnQkFDMUIsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztvQkFDbkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztvQkFDckcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDakMsQ0FBQztZQUNMLENBQUMsRUFBRSxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDOUIsQ0FBQztJQUNMLENBQUM7Q0FDSjtBQXpLRCw4QkF5S0M7QUFBQSxDQUFDIiwiZmlsZSI6ImxpYi9zdGF0cy9zdGF0cy5yb3V0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5pbXBvcnQgU29ja2V0aW9Sb3V0ZXJCYXNlIGZyb20gJy4uL3NvY2tldGlvL3NvY2tldGlvLnJvdXRlci5iYXNlJztcbmltcG9ydCBTdGF0c0NvbnRyb2xsZXIgZnJvbSAnLi9zdGF0cy5jb250cm9sbGVyJztcbmltcG9ydCBTdGF0c1NlcnZpY2VzIGZyb20gJy4vc3RhdHMuc2VydmljZXMnO1xuaW1wb3J0IHsgRVFVSVBTX1NDSEVNQSB9IGZyb20gJy4uL2VxdWlwcy9lcXVpcHMubW9kZWwnO1xuaW1wb3J0IHsgQkFTRV9TVEFUU19TQ0hFTUEgfSBmcm9tIFwiLi9zdGF0cy5tb2RlbFwiO1xubGV0IGNvbmZpZyA9IHJlcXVpcmUoJy4uLy4uLy4uL3NlcnZlci9saWIvc3RhdHMvc3RhdHMuY29uZmlnLmpzb24nKTtcbmxldCByb29tc0NvbmZpZyA9IHJlcXVpcmUoJy4uLy4uLy4uL3NlcnZlci9saWIvcm9vbXMvcm9vbXMuY29uZmlnLmpzb24nKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhdHNSb3V0ZXIgZXh0ZW5kcyBTb2NrZXRpb1JvdXRlckJhc2Uge1xuICAgIHByb3RlY3RlZCBjb250cm9sbGVyOiBTdGF0c0NvbnRyb2xsZXI7XG4gICAgcHJvdGVjdGVkIHNlcnZpY2VzOiBTdGF0c1NlcnZpY2VzO1xuICAgIHByaXZhdGUgaHBUaW1lb3V0SWQ6IG51bWJlcjtcbiAgICBwcml2YXRlIG1wVGltZW91dElkOiBudW1iZXI7XG5cblx0aW5pdChmaWxlcywgYXBwKSB7XG5cdFx0dGhpcy5zZXJ2aWNlcyA9IGZpbGVzLnNlcnZpY2VzO1xuXHRcdHN1cGVyLmluaXQoZmlsZXMsIGFwcCk7XG5cdH1cblxuICAgIFtjb25maWcuU0VSVkVSX0lOTkVSLkdBSU5fRVhQLm5hbWVdIChkYXRhLCBzb2NrZXQ6IEdhbWVTb2NrZXQpIHtcbiAgICAgICAgbGV0IGV4cCA9IGRhdGEuZXhwO1xuICAgICAgICBpZiAoIShleHAgPiAwKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZEVycm9yKGRhdGEsIHNvY2tldCwgXCJ0cnlpbmcgdG8gZ2FpbiBleHAgdGhhdCBpcyBub3QgcG9zaXRpdmVcIik7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGN1cnJlbnRMZXZlbCA9IHNvY2tldC5jaGFyYWN0ZXIuc3RhdHMubHZsO1xuICAgICAgICB0aGlzLmNvbnRyb2xsZXIuYWRkRXhwKHNvY2tldCwgZXhwKTtcblxuICAgICAgICBzb2NrZXQuZW1pdCh0aGlzLkNMSUVOVF9HRVRTLkdBSU5fRVhQLm5hbWUsIHtcbiAgICAgICAgICAgIGV4cCxcbiAgICAgICAgICAgIG5vdzogc29ja2V0LmNoYXJhY3Rlci5zdGF0cy5leHBcbiAgICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChjdXJyZW50TGV2ZWwgIT09IHNvY2tldC5jaGFyYWN0ZXIuc3RhdHMubHZsKSB7XG4gICAgICAgICAgICB0aGlzLmlvLnRvKHNvY2tldC5jaGFyYWN0ZXIucm9vbSkuZW1pdCh0aGlzLkNMSUVOVF9HRVRTLkxFVkVMX1VQLm5hbWUsIHtcbiAgICAgICAgICAgICAgICBpZDogc29ja2V0LmNoYXJhY3Rlci5faWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNvY2tldC5lbWl0KHRoaXMuQ0xJRU5UX0dFVFMuR0FJTl9TVEFUUy5uYW1lLCB7XG4gICAgICAgICAgICAgICAgc3RhdHM6IHNvY2tldC5jaGFyYWN0ZXIuc3RhdHNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgW2NvbmZpZy5TRVJWRVJfSU5ORVIuVEFLRV9ETUcubmFtZV0gKGRhdGEsIHNvY2tldDogR2FtZVNvY2tldCkge1xuICAgICAgICBsZXQgZG1nID0gZGF0YS5kbWc7XG4gICAgICAgIGxldCBocEFmdGVyRG1nID0gdGhpcy5zZXJ2aWNlcy5nZXRIcEFmdGVyRGFtYWdlKHNvY2tldC5jaGFyYWN0ZXIuc3RhdHMuaHAubm93LCBkbWcpO1xuICAgICAgICBsZXQgaGFkRnVsbEhwID0gc29ja2V0LmNoYXJhY3Rlci5zdGF0cy5ocC5ub3cgPT09IHNvY2tldC5tYXhIcDtcbiAgICAgICAgc29ja2V0LmNoYXJhY3Rlci5zdGF0cy5ocC5ub3cgPSBocEFmdGVyRG1nO1xuXHRcdHRoaXMuaW8udG8oc29ja2V0LmNoYXJhY3Rlci5yb29tKS5lbWl0KHRoaXMuQ0xJRU5UX0dFVFMuVEFLRV9ETUcubmFtZSwge1xuXHRcdFx0aWQ6IHNvY2tldC5jaGFyYWN0ZXIuX2lkLFxuXHRcdFx0ZG1nLFxuXHRcdFx0aHA6IHNvY2tldC5jaGFyYWN0ZXIuc3RhdHMuaHAubm93XG5cdFx0fSk7XG4gICAgICAgIGlmICghc29ja2V0LmFsaXZlKSB7XG4gICAgICAgICAgICB0aGlzLmxvZyh7fSwgc29ja2V0LCAgXCJjaGFyYWN0ZXIgaXMgZGVkXCIpO1xuICAgICAgICAgICAgdGhpcy5pby50byhzb2NrZXQuY2hhcmFjdGVyLnJvb20pLmVtaXQodGhpcy5DTElFTlRfR0VUUy5ERUFUSC5uYW1lLCB7XG4gICAgICAgICAgICAgICAgaWQ6IHNvY2tldC5jaGFyYWN0ZXIuX2lkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlZ2VuSHBJZk5lZWRzKHNvY2tldCwgaGFkRnVsbEhwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIFtjb25maWcuU0VSVkVSX0lOTkVSLkdBSU5fSFAubmFtZV0gKGRhdGEsIHNvY2tldDogR2FtZVNvY2tldCkge1xuICAgICAgICBsZXQgaHAgPSBkYXRhLmhwO1xuICAgICAgICBsZXQgZ2FpbmVkSHAgPSB0aGlzLmNvbnRyb2xsZXIuYWRkSHAoc29ja2V0LCBocCk7XG5cbiAgICAgICAgaWYgKGdhaW5lZEhwKSB7XG4gICAgICAgICAgICBzb2NrZXQuZW1pdCh0aGlzLkNMSUVOVF9HRVRTLkdBSU5fSFAubmFtZSwge1xuICAgICAgICAgICAgICAgIGhwLFxuICAgICAgICAgICAgICAgIG5vdzogc29ja2V0LmNoYXJhY3Rlci5zdGF0cy5ocC5ub3dcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgW2NvbmZpZy5TRVJWRVJfSU5ORVIuR0FJTl9NUC5uYW1lXSAoZGF0YSwgc29ja2V0OiBHYW1lU29ja2V0KSB7XG4gICAgICAgIGxldCBtcCA9IGRhdGEubXA7XG4gICAgICAgIGxldCBnYWluZWRNcCA9IHRoaXMuY29udHJvbGxlci5hZGRNcChzb2NrZXQsIG1wKTtcblxuICAgICAgICBpZiAoZ2FpbmVkTXApIHtcbiAgICAgICAgICAgIHNvY2tldC5lbWl0KHRoaXMuQ0xJRU5UX0dFVFMuR0FJTl9NUC5uYW1lLCB7XG4gICAgICAgICAgICAgICAgbXAsXG4gICAgICAgICAgICAgICAgbm93OiBzb2NrZXQuY2hhcmFjdGVyLnN0YXRzLm1wLm5vd1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBbY29uZmlnLlNFUlZFUl9JTk5FUi5HQUlOX1NUQVRTLm5hbWVdIChkYXRhOiB7c3RhdHM6IEJBU0VfU1RBVFNfTU9ERUx9LCBzb2NrZXQ6IEdhbWVTb2NrZXQpIHtcbiAgICAgICAgbGV0IHtzdGF0c30gPSBkYXRhO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5zZXJ2aWNlcy5hZGRTdHIoc29ja2V0LmNoYXJhY3Rlci5zdGF0cywgc3RhdHMuc3RyIHx8IDApO1xuICAgICAgICB0aGlzLnNlcnZpY2VzLmFkZE1hZyhzb2NrZXQuY2hhcmFjdGVyLnN0YXRzLCBzdGF0cy5tYWcgfHwgMCk7XG4gICAgICAgIHRoaXMuc2VydmljZXMuYWRkRGV4KHNvY2tldC5jaGFyYWN0ZXIuc3RhdHMsIHN0YXRzLmRleCB8fCAwKTtcbiAgICAgICAgdGhpcy5zZXJ2aWNlcy5hZGRIcChzb2NrZXQuY2hhcmFjdGVyLnN0YXRzLCBzdGF0cy5ocCB8fCAwKTtcbiAgICAgICAgdGhpcy5zZXJ2aWNlcy5hZGRNcChzb2NrZXQuY2hhcmFjdGVyLnN0YXRzLCBzdGF0cy5tcCB8fCAwKTtcblxuICAgICAgICBzb2NrZXQuZW1pdCh0aGlzLkNMSUVOVF9HRVRTLkdBSU5fU1RBVFMubmFtZSwge1xuICAgICAgICAgICAgc3RhdHM6IHNvY2tldC5jaGFyYWN0ZXIuc3RhdHNcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgW2NvbmZpZy5TRVJWRVJfR0VUUy5SRUxFQVNFX0RFQVRILm5hbWVdIChkYXRhLCBzb2NrZXQ6IEdhbWVTb2NrZXQpIHtcbiAgICAgICAgc29ja2V0LmNoYXJhY3Rlci5zdGF0cy5ocC5ub3cgPSBzb2NrZXQubWF4SHA7XG4gICAgICAgIHNvY2tldC5lbWl0KHRoaXMuQ0xJRU5UX0dFVFMuUkVTVVJSRUNULm5hbWUsIHt9KTtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmVtaXQocm9vbXNDb25maWcuU0VSVkVSX0lOTkVSLk1PVkVfVE9fVE9XTi5uYW1lLCB7fSwgc29ja2V0KTtcbiAgICB9XG5cbiAgICBbY29uZmlnLlNFUlZFUl9JTk5FUi5TVEFUU19BREQubmFtZV0gKGRhdGEsIHNvY2tldDogR2FtZVNvY2tldCkge1xuICAgICAgICB0aGlzLnRvZ2dsZVN0YXRzKGRhdGEuc3RhdHMsIHNvY2tldCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgW2NvbmZpZy5TRVJWRVJfSU5ORVIuU1RBVFNfUkVNT1ZFLm5hbWVdIChkYXRhLCBzb2NrZXQ6IEdhbWVTb2NrZXQpIHtcbiAgICAgICAgdGhpcy50b2dnbGVTdGF0cyhkYXRhLnN0YXRzLCBzb2NrZXQsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHRvZ2dsZVN0YXRzKHN0YXRzOiBJVEVNX0lOU1RBTkNFLCBzb2NrZXQ6IEdhbWVTb2NrZXQsIG9uOiBib29sZWFuKSB7XG4gICAgICAgIGNvbnN0IHNpZ24gPSBvbiA/IDEgOiAtMTtcbiAgICAgICAgY29uc3QgaGFkRnVsbEhwID0gc29ja2V0LmNoYXJhY3Rlci5zdGF0cy5ocC5ub3cgPT09IHNvY2tldC5tYXhIcDtcbiAgICAgICAgZm9yICh2YXIgc3RhdCBpbiBCQVNFX1NUQVRTX1NDSEVNQSkge1xuICAgICAgICAgICAgaWYgKHN0YXRzW3N0YXRdKSB7XG4gICAgICAgICAgICAgICAgc29ja2V0LmJvbnVzU3RhdHNbc3RhdF0gKz0gc3RhdHNbc3RhdF0gKiBzaWduO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNvY2tldC5ib251c1N0YXRzLmhwICs9IHRoaXMuc2VydmljZXMuc3RyVG9IcChzdGF0cy5zdHIgfHwgMCkgKiBzaWduO1xuICAgICAgICBzb2NrZXQuYm9udXNTdGF0cy5tcCArPSB0aGlzLnNlcnZpY2VzLm1hZ1RvTXAoc3RhdHMubWFnIHx8IDApICogc2lnbjtcbiAgICAgICAgaWYgKHNvY2tldC5jaGFyYWN0ZXIuc3RhdHMuaHAubm93ID4gc29ja2V0Lm1heEhwKSB7XG4gICAgICAgICAgICBzb2NrZXQuY2hhcmFjdGVyLnN0YXRzLmhwLm5vdyA9IHNvY2tldC5tYXhIcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc29ja2V0LmNoYXJhY3Rlci5zdGF0cy5tcC5ub3cgPiBzb2NrZXQubWF4TXApIHtcbiAgICAgICAgICAgIHNvY2tldC5jaGFyYWN0ZXIuc3RhdHMubXAubm93ID0gc29ja2V0Lm1heE1wO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVnZW5IcElmTmVlZHMoc29ja2V0LCBoYWRGdWxsSHApO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbkNvbm5lY3RlZChzb2NrZXQ6IEdhbWVTb2NrZXQpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNvY2tldCwgJ2FsaXZlJywge2dldDogKCkgPT4gc29ja2V0LmNoYXJhY3Rlci5zdGF0cy5ocC5ub3cgPiAwfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzb2NrZXQsICdtYXhIcCcsIHtnZXQ6ICgpID0+IHNvY2tldC5jaGFyYWN0ZXIuc3RhdHMuaHAudG90YWwgKyBzb2NrZXQuYm9udXNTdGF0cy5ocH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc29ja2V0LCAnbWF4TXAnLCB7Z2V0OiAoKSA9PiBzb2NrZXQuY2hhcmFjdGVyLnN0YXRzLm1wLnRvdGFsICsgc29ja2V0LmJvbnVzU3RhdHMubXB9KTtcbiAgICAgICAgc29ja2V0LmJvbnVzU3RhdHMgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgc3RhdCBpbiBCQVNFX1NUQVRTX1NDSEVNQSkge1xuICAgICAgICAgICAgc29ja2V0LmJvbnVzU3RhdHNbc3RhdF0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIGFkZCB0aGUgZXF1aXBzIHRvIG1lbW9yeVxuICAgICAgICBmb3IgKHZhciBpdGVtS2V5IGluIEVRVUlQU19TQ0hFTUEpIHtcbiAgICAgICAgICAgIHRoaXNbY29uZmlnLlNFUlZFUl9JTk5FUi5TVEFUU19BREQubmFtZV0oe3N0YXRzOiBzb2NrZXQuY2hhcmFjdGVyLmVxdWlwc1tpdGVtS2V5XX0sIHNvY2tldCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWdlbkhwSW50ZXJ2YWwoc29ja2V0KTtcbiAgICAgICAgdGhpcy5yZWdlbk1wSW50ZXJ2YWwoc29ja2V0KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlZ2VuSHBJZk5lZWRzKHNvY2tldDogR2FtZVNvY2tldCwgaGFkRnVsbEhwKSB7XG4gICAgICAgIGlmIChoYWRGdWxsSHAgJiYgc29ja2V0LmNoYXJhY3Rlci5zdGF0cy5ocC5ub3cgPCBzb2NrZXQubWF4SHApIHtcbiAgICAgICAgICAgIHRoaXMucmVnZW5IcEludGVydmFsKHNvY2tldCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlZ2VuSHBJbnRlcnZhbChzb2NrZXQ6IEdhbWVTb2NrZXQpIHtcbiAgICAgICAgaWYgKHNvY2tldC5jaGFyYWN0ZXIuc3RhdHMuaHAubm93IDwgc29ja2V0Lm1heEhwKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5ocFRpbWVvdXRJZCk7XG4gICAgICAgICAgICB0aGlzLmhwVGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNvY2tldC5jb25uZWN0ZWQgJiYgc29ja2V0LmFsaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KGNvbmZpZy5TRVJWRVJfSU5ORVIuR0FJTl9IUC5uYW1lLCB7IGhwOiBzb2NrZXQuY2hhcmFjdGVyLnN0YXRzLmhwLnJlZ2VuIH0sIHNvY2tldCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVnZW5IcEludGVydmFsKHNvY2tldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgY29uZmlnLlJFR0VOX0lOVEVSVkFMKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcml2YXRlIHJlZ2VuTXBJbnRlcnZhbChzb2NrZXQ6IEdhbWVTb2NrZXQpIHtcbiAgICAgICAgaWYgKHNvY2tldC5jaGFyYWN0ZXIuc3RhdHMubXAubm93IDwgc29ja2V0Lm1heE1wKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5tcFRpbWVvdXRJZCk7XG4gICAgICAgICAgICB0aGlzLm1wVGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNvY2tldC5jb25uZWN0ZWQgJiYgc29ja2V0LmFsaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KGNvbmZpZy5TRVJWRVJfSU5ORVIuR0FJTl9NUC5uYW1lLCB7IG1wOiBzb2NrZXQuY2hhcmFjdGVyLnN0YXRzLm1wLnJlZ2VuIH0sIHNvY2tldCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVnZW5NcEludGVydmFsKHNvY2tldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgY29uZmlnLlJFR0VOX0lOVEVSVkFMKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG4iXX0=

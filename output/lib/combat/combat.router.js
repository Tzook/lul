'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const socketio_router_base_1 = require("../socketio/socketio.router.base");
let config = require('../../../server/lib/combat/combat.config.json');
class CombatRouter extends socketio_router_base_1.default {
    [config.SERVER_GETS.LOAD_ATTACK.name](data, socket) {
        socket.broadcast.to(socket.character.room).emit(this.CLIENT_GETS.LOAD_ATTACK.name, {
            id: socket.character._id,
            ability: socket.character.stats.primaryAbility
        });
    }
    [config.SERVER_GETS.PERFORM_ATTACK.name](data, socket) {
        let load = this.middleware.getValidLoad(data.load);
        socket.lastAttackLoad = load;
        socket.broadcast.to(socket.character.room).emit(this.CLIENT_GETS.PERFORM_ATTACK.name, {
            id: socket.character._id,
            ability: socket.character.stats.primaryAbility,
            load
        });
    }
    [config.SERVER_GETS.CHANGE_ABILITY.name](data, socket) {
        let { ability } = data;
        if (!ability) {
            this.sendError(data, socket, "Must send what ability to use");
        }
        else if (!this.middleware.canChangeAbility(socket, ability)) {
            this.sendError(data, socket, "Character cannot change to this ability");
        }
        else if (socket.character.stats.primaryAbility === ability) {
            this.sendError(data, socket, "Character already has this ability");
        }
        else {
            socket.character.stats.primaryAbility = ability;
            socket.broadcast.to(socket.character.room).emit(this.CLIENT_GETS.CHANGE_ABILITY.name, {
                id: socket.character._id,
                ability: socket.character.stats.primaryAbility,
            });
        }
    }
}
exports.default = CombatRouter;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci9saWIvY29tYmF0L2NvbWJhdC5yb3V0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUNiLDJFQUFrRTtBQUVsRSxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsK0NBQStDLENBQUMsQ0FBQztBQUV0RSxrQkFBa0MsU0FBUSw4QkFBa0I7SUFHM0QsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsTUFBa0I7UUFDN0QsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFO1lBQ2xGLEVBQUUsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUc7WUFDeEIsT0FBTyxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLGNBQWM7U0FDOUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLE1BQWtCO1FBQ2hFLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuRCxNQUFNLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztRQUM3QixNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUU7WUFDckYsRUFBRSxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRztZQUN4QixPQUFPLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsY0FBYztZQUM5QyxJQUFJO1NBQ0osQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLE1BQWtCO1FBQ2hFLElBQUksRUFBQyxPQUFPLEVBQUMsR0FBRyxJQUFJLENBQUM7UUFDckIsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLCtCQUErQixDQUFDLENBQUM7UUFDL0QsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUseUNBQXlDLENBQUMsQ0FBQztRQUN6RSxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLGNBQWMsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQzlELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxvQ0FBb0MsQ0FBQyxDQUFDO1FBQ3BFLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNQLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUM7WUFDaEQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFO2dCQUNyRixFQUFFLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHO2dCQUN4QixPQUFPLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsY0FBYzthQUM5QyxDQUFDLENBQUM7UUFDSixDQUFDO0lBQ0YsQ0FBQztDQUNEO0FBcENELCtCQW9DQztBQUFBLENBQUMiLCJmaWxlIjoibGliL2NvbWJhdC9jb21iYXQucm91dGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IFNvY2tldGlvUm91dGVyQmFzZSBmcm9tICcuLi9zb2NrZXRpby9zb2NrZXRpby5yb3V0ZXIuYmFzZSc7XG5pbXBvcnQgQ29tYmF0TWlkZGxld2FyZSBmcm9tICcuL2NvbWJhdC5taWRkbGV3YXJlJztcbmxldCBjb25maWcgPSByZXF1aXJlKCcuLi8uLi8uLi9zZXJ2ZXIvbGliL2NvbWJhdC9jb21iYXQuY29uZmlnLmpzb24nKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tYmF0Um91dGVyIGV4dGVuZHMgU29ja2V0aW9Sb3V0ZXJCYXNlIHtcblx0cHJvdGVjdGVkIG1pZGRsZXdhcmU6IENvbWJhdE1pZGRsZXdhcmU7XG5cblx0W2NvbmZpZy5TRVJWRVJfR0VUUy5MT0FEX0FUVEFDSy5uYW1lXShkYXRhLCBzb2NrZXQ6IEdhbWVTb2NrZXQpIHtcblx0XHRzb2NrZXQuYnJvYWRjYXN0LnRvKHNvY2tldC5jaGFyYWN0ZXIucm9vbSkuZW1pdCh0aGlzLkNMSUVOVF9HRVRTLkxPQURfQVRUQUNLLm5hbWUsIHtcblx0XHRcdGlkOiBzb2NrZXQuY2hhcmFjdGVyLl9pZCxcblx0XHRcdGFiaWxpdHk6IHNvY2tldC5jaGFyYWN0ZXIuc3RhdHMucHJpbWFyeUFiaWxpdHlcblx0XHR9KTtcblx0fVxuXG5cdFtjb25maWcuU0VSVkVSX0dFVFMuUEVSRk9STV9BVFRBQ0submFtZV0oZGF0YSwgc29ja2V0OiBHYW1lU29ja2V0KSB7XG5cdFx0bGV0IGxvYWQgPSB0aGlzLm1pZGRsZXdhcmUuZ2V0VmFsaWRMb2FkKGRhdGEubG9hZCk7XG5cdFx0c29ja2V0Lmxhc3RBdHRhY2tMb2FkID0gbG9hZDtcblx0XHRzb2NrZXQuYnJvYWRjYXN0LnRvKHNvY2tldC5jaGFyYWN0ZXIucm9vbSkuZW1pdCh0aGlzLkNMSUVOVF9HRVRTLlBFUkZPUk1fQVRUQUNLLm5hbWUsIHtcblx0XHRcdGlkOiBzb2NrZXQuY2hhcmFjdGVyLl9pZCxcblx0XHRcdGFiaWxpdHk6IHNvY2tldC5jaGFyYWN0ZXIuc3RhdHMucHJpbWFyeUFiaWxpdHksXG5cdFx0XHRsb2FkXG5cdFx0fSk7XG5cdH1cblxuXHRbY29uZmlnLlNFUlZFUl9HRVRTLkNIQU5HRV9BQklMSVRZLm5hbWVdKGRhdGEsIHNvY2tldDogR2FtZVNvY2tldCkge1xuXHRcdGxldCB7YWJpbGl0eX0gPSBkYXRhO1xuXHRcdGlmICghYWJpbGl0eSkge1xuXHRcdFx0dGhpcy5zZW5kRXJyb3IoZGF0YSwgc29ja2V0LCBcIk11c3Qgc2VuZCB3aGF0IGFiaWxpdHkgdG8gdXNlXCIpO1xuXHRcdH0gZWxzZSBpZiAoIXRoaXMubWlkZGxld2FyZS5jYW5DaGFuZ2VBYmlsaXR5KHNvY2tldCwgYWJpbGl0eSkpIHtcblx0XHRcdHRoaXMuc2VuZEVycm9yKGRhdGEsIHNvY2tldCwgXCJDaGFyYWN0ZXIgY2Fubm90IGNoYW5nZSB0byB0aGlzIGFiaWxpdHlcIik7XG5cdFx0fSBlbHNlIGlmIChzb2NrZXQuY2hhcmFjdGVyLnN0YXRzLnByaW1hcnlBYmlsaXR5ID09PSBhYmlsaXR5KSB7XG5cdFx0XHR0aGlzLnNlbmRFcnJvcihkYXRhLCBzb2NrZXQsIFwiQ2hhcmFjdGVyIGFscmVhZHkgaGFzIHRoaXMgYWJpbGl0eVwiKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c29ja2V0LmNoYXJhY3Rlci5zdGF0cy5wcmltYXJ5QWJpbGl0eSA9IGFiaWxpdHk7XG5cdFx0XHRzb2NrZXQuYnJvYWRjYXN0LnRvKHNvY2tldC5jaGFyYWN0ZXIucm9vbSkuZW1pdCh0aGlzLkNMSUVOVF9HRVRTLkNIQU5HRV9BQklMSVRZLm5hbWUsIHtcblx0XHRcdFx0aWQ6IHNvY2tldC5jaGFyYWN0ZXIuX2lkLFxuXHRcdFx0XHRhYmlsaXR5OiBzb2NrZXQuY2hhcmFjdGVyLnN0YXRzLnByaW1hcnlBYmlsaXR5LFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG59OyJdfQ==

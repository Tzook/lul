'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const master_controller_1 = require("../master/master.controller");
class UserController extends master_controller_1.default {
    sendUser(req, res) {
        req.user.password = undefined;
        this.sendData(res, req.LOG || this.LOGS.USER_SESSION_OK, req.user);
    }
    sendLogout(req, res, next) {
        this.sendData(res, this.LOGS.USER_LOGGED_OUT_OK);
    }
    sendDeleted(req, res, next) {
        this.sendData(res, this.LOGS.USER_DELETED);
    }
    performLogin(req, res, next) {
        req.login(req.body.user, e => {
            if (!e) {
                req.LOG = req.LOG || this.LOGS.USER_LOGGED_IN_OK;
                next();
            }
            else {
                this.sendError(res, this.LOGS.MASTER_INTERNAL_ERROR, { e, fn: "performLogin", file: "user.controller.js" });
            }
        });
    }
    performLogout(req, res, next) {
        req.session.destroy(e => {
            if (e) {
                this.sendError(res, this.LOGS.MASTER_INTERNAL_ERROR, { e, fn: "performLogout", file: "user.controller.js" });
            }
            else {
                next();
            }
        });
    }
    handleNewUser(req, res, next) {
        return this.services.saveNewUser(req.body)
            .then(d => {
            req.body.user = d[0];
            req.LOG = this.LOGS.USER_REGISTERED_OK;
            next();
        })
            .catch(e => {
            this.sendError(res, this.LOGS.MASTER_INTERNAL_ERROR, { e, fn: "handleNewUser", file: "user.controller.js" });
        });
    }
    deleteUser(req, res, next) {
        return this.services.deleteUser(req.user._id)
            .then(d => next())
            .catch(e => {
            this.sendError(res, this.LOGS.MASTER_INTERNAL_ERROR, { e, fn: "deleteUser", file: "user.controller.js" });
        });
    }
    serializeUser(user, done) {
        done(null, user.username);
    }
    deserializeUser(username, done) {
        return this.services.getUser(username)
            .then(d => {
            if (d) {
                done(null, d);
            }
            else {
                done(null, false);
            }
        })
            .catch(e => {
            done(e, null);
        });
    }
    deserializeError(e, res) {
        this.sendError(res, this.LOGS.MASTER_INTERNAL_ERROR, { e, fn: "deserializeUser", file: "user.controller.js" });
    }
}
exports.default = UserController;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci9saWIvdXNlci91c2VyLmNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUNiLG1FQUEyRDtBQUczRCxvQkFBb0MsU0FBUSwyQkFBZ0I7SUFHeEQsUUFBUSxDQUFDLEdBQUcsRUFBRSxHQUFHO1FBQ2IsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO1FBQzlCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRCxVQUFVLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsV0FBVyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSTtRQUN0QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCxZQUFZLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJO1FBRXZCLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN0QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUM7Z0JBQ2pELElBQUksRUFBRSxDQUFDO1lBQ1gsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLElB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aEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxFQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLG9CQUFvQixFQUFDLENBQUMsQ0FBQztJQUNwSCxDQUFDO0NBQ0Q7QUFqRkQsaUNBaUZDO0FBQUEsQ0FBQyIsImZpbGUiOiJsaWIvdXNlci91c2VyLmNvbnRyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5pbXBvcnQgTWFzdGVyQ29udHJvbGxlciBmcm9tICcuLi9tYXN0ZXIvbWFzdGVyLmNvbnRyb2xsZXInO1xuaW1wb3J0IFVzZXJTZXJ2aWNlcyBmcm9tIFwiLi91c2VyLnNlcnZpY2VzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJDb250cm9sbGVyIGV4dGVuZHMgTWFzdGVyQ29udHJvbGxlciB7XG4gICAgcHJvdGVjdGVkIHNlcnZpY2VzOiBVc2VyU2VydmljZXM7XG5cbiAgICBzZW5kVXNlcihyZXEsIHJlcykge1xuICAgICAgICByZXEudXNlci5wYXNzd29yZCA9IHVuZGVmaW5lZDsgLy8gcmVtb3ZlIHRoZSBwYXNzd29yZFxuICAgICAgICB0aGlzLnNlbmREYXRhKHJlcywgcmVxLkxPRyB8fCB0aGlzLkxPR1MuVVNFUl9TRVNTSU9OX09LLCByZXEudXNlcik7XG4gICAgfVxuXG4gICAgc2VuZExvZ291dChyZXEsIHJlcywgbmV4dCkge1xuICAgICAgICB0aGlzLnNlbmREYXRhKHJlcywgdGhpcy5MT0dTLlVTRVJfTE9HR0VEX09VVF9PSyk7XG4gICAgfVxuXG4gICAgc2VuZERlbGV0ZWQocmVxLCByZXMsIG5leHQpIHtcbiAgICAgICAgdGhpcy5zZW5kRGF0YShyZXMsIHRoaXMuTE9HUy5VU0VSX0RFTEVURUQpO1xuICAgIH1cblxuICAgIHBlcmZvcm1Mb2dpbihyZXEsIHJlcywgbmV4dCkge1xuICAgICAgICAvLyByZXEubG9naW4gaXMgYXR0YWNoZWQgYnkgcGFzc3BvcnRcbiAgICAgICAgcmVxLmxvZ2luKHJlcS5ib2R5LnVzZXIsIGUgPT4ge1xuICAgICAgICAgICAgaWYgKCFlKSB7XG4gICAgICAgICAgICAgICAgcmVxLkxPRyA9IHJlcS5MT0cgfHwgdGhpcy5MT0dTLlVTRVJfTE9HR0VEX0lOX09LO1xuICAgICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kRXJyb3IocmVzLCB0aGlzLkxPR1MuTUFTVEVSX0lOVEVSTkFMX0VSUk9SLCB7ZSwgZm46IFwicGVyZm9ybUxvZ2luXCIsIGZpbGU6IFwidXNlci5jb250cm9sbGVyLmpzXCJ9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcGVyZm9ybUxvZ291dChyZXEsIHJlcywgbmV4dCkge1xuICAgICAgICByZXEuc2Vzc2lvbi5kZXN0cm95KGUgPT4ge1xuICAgICAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRFcnJvcihyZXMsIHRoaXMuTE9HUy5NQVNURVJfSU5URVJOQUxfRVJST1IsIHtlLCBmbjogXCJwZXJmb3JtTG9nb3V0XCIsIGZpbGU6IFwidXNlci5jb250cm9sbGVyLmpzXCJ9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBoYW5kbGVOZXdVc2VyKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlcnZpY2VzLnNhdmVOZXdVc2VyKHJlcS5ib2R5KVxuICAgICAgICAgICAgLnRoZW4oZCA9PiB7XG4gICAgICAgICAgICAgICAgcmVxLmJvZHkudXNlciA9IGRbMF07XG4gICAgICAgICAgICAgICAgcmVxLkxPRyA9IHRoaXMuTE9HUy5VU0VSX1JFR0lTVEVSRURfT0s7XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChlID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRFcnJvcihyZXMsIHRoaXMuTE9HUy5NQVNURVJfSU5URVJOQUxfRVJST1IsIHtlLCBmbjogXCJoYW5kbGVOZXdVc2VyXCIsIGZpbGU6IFwidXNlci5jb250cm9sbGVyLmpzXCJ9KTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGRlbGV0ZVVzZXIocmVxLCByZXMsIG5leHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VydmljZXMuZGVsZXRlVXNlcihyZXEudXNlci5faWQpXG4gICAgICAgICAgICAudGhlbihkID0+IG5leHQoKSlcbiAgICAgICAgICAgIC5jYXRjaChlID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRFcnJvcihyZXMsIHRoaXMuTE9HUy5NQVNURVJfSU5URVJOQUxfRVJST1IsIHtlLCBmbjogXCJkZWxldGVVc2VyXCIsIGZpbGU6IFwidXNlci5jb250cm9sbGVyLmpzXCJ9KTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFBBU1NQT1JUIEZVTkNUSU9OUyAvL1xuICAgIC8vID09PT09PT09PT09PT09PT09PSAvL1xuICAgIHNlcmlhbGl6ZVVzZXIodXNlciwgZG9uZSkge1xuICAgICAgICBkb25lKG51bGwsIHVzZXIudXNlcm5hbWUpO1xuICAgIH1cblxuICAgIGRlc2VyaWFsaXplVXNlciAodXNlcm5hbWUsIGRvbmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VydmljZXMuZ2V0VXNlcih1c2VybmFtZSlcbiAgICAgICAgLnRoZW4gKGQgPT4ge1xuICAgICAgICAgICAgaWYgKGQpIHtcbiAgICAgICAgICAgICAgICBkb25lKG51bGwsIGQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkb25lKG51bGwsIGZhbHNlKTsgLy8gZm91bmQgbm8gdXNlclxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZSA9PiB7XG4gICAgICAgICAgICBkb25lKGUsIG51bGwpOyAvLyBlcnJvclxuICAgICAgICB9KTtcbiAgICB9XG5cblx0ZGVzZXJpYWxpemVFcnJvcihlLCByZXMpIHtcbiAgICAgICAgdGhpcy5zZW5kRXJyb3IocmVzLCB0aGlzLkxPR1MuTUFTVEVSX0lOVEVSTkFMX0VSUk9SLCB7ZSwgZm46IFwiZGVzZXJpYWxpemVVc2VyXCIsIGZpbGU6IFwidXNlci5jb250cm9sbGVyLmpzXCJ9KTtcblx0fVxufTsiXX0=

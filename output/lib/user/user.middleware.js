'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const master_middleware_1 = require("../master/master.middleware");
let passport = require('passport');
class UserMiddleware extends master_middleware_1.default {
    hasLoginParams(req, res, next) {
        return this.validateParams(req, res, next, [
            { param: "username", isType: ["string"] },
            { param: "password", isType: ["string"] }
        ]);
    }
    hasRegisterParams(req, res, next) {
        return this.validateParams(req, res, next, [
            { param: "username", isType: ["string"], callback: this.services.inRange, args: [("" + (req.body.username || "")).length, 1, 16, this.LOGS.MASTER_OUT_OF_RANGE, 'username'] },
            { param: "password", isType: ["string"], callback: this.services.inRange, args: [(req.body.password || "").length, 32, 32, this.LOGS.MASTER_OUT_OF_RANGE, 'password'] }
        ]);
    }
    isLoggedOut(req, res, next) {
        if (!req.user) {
            next();
        }
        else {
            this.sendError(res, this.LOGS.USER_NOT_LOGGED_OUT);
        }
    }
    isUsernameUnique(req, res, next) {
        return this.services.getUser(req.body.username)
            .then(d => this.services.isEmpty(d, { LOG: this.LOGS.USER_USERNAME_CAUGHT, params: { username: req.body.username } }))
            .then(d => {
            next();
        })
            .catch(e => {
            if (typeof e !== 'object' || !e.LOG) {
                e = { LOG: this.LOGS.MASTER_INTERNAL_ERROR, params: { e, fn: "isUsernameUnique", file: "user.middleware.js" } };
            }
            this.sendError(res, e.LOG, e.params);
        });
    }
    authenticateUser(username, password, done) {
        return this.services.getUser(username)
            .then(d => this.services.isNotEmpty(d, { LOG: this.LOGS.USER_NO_SUCH_USERNAME, params: { username } }))
            .then(d => this.services.checkEquals(password, d.password, d, { LOG: this.LOGS.USER_WRONG_PASSWORD }))
            .then(d => {
            done(null, d);
        })
            .catch(e => {
            done(e, null);
        });
    }
    passportLocalAuthenticate(req, res, next) {
        passport.authenticate('local', (e, d, info) => {
            if (!e) {
                req.body.user = d;
                next();
            }
            else {
                if (typeof e !== 'object' || !e.LOG) {
                    e = { LOG: this.LOGS.MASTER_INTERNAL_ERROR, params: { e, fn: "passportLocalAuthenticate", file: "user.middleware.js" } };
                }
                this.sendError(res, e.LOG, e.params);
            }
        })(req, res, next);
    }
}
exports.default = UserMiddleware;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci9saWIvdXNlci91c2VyLm1pZGRsZXdhcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUNiLG1FQUEyRDtBQUMzRCxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFFbkMsb0JBQW9DLFNBQVEsMkJBQWdCO0lBRTNELGNBQWMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUk7UUFDNUIsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUU7WUFDMUMsRUFBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFDO1lBQ3ZDLEVBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBQztTQUN2QyxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsaUJBQWlCLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJO1FBQy9CLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFO1lBQzFDLEVBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsVUFBVSxDQUFDLEVBQUM7WUFDM0ssRUFBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxD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QUMsRUFBRSxDQUFDLEVBQUUsSUFBSTtZQUN6QyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ1IsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO2dCQUNsQixJQUFJLEVBQUUsQ0FBQztZQUNSLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDUCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxRQUFRLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDckMsQ0FBQyxHQUFHLEVBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsTUFBTSxFQUFFLEVBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSwyQkFBMkIsRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUMsRUFBQyxDQUFDO2dCQUN0SCxDQUFDO2dCQUNELElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RDLENBQUM7UUFDRixDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pCLENBQUM7Q0FDSjtBQWpFRCxpQ0FpRUM7QUFBQSxDQUFDIiwiZmlsZSI6ImxpYi91c2VyL3VzZXIubWlkZGxld2FyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmltcG9ydCBNYXN0ZXJNaWRkbGV3YXJlIGZyb20gJy4uL21hc3Rlci9tYXN0ZXIubWlkZGxld2FyZSc7XG5sZXQgcGFzc3BvcnQgPSByZXF1aXJlKCdwYXNzcG9ydCcpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VyTWlkZGxld2FyZSBleHRlbmRzIE1hc3Rlck1pZGRsZXdhcmUge1xuXG5cdGhhc0xvZ2luUGFyYW1zKHJlcSwgcmVzLCBuZXh0KSB7XG5cdFx0cmV0dXJuIHRoaXMudmFsaWRhdGVQYXJhbXMocmVxLCByZXMsIG5leHQsIFtcblx0XHRcdHtwYXJhbTogXCJ1c2VybmFtZVwiLCBpc1R5cGU6IFtcInN0cmluZ1wiXX0sXG5cdFx0XHR7cGFyYW06IFwicGFzc3dvcmRcIiwgaXNUeXBlOiBbXCJzdHJpbmdcIl19XG5cdFx0XSk7XG5cdH1cblxuXHRoYXNSZWdpc3RlclBhcmFtcyhyZXEsIHJlcywgbmV4dCkge1xuXHRcdHJldHVybiB0aGlzLnZhbGlkYXRlUGFyYW1zKHJlcSwgcmVzLCBuZXh0LCBbXG5cdFx0XHR7cGFyYW06IFwidXNlcm5hbWVcIiwgaXNUeXBlOiBbXCJzdHJpbmdcIl0sIGNhbGxiYWNrOiB0aGlzLnNlcnZpY2VzLmluUmFuZ2UsIGFyZ3M6IFsoXCJcIiArIChyZXEuYm9keS51c2VybmFtZSB8fCBcIlwiKSkubGVuZ3RoLCAxLCAxNiwgdGhpcy5MT0dTLk1BU1RFUl9PVVRfT0ZfUkFOR0UsICd1c2VybmFtZSddfSxcblx0XHRcdHtwYXJhbTogXCJwYXNzd29yZFwiLCBpc1R5cGU6IFtcInN0cmluZ1wiXSwgY2FsbGJhY2s6IHRoaXMuc2VydmljZXMuaW5SYW5nZSwgYXJnczogWyhyZXEuYm9keS5wYXNzd29yZCB8fCBcIlwiKS5sZW5ndGgsIDMyLCAzMiwgdGhpcy5MT0dTLk1BU1RFUl9PVVRfT0ZfUkFOR0UsICdwYXNzd29yZCddfVxuXHRcdF0pO1xuXHR9XG5cblx0aXNMb2dnZWRPdXQocmVxLCByZXMsIG5leHQpIHtcblx0XHRpZiAoIXJlcS51c2VyKSB7XG5cdFx0XHRuZXh0KCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuc2VuZEVycm9yKHJlcywgdGhpcy5MT0dTLlVTRVJfTk9UX0xPR0dFRF9PVVQpO1xuXHRcdH1cblx0fVxuXG5cdGlzVXNlcm5hbWVVbmlxdWUocmVxLCByZXMsIG5leHQpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXJ2aWNlcy5nZXRVc2VyKHJlcS5ib2R5LnVzZXJuYW1lKVxuXHRcdC50aGVuKGQgPT4gdGhpcy5zZXJ2aWNlcy5pc0VtcHR5KGQsIHtMT0c6IHRoaXMuTE9HUy5VU0VSX1VTRVJOQU1FX0NBVUdIVCwgcGFyYW1zOiB7dXNlcm5hbWU6IHJlcS5ib2R5LnVzZXJuYW1lfX0pKVxuXHRcdC50aGVuKGQgPT4ge1xuXHRcdFx0bmV4dCgpO1xuXHRcdH0pXG5cdFx0LmNhdGNoKGUgPT4ge1xuXHRcdFx0aWYgKHR5cGVvZiBlICE9PSAnb2JqZWN0JyB8fCAhZS5MT0cpIHtcblx0XHRcdFx0ZSA9IHtMT0c6IHRoaXMuTE9HUy5NQVNURVJfSU5URVJOQUxfRVJST1IsIHBhcmFtczoge2UsIGZuOiBcImlzVXNlcm5hbWVVbmlxdWVcIiwgZmlsZTogXCJ1c2VyLm1pZGRsZXdhcmUuanNcIn19O1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5zZW5kRXJyb3IocmVzLCBlLkxPRywgZS5wYXJhbXMpO1xuXHRcdH0pO1xuXHR9XG5cblx0Ly8gUEFTU1BPUlQgRlVOQ1RJT05TIC8vXG5cdC8vID09PT09PT09PT09PT09PT09PSAvL1xuICAgIGF1dGhlbnRpY2F0ZVVzZXIodXNlcm5hbWUsIHBhc3N3b3JkLCBkb25lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlcnZpY2VzLmdldFVzZXIodXNlcm5hbWUpXG4gICAgICAgIC50aGVuKGQgPT4gdGhpcy5zZXJ2aWNlcy5pc05vdEVtcHR5KGQsIHtMT0c6IHRoaXMuTE9HUy5VU0VSX05PX1NVQ0hfVVNFUk5BTUUsIHBhcmFtczoge3VzZXJuYW1lfX0pKVxuICAgICAgICAudGhlbihkID0+IHRoaXMuc2VydmljZXMuY2hlY2tFcXVhbHMocGFzc3dvcmQsIGQucGFzc3dvcmQsIGQsIHtMT0c6IHRoaXMuTE9HUy5VU0VSX1dST05HX1BBU1NXT1JEfSkpXG4gICAgICAgIC50aGVuKGQgPT4ge1xuICAgICAgICAgICAgZG9uZShudWxsLCBkKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xuICAgICAgICAgICAgZG9uZShlLCBudWxsKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcGFzc3BvcnRMb2NhbEF1dGhlbnRpY2F0ZShyZXEsIHJlcywgbmV4dCkge1xuXHRcdHBhc3Nwb3J0LmF1dGhlbnRpY2F0ZSgnbG9jYWwnLCAoZSwgZCwgaW5mbykgPT4ge1xuXHRcdFx0aWYgKCFlKSB7XG5cdFx0XHRcdHJlcS5ib2R5LnVzZXIgPSBkO1xuXHRcdFx0XHRuZXh0KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAodHlwZW9mIGUgIT09ICdvYmplY3QnIHx8ICFlLkxPRykge1xuXHRcdFx0XHRcdGUgPSB7TE9HOiB0aGlzLkxPR1MuTUFTVEVSX0lOVEVSTkFMX0VSUk9SLCBwYXJhbXM6IHtlLCBmbjogXCJwYXNzcG9ydExvY2FsQXV0aGVudGljYXRlXCIsIGZpbGU6IFwidXNlci5taWRkbGV3YXJlLmpzXCJ9fTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLnNlbmRFcnJvcihyZXMsIGUuTE9HLCBlLnBhcmFtcyk7XG5cdFx0XHR9XG5cdFx0fSkocmVxLCByZXMsIG5leHQpO1xuICAgIH1cbn07Il19

'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const master_middleware_1 = require("../master/master.middleware");
let config = require('../../../server/lib/character/character.config.json');
class CharacterMiddleware extends master_middleware_1.default {
    validHasFewCharacters(req, res, next) {
        if (req.user.characters.length < config.MAX_CHARACTERS) {
            next();
        }
        else {
            this.sendError(res, this.LOGS.MAX_CHARACTERS);
        }
    }
    validateCreateCharacterParams(req, res, next) {
        return this.validateParams(req, res, next, [
            { param: "name", isType: ["string"], callback: this.services.invalidatesRegex, args: [req.body.name, /[^a-z0-9]/i, this.LOGS.MASTER_INVALID_PARAM_TYPE, 'name'] },
            { param: "name", isType: ["string"], callback: this.services.inRange, args: [req.body.name && req.body.name.length, 1, 16, this.LOGS.MASTER_OUT_OF_RANGE, 'name'] },
            { param: "g", isType: ["string"] },
            { param: "eyes", isType: ["string"] },
            { param: "nose", isType: ["string"] },
            { param: "mouth", isType: ["string"] },
            { param: "skin", isType: ["string"] },
            { param: "hair", isType: ["string"] }
        ]);
    }
    convertToFormatAndCheckNameUniqueness(req, res, next) {
        return Promise.all([
            this.services.checkIsNameUnique(req.body.name, { LOG: this.LOGS.CHARACTER_NAME_CAUGHT, params: { name: req.body.name } }),
            this.services.convertToFormat(req.body)
        ])
            .then(d => {
            req.body = d[1];
            next();
        })
            .catch(e => {
            if (typeof e !== 'object' || !e.LOG) {
                e = { LOG: this.LOGS.MASTER_INTERNAL_ERROR, params: { e, fn: "convertToFormatAndCheckNameUniqueness", file: "character.middleware.js" } };
            }
            this.sendError(res, e.LOG, e.params);
        });
    }
    validateDeleteCharacterParams(req, res, next) {
        if (req.body.id) {
            next();
        }
        else {
            this.sendError(res, this.LOGS.MASTER_INVALID_PARAM_TYPE, { param: 'id' });
        }
    }
    validateCharacterBelongsToUser(req, res, next) {
        var found = false;
        for (var i = 0; i < req.user.characters.length; i++) {
            if (req.user.characters[i]._id.equals(req.body.id)) {
                found = true;
                break;
            }
        }
        if (found) {
            next();
        }
        else {
            this.sendError(res, this.LOGS.CHARACTER_DOES_NOT_EXIST);
        }
    }
}
exports.default = CharacterMiddleware;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci9saWIvY2hhcmFjdGVyL2NoYXJhY3Rlci5taWRkbGV3YXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7QUFDYixtRUFBMkQ7QUFFM0QsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7QUFFNUUseUJBQXlDLFNBQVEsMkJBQWdCO0lBR3pELHFCQUFxQixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSTtRQUMxQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFDeEQsSUFBSSxFQUFFLENBQUM7UUFDUixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDUCxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFBO1FBQzlDLENBQUM7SUFDRixDQUFDO0lBRUQsNkJBQTZCLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJO1FBQzNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFO1lBQzFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxNQUFNLENBQUMsRUFBQztZQUMvSixFQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxD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LEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BELEtBQUssR0FBRyxJQUFJLENBQUM7Z0JBQ2IsS0FBSyxDQUFDO1lBQ1AsQ0FBQztRQUNGLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ1gsSUFBSSxFQUFFLENBQUM7UUFDUixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDUCxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFDekQsQ0FBQztJQUNGLENBQUM7Q0FDRDtBQS9ERCxzQ0ErREM7QUFBQSxDQUFDIiwiZmlsZSI6ImxpYi9jaGFyYWN0ZXIvY2hhcmFjdGVyLm1pZGRsZXdhcmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5pbXBvcnQgTWFzdGVyTWlkZGxld2FyZSBmcm9tICcuLi9tYXN0ZXIvbWFzdGVyLm1pZGRsZXdhcmUnO1xuaW1wb3J0IENoYXJhY3RlclNlcnZpY2VzIGZyb20gJy4vY2hhcmFjdGVyLnNlcnZpY2VzJztcbmxldCBjb25maWcgPSByZXF1aXJlKCcuLi8uLi8uLi9zZXJ2ZXIvbGliL2NoYXJhY3Rlci9jaGFyYWN0ZXIuY29uZmlnLmpzb24nKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhcmFjdGVyTWlkZGxld2FyZSBleHRlbmRzIE1hc3Rlck1pZGRsZXdhcmUge1xuXHRwcm90ZWN0ZWQgc2VydmljZXM6IENoYXJhY3RlclNlcnZpY2VzO1xuXG5cdHB1YmxpYyB2YWxpZEhhc0Zld0NoYXJhY3RlcnMocmVxLCByZXMsIG5leHQpIHtcblx0XHRpZiAocmVxLnVzZXIuY2hhcmFjdGVycy5sZW5ndGggPCBjb25maWcuTUFYX0NIQVJBQ1RFUlMpIHtcblx0XHRcdG5leHQoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5zZW5kRXJyb3IocmVzLCB0aGlzLkxPR1MuTUFYX0NIQVJBQ1RFUlMpXG5cdFx0fVxuXHR9XG5cblx0dmFsaWRhdGVDcmVhdGVDaGFyYWN0ZXJQYXJhbXMocmVxLCByZXMsIG5leHQpIHtcblx0XHRyZXR1cm4gdGhpcy52YWxpZGF0ZVBhcmFtcyhyZXEsIHJlcywgbmV4dCwgW1xuXHRcdFx0e3BhcmFtOiBcIm5hbWVcIiwgaXNUeXBlOiBbXCJzdHJpbmdcIl0sIGNhbGxiYWNrOiB0aGlzLnNlcnZpY2VzLmludmFsaWRhdGVzUmVnZXgsIGFyZ3M6IFtyZXEuYm9keS5uYW1lLCAvW15hLXowLTldL2ksIHRoaXMuTE9HUy5NQVNURVJfSU5WQUxJRF9QQVJBTV9UWVBFLCAnbmFtZSddfSxcblx0XHRcdHtwYXJhbTogXCJuYW1lXCIsIGlzVHlwZTogW1wic3RyaW5nXCJdLCBjYWxsYmFjazogdGhpcy5zZXJ2aWNlcy5pblJhbmdlLCBhcmdzOiBbcmVxLmJvZHkubmFtZSAmJiByZXEuYm9keS5uYW1lLmxlbmd0aCwgMSwgMTYsIHRoaXMuTE9HUy5NQVNURVJfT1VUX09GX1JBTkdFLCAnbmFtZSddfSxcblx0XHRcdHtwYXJhbTogXCJnXCIsIFx0aXNUeXBlOiBbXCJzdHJpbmdcIl19LFxuXHRcdFx0e3BhcmFtOiBcImV5ZXNcIiwgaXNUeXBlOiBbXCJzdHJpbmdcIl19LFxuXHRcdFx0e3BhcmFtOiBcIm5vc2VcIiwgaXNUeXBlOiBbXCJzdHJpbmdcIl19LFxuXHRcdFx0e3BhcmFtOiBcIm1vdXRoXCIsaXNUeXBlOiBbXCJzdHJpbmdcIl19LFxuXHRcdFx0e3BhcmFtOiBcInNraW5cIiwgaXNUeXBlOiBbXCJzdHJpbmdcIl19LFxuXHRcdFx0e3BhcmFtOiBcImhhaXJcIiwgaXNUeXBlOiBbXCJzdHJpbmdcIl19XG5cdFx0XSk7XG5cdH1cblxuXHRjb252ZXJ0VG9Gb3JtYXRBbmRDaGVja05hbWVVbmlxdWVuZXNzKHJlcSwgcmVzLCBuZXh0KSB7XG5cdFx0cmV0dXJuIFByb21pc2UuYWxsKFtcblx0XHRcdHRoaXMuc2VydmljZXMuY2hlY2tJc05hbWVVbmlxdWUocmVxLmJvZHkubmFtZSwge0xPRzogdGhpcy5MT0dTLkNIQVJBQ1RFUl9OQU1FX0NBVUdIVCwgcGFyYW1zOiB7bmFtZTogcmVxLmJvZHkubmFtZX19KSxcblx0XHRcdHRoaXMuc2VydmljZXMuY29udmVydFRvRm9ybWF0KHJlcS5ib2R5KVxuXHRcdF0pXG5cdFx0LnRoZW4oZCA9PiB7XG5cdFx0XHRyZXEuYm9keSA9IGRbMV07XG5cdFx0XHRuZXh0KCk7XG5cdFx0fSlcblx0XHQuY2F0Y2goZSA9PiB7XG5cdFx0XHRpZiAodHlwZW9mIGUgIT09ICdvYmplY3QnIHx8ICFlLkxPRykge1xuXHRcdFx0XHRlID0ge0xPRzogdGhpcy5MT0dTLk1BU1RFUl9JTlRFUk5BTF9FUlJPUiwgcGFyYW1zOiB7ZSwgZm46IFwiY29udmVydFRvRm9ybWF0QW5kQ2hlY2tOYW1lVW5pcXVlbmVzc1wiLCBmaWxlOiBcImNoYXJhY3Rlci5taWRkbGV3YXJlLmpzXCJ9fTtcblx0XHRcdH1cblx0XHRcdHRoaXMuc2VuZEVycm9yKHJlcywgZS5MT0csIGUucGFyYW1zKTtcblx0XHR9KTtcblx0fVxuXG5cdHZhbGlkYXRlRGVsZXRlQ2hhcmFjdGVyUGFyYW1zKHJlcSwgcmVzLCBuZXh0KSB7XG5cdFx0aWYgKHJlcS5ib2R5LmlkKSB7XG5cdFx0XHRuZXh0KCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuc2VuZEVycm9yKHJlcywgdGhpcy5MT0dTLk1BU1RFUl9JTlZBTElEX1BBUkFNX1RZUEUsIHtwYXJhbTogJ2lkJ30pXG5cdFx0fVxuXHR9XG5cblx0dmFsaWRhdGVDaGFyYWN0ZXJCZWxvbmdzVG9Vc2VyKHJlcSwgcmVzLCBuZXh0KSB7XG5cdFx0dmFyIGZvdW5kID0gZmFsc2U7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCByZXEudXNlci5jaGFyYWN0ZXJzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZiAocmVxLnVzZXIuY2hhcmFjdGVyc1tpXS5faWQuZXF1YWxzKHJlcS5ib2R5LmlkKSkge1xuXHRcdFx0XHRmb3VuZCA9IHRydWU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoZm91bmQpIHtcblx0XHRcdG5leHQoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5zZW5kRXJyb3IocmVzLCB0aGlzLkxPR1MuQ0hBUkFDVEVSX0RPRVNfTk9UX0VYSVNUKTtcblx0XHR9XG5cdH1cbn07Il19

'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const master_services_1 = require("../master/master.services");
const _ = require("underscore");
class QuestsServices extends master_services_1.default {
    constructor() {
        super(...arguments);
        this.questsInfo = new Map();
    }
    startQuest(quests, questInfo) {
        quests.progress[questInfo.key] = {};
        let fields = new Set(["progress"]);
        for (var mobKey in ((questInfo.cond || {}).hunt || {})) {
            quests.hunt[mobKey] = quests.hunt[mobKey] || {};
            quests.hunt[mobKey][questInfo.key] = 0;
            fields.add("hunt");
        }
        this.markModified(quests, fields);
    }
    finishQuest(quests, questInfo) {
        this.removeQuest(quests, questInfo);
        quests.done[questInfo.key] = {};
        quests.markModified("done");
    }
    abortQuest(quests, questInfo) {
        this.removeQuest(quests, questInfo);
    }
    removeQuest(quests, questInfo) {
        delete quests.progress[questInfo.key];
        let fields = new Set(["progress"]);
        for (var mobKey in ((questInfo.cond || {}).hunt || {})) {
            delete quests.hunt[mobKey][questInfo.key];
            if (_.isEmpty(quests.hunt[mobKey])) {
                delete quests.hunt[mobKey];
            }
            fields.add("hunt");
        }
        this.markModified(quests, fields);
    }
    markModified(quests, fields) {
        for (let field of fields) {
            quests.markModified(field);
        }
    }
    questReqUnmetReason(char, questInfo) {
        let req = questInfo.req;
        if (req) {
            if (req.lvl && char.stats.lvl < req.lvl) {
                return `level ${char.stats.lvl} / ${req.lvl}`;
            }
            for (var i in (req.quests || [])) {
                let reqQuest = req.quests[i];
                if (!char.quests.done[reqQuest]) {
                    return `quest id '${reqQuest}'`;
                }
            }
        }
        return "";
    }
    questFinishUnmetReason(char, itemsCounts, questInfo) {
        for (var itemKey in ((questInfo.cond || {}).loot || {})) {
            let progress = itemKey === "gold" ? char.gold : itemsCounts.get(itemKey);
            let target = questInfo.cond.loot[itemKey];
            if (progress < target) {
                return `loot ${progress} / ${target} ${itemKey}`;
            }
        }
        for (var mobKey in ((questInfo.cond || {}).hunt || {})) {
            let progress = char.quests.hunt[mobKey][questInfo.key];
            let target = questInfo.cond.hunt[mobKey];
            if (progress < target) {
                return `hunt ${progress} / ${target} ${mobKey}`;
            }
        }
        return "";
    }
    generateQuests(quests) {
        console.log("Generating quests from data:", quests);
        let models = [];
        (quests || []).forEach(quest => {
            let questSchema = { key: quest.key };
            {
                let conditions = {};
                (quest.conditions || []).forEach(condition => {
                    conditions[condition.condition] = conditions[condition.condition] || {};
                    conditions[condition.condition][condition.conditionType] = +condition.targetProgress;
                    questSchema.cond = conditions;
                });
            }
            {
                let req = {};
                if (quest.minLevel > 0)
                    req.lvl = +quest.minLevel;
                if (quest.requiredClass)
                    req.class = quest.requiredClass;
                let reqQuests = [];
                (quest.RequiredQuests || []).forEach(reqQuest => {
                    reqQuests.push(reqQuest.key);
                    req.quests = reqQuests;
                });
                if (!_.isEmpty(req)) {
                    questSchema.req = req;
                }
            }
            {
                let rewards = {};
                if (quest.rewardClass)
                    rewards.class = quest.rewardClass;
                if (quest.rewardExp > 0)
                    rewards.exp = +quest.rewardExp;
                if (quest.rewardPrimaryAbility)
                    rewards.ability = quest.rewardPrimaryAbility;
                let stats = {};
                if (quest.rewardSTR > 0)
                    stats.str = +quest.rewardSTR;
                if (quest.rewardMAG > 0)
                    stats.mag = +quest.rewardMAG;
                if (quest.rewardDEX > 0)
                    stats.dex = +quest.rewardDEX;
                if (quest.rewardHP > 0)
                    stats.hp = +quest.rewardHP;
                if (quest.rewardMP > 0)
                    stats.mp = +quest.rewardMP;
                if (!_.isEmpty(stats)) {
                    rewards.stats = stats;
                }
                let items = [];
                (quest.rewardItems || []).forEach(item => {
                    let rewardItem = { key: item.key };
                    if (item.stack > 1) {
                        rewardItem.stack = +item.stack;
                    }
                    items.push(rewardItem);
                    rewards.items = items;
                });
                if (!_.isEmpty(rewards)) {
                    questSchema.reward = rewards;
                }
            }
            let questModel = new this.Model(questSchema);
            models.push(questModel);
        });
        return this.Model.remove({})
            .then(d => this.Model.create(models));
    }
    getQuestInfo(key) {
        return this.questsInfo.get(key);
    }
    getQuests() {
        return this.Model.find({}).lean()
            .then((docs) => {
            docs.forEach(doc => {
                this.questsInfo.set(doc.key, doc);
            });
            console.log("got quests");
            return this.questsInfo;
        });
    }
}
exports.default = QuestsServices;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const master_services_1 = require("../master/master.services");
class EquipsServices extends master_services_1.default {
    init(files, app) {
        super.init(files, app);
        this.middleware = files.middleware;
        this.itemsRouter = files.routers.items;
        this.socketioRouter = files.routers.socketio;
    }
    beginEquips(items) {
        console.log("Generating begin equips from data:", items);
        let equips = {};
        for (let i = 0; i < (items || []).length; i++) {
            let itemKey = items[i] && items[i].key;
            let itemInfo = this.itemsRouter.getItemInfo(itemKey);
            if (!itemInfo) {
                return Promise.reject(`Item ${itemKey} does not exist.`);
            }
            if (equips[itemInfo.type]) {
                return Promise.reject(`Item type ${itemInfo.type} was provided more than once: ${equips[itemInfo.type]} and ${itemKey}.`);
            }
            if (!this.middleware.isValidEquipItem(itemInfo)) {
                return Promise.reject(`Item ${itemKey} is not an equip.`);
            }
            equips[itemInfo.type] = itemKey;
        }
        return Promise.resolve()
            .then(() => {
            let config = this.socketioRouter.getConfig();
            config.beginEquips = equips;
            return config.save();
        });
    }
}
exports.default = EquipsServices;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci9saWIvZXF1aXBzL2VxdWlwcy5zZXJ2aWNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7O0FBQ2IsK0RBQXVEO0FBS3ZELG9CQUFvQyxTQUFRLHlCQUFjO0lBSXpELElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRztRQUNkLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQztRQUN6QyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7SUFDOUMsQ0FBQztJQUVTLFdBQVcsQ0FBQyxLQUFzQjtRQUMzQyxPQUFPLENBQUMsR0FBRyxDQUFDLG9DQUFvQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXpELElBQUksTUFBTSxHQUFnQixFQUFFLENBQUM7UUFFdkIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUM1QyxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztZQUNoRCxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM1QyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQ1osTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxPQUFPLGtCQUFrQixDQUFDLENBQUM7WUFDN0QsQ0FBQztZQUNELEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN4QixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLFFBQVEsQ0FBQyxJQUFJLGlDQUFpQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLE9BQU8sR0FBRyxDQUFDLENBQUM7WUFDOUgsQ0FBQztZQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzlDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsT0FBTyxtQkFBbUIsQ0FBQyxDQUFDO1lBQzlELENBQUM7WUFDRCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQztRQUNwQyxDQUFDO1FBRVAsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUU7YUFDdEIsSUFBSSxDQUFDO1lBQ08sSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUM3QyxNQUFNLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQztZQUM1QixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBQ2QsQ0FBQztDQUNEO0FBdENELGlDQXNDQztBQUFBLENBQUMiLCJmaWxlIjoibGliL2VxdWlwcy9lcXVpcHMuc2VydmljZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5pbXBvcnQgTWFzdGVyU2VydmljZXMgZnJvbSAnLi4vbWFzdGVyL21hc3Rlci5zZXJ2aWNlcyc7XG5pbXBvcnQgSXRlbXNSb3V0ZXIgZnJvbSAnLi4vaXRlbXMvaXRlbXMucm91dGVyJztcbmltcG9ydCBFcXVpcHNNaWRkbGV3YXJlIGZyb20gJy4vZXF1aXBzLm1pZGRsZXdhcmUnO1xuaW1wb3J0IFNvY2tldGlvUm91dGVyIGZyb20gJy4uL3NvY2tldGlvL3NvY2tldGlvLnJvdXRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVxdWlwc1NlcnZpY2VzIGV4dGVuZHMgTWFzdGVyU2VydmljZXMge1xuICAgIHByb3RlY3RlZCBpdGVtc1JvdXRlcjogSXRlbXNSb3V0ZXI7XG4gICAgcHJvdGVjdGVkIG1pZGRsZXdhcmU6IEVxdWlwc01pZGRsZXdhcmU7XG4gICAgcHJvdGVjdGVkIHNvY2tldGlvUm91dGVyOiBTb2NrZXRpb1JvdXRlcjtcblx0aW5pdChmaWxlcywgYXBwKSB7XG5cdFx0c3VwZXIuaW5pdChmaWxlcywgYXBwKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlID0gZmlsZXMubWlkZGxld2FyZTtcblx0XHR0aGlzLml0ZW1zUm91dGVyID0gZmlsZXMucm91dGVycy5pdGVtcztcblx0XHR0aGlzLnNvY2tldGlvUm91dGVyID0gZmlsZXMucm91dGVycy5zb2NrZXRpbztcblx0fVxuXG4gICAgcHVibGljIGJlZ2luRXF1aXBzKGl0ZW1zOiB7a2V5OiBzdHJpbmd9W10pOiBQcm9taXNlPGFueT4ge1xuXHRcdGNvbnNvbGUubG9nKFwiR2VuZXJhdGluZyBiZWdpbiBlcXVpcHMgZnJvbSBkYXRhOlwiLCBpdGVtcyk7XG5cdFx0XG5cdFx0bGV0IGVxdWlwczogQmVnaW5FcXVpcHMgPSB7fTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IChpdGVtcyB8fCBbXSkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBpdGVtS2V5ID0gaXRlbXNbaV0gJiYgaXRlbXNbaV0ua2V5O1xuXHRcdFx0bGV0IGl0ZW1JbmZvID0gdGhpcy5pdGVtc1JvdXRlci5nZXRJdGVtSW5mbyhpdGVtS2V5KTtcbiAgICAgICAgICAgIGlmICghaXRlbUluZm8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEl0ZW0gJHtpdGVtS2V5fSBkb2VzIG5vdCBleGlzdC5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcXVpcHNbaXRlbUluZm8udHlwZV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEl0ZW0gdHlwZSAke2l0ZW1JbmZvLnR5cGV9IHdhcyBwcm92aWRlZCBtb3JlIHRoYW4gb25jZTogJHtlcXVpcHNbaXRlbUluZm8udHlwZV19IGFuZCAke2l0ZW1LZXl9LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLm1pZGRsZXdhcmUuaXNWYWxpZEVxdWlwSXRlbShpdGVtSW5mbykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEl0ZW0gJHtpdGVtS2V5fSBpcyBub3QgYW4gZXF1aXAuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlcXVpcHNbaXRlbUluZm8udHlwZV0gPSBpdGVtS2V5O1xuICAgICAgICB9XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcblx0XHRcdC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgY29uZmlnID0gdGhpcy5zb2NrZXRpb1JvdXRlci5nZXRDb25maWcoKTtcbiAgICAgICAgICAgICAgICBjb25maWcuYmVnaW5FcXVpcHMgPSBlcXVpcHM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbmZpZy5zYXZlKCk7XG4gICAgICAgICAgICB9KTtcblx0fVxufTsiXX0=

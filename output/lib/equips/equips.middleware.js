'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const items_middleware_1 = require("../items/items.middleware");
const equips_model_1 = require("./equips.model");
class EquipsMiddleware extends items_middleware_1.default {
    isValidEquipSlot(slot) {
        return slot in equips_model_1.EQUIPS_SCHEMA;
    }
    isValidEquipItem(item) {
        return this.isValidEquipSlot(item.type);
    }
    hasEquip(socket, slot) {
        return this.isValidEquipSlot(slot) && this.isItem(socket.character.equips[slot]);
    }
    canWearEquip(socket, item, slot) {
        return this.doesEquipFit(item, slot) && this.hasRequirements(socket, item, slot);
    }
    doesEquipFit(item, slot) {
        return item.type === slot;
    }
    hasRequirements(socket, item, slot) {
        for (let stat in (item.req || {})) {
            let itemValue = item.req[stat];
            let charValue = socket.character.stats[stat];
            if (charValue < itemValue) {
                return false;
            }
        }
        return true;
    }
    swapEquipAndItem(socket, itemSlot, equipSlot) {
        let item = socket.character.items[itemSlot];
        let currentEquip = socket.character.equips[equipSlot];
        socket.character.equips[equipSlot] = item;
        socket.character.items.set(itemSlot, currentEquip);
    }
}
exports.default = EquipsMiddleware;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci9saWIvZXF1aXBzL2VxdWlwcy5taWRkbGV3YXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7QUFDYixnRUFBd0Q7QUFDeEQsaURBQTZDO0FBRTdDLHNCQUFzQyxTQUFRLDBCQUFlO0lBQ3pELGdCQUFnQixDQUFDLElBQVk7UUFDekIsTUFBTSxDQUFDLElBQUksSUFBSSw0QkFBYSxDQUFDO0lBQ2pDLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxJQUFnQjtRQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsUUFBUSxDQUFDLE1BQWtCLEVBQUUsSUFBWTtRQUNyQyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNyRixDQUFDO0lBRUQsWUFBWSxDQUFDLE1BQWtCLEVBQUUsSUFBZ0IsRUFBRSxJQUFZO1FBQzNELE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDckYsQ0FBQztJQUVPLFlBQVksQ0FBQyxJQUFnQixFQUFFLElBQVk7UUFDL0MsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDO0lBQzlCLENBQUM7SUFFTyxlQUFlLENBQUMsTUFBa0IsRUFBRSxJQUFnQixFQUFFLElBQVk7UUFDdEUsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoQyxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRS9CLElBQUksU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzdDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUN4QixNQUFNLENBQUMsS0FBSyxDQUFDO1lBQ2pCLENBQUM7UUFDTCxDQUFDO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsTUFBa0IsRUFBRSxRQUFnQixFQUFFLFNBQWlCO1FBQ3BFLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzVDLElBQUksWUFBWSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3RELE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUMxQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Q0FDSjtBQXZDRCxtQ0F1Q0M7QUFBQSxDQUFDIiwiZmlsZSI6ImxpYi9lcXVpcHMvZXF1aXBzLm1pZGRsZXdhcmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5pbXBvcnQgSXRlbXNNaWRkbGV3YXJlIGZyb20gJy4uL2l0ZW1zL2l0ZW1zLm1pZGRsZXdhcmUnO1xuaW1wb3J0IHtFUVVJUFNfU0NIRU1BfSBmcm9tIFwiLi9lcXVpcHMubW9kZWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXF1aXBzTWlkZGxld2FyZSBleHRlbmRzIEl0ZW1zTWlkZGxld2FyZSB7XG4gICAgaXNWYWxpZEVxdWlwU2xvdChzbG90OiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHNsb3QgaW4gRVFVSVBTX1NDSEVNQTtcbiAgICB9XG5cbiAgICBpc1ZhbGlkRXF1aXBJdGVtKGl0ZW06IElURU1fTU9ERUwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZEVxdWlwU2xvdChpdGVtLnR5cGUpO1xuICAgIH1cblxuICAgIGhhc0VxdWlwKHNvY2tldDogR2FtZVNvY2tldCwgc2xvdDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWRFcXVpcFNsb3Qoc2xvdCkgJiYgdGhpcy5pc0l0ZW0oc29ja2V0LmNoYXJhY3Rlci5lcXVpcHNbc2xvdF0pO1xuICAgIH1cblxuICAgIGNhbldlYXJFcXVpcChzb2NrZXQ6IEdhbWVTb2NrZXQsIGl0ZW06IElURU1fTU9ERUwsIHNsb3Q6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kb2VzRXF1aXBGaXQoaXRlbSwgc2xvdCkgJiYgdGhpcy5oYXNSZXF1aXJlbWVudHMoc29ja2V0LCBpdGVtLCBzbG90KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRvZXNFcXVpcEZpdChpdGVtOiBJVEVNX01PREVMLCBzbG90OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0udHlwZSA9PT0gc2xvdDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhc1JlcXVpcmVtZW50cyhzb2NrZXQ6IEdhbWVTb2NrZXQsIGl0ZW06IElURU1fTU9ERUwsIHNsb3Q6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBmb3IgKGxldCBzdGF0IGluIChpdGVtLnJlcSB8fCB7fSkpIHtcbiAgICAgICAgICAgIGxldCBpdGVtVmFsdWUgPSBpdGVtLnJlcVtzdGF0XTtcbiAgICAgICAgICAgIC8vIHdlIG9ubHkgY2hlY2sgYWdhaW5zdCBiYXNlIHZhbHVlXG4gICAgICAgICAgICBsZXQgY2hhclZhbHVlID0gc29ja2V0LmNoYXJhY3Rlci5zdGF0c1tzdGF0XTtcbiAgICAgICAgICAgIGlmIChjaGFyVmFsdWUgPCBpdGVtVmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgc3dhcEVxdWlwQW5kSXRlbShzb2NrZXQ6IEdhbWVTb2NrZXQsIGl0ZW1TbG90OiBudW1iZXIsIGVxdWlwU2xvdDogc3RyaW5nKSB7XG4gICAgICAgIGxldCBpdGVtID0gc29ja2V0LmNoYXJhY3Rlci5pdGVtc1tpdGVtU2xvdF07XG4gICAgICAgIGxldCBjdXJyZW50RXF1aXAgPSBzb2NrZXQuY2hhcmFjdGVyLmVxdWlwc1tlcXVpcFNsb3RdO1xuICAgICAgICBzb2NrZXQuY2hhcmFjdGVyLmVxdWlwc1tlcXVpcFNsb3RdID0gaXRlbTtcbiAgICAgICAgc29ja2V0LmNoYXJhY3Rlci5pdGVtcy5zZXQoaXRlbVNsb3QsIGN1cnJlbnRFcXVpcCk7XG4gICAgfVxufTsiXX0=

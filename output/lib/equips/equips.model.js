"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const master_model_1 = require("../master/master.model");
const _ = require("underscore");
const items_model_1 = require("../items/items.model");
exports.EQUIPS_SCHEMA = {
    head: items_model_1.ITEM_INSTANCE_SCHEMA,
    chest: items_model_1.ITEM_INSTANCE_SCHEMA,
    legs: items_model_1.ITEM_INSTANCE_SCHEMA,
    gloves: items_model_1.ITEM_INSTANCE_SCHEMA,
    shoes: items_model_1.ITEM_INSTANCE_SCHEMA,
    weapon: items_model_1.ITEM_INSTANCE_SCHEMA,
};
class EquipsModel extends master_model_1.default {
    init(files, app) {
        this.socketioRouter = files.routers.socketio;
        this.itemsRouter = files.routers.items;
        this.hasId = false;
        this.schema = _.clone(exports.EQUIPS_SCHEMA);
        this.beginSchema = _.clone(exports.EQUIPS_SCHEMA);
        for (let i in this.schema) {
            this.schema[i] = this.mongoose.Schema.Types.Mixed;
            this.beginSchema[i] = String;
        }
    }
    get priority() {
        return 20;
    }
    createModel() {
        this.setModel("Equip");
        this.addToSchema("Character", { equips: this.getModel().schema });
        this.addToSchema("Config", { beginEquips: this.beginSchema });
        this.listenForFieldAddition("Character", "equips", () => {
            let equips = _.clone(exports.EQUIPS_SCHEMA);
            let ItemModel = this.getModel("ItemInstance");
            let config = this.socketioRouter.getConfig();
            for (let type in equips) {
                let itemInstance = this.itemsRouter.getItemInstance(config.beginEquips[type]) || {};
                equips[type] = new ItemModel(itemInstance);
            }
            return equips;
        });
        return Promise.resolve();
    }
}
exports.default = EquipsModel;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci9saWIvZXF1aXBzL2VxdWlwcy5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7O0FBQ2IseURBQWlEO0FBQ2pELGdDQUFnQztBQUNoQyxzREFBNEQ7QUFJL0MsUUFBQSxhQUFhLEdBQUc7SUFDekIsSUFBSSxFQUFFLGtDQUFvQjtJQUMxQixLQUFLLEVBQUUsa0NBQW9CO0lBQzNCLElBQUksRUFBRSxrQ0FBb0I7SUFDMUIsTUFBTSxFQUFFLGtDQUFvQjtJQUM1QixLQUFLLEVBQUUsa0NBQW9CO0lBQzNCLE1BQU0sRUFBRSxrQ0FBb0I7Q0FDL0IsQ0FBQztBQUVGLGlCQUFpQyxTQUFRLHNCQUFXO0lBS2hELElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRztRQUNqQixJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO1FBQzdDLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFDakMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLHFCQUFhLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMscUJBQWEsQ0FBQyxDQUFDO1FBQzFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztZQUNsRCxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUNqQyxDQUFDO0lBQ0wsQ0FBQztJQUVELElBQUksUUFBUTtRQUNSLE1BQU0sQ0FBQyxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFdkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFFOUQsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUU7WUFDL0MsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxxQkFBYSxDQUFDLENBQUM7WUFDcEMsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUM5QyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQzdDLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ3RCLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ3BGLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMvQyxDQUFDO1lBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNsQixDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDN0IsQ0FBQztDQUNKO0FBeENELDhCQXdDQztBQUFBLENBQUMiLCJmaWxlIjoibGliL2VxdWlwcy9lcXVpcHMubW9kZWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCBNYXN0ZXJNb2RlbCBmcm9tIFwiLi4vbWFzdGVyL21hc3Rlci5tb2RlbFwiO1xuaW1wb3J0ICogYXMgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCB7IElURU1fSU5TVEFOQ0VfU0NIRU1BIH0gZnJvbSBcIi4uL2l0ZW1zL2l0ZW1zLm1vZGVsXCI7XG5pbXBvcnQgU29ja2V0aW9Sb3V0ZXIgZnJvbSAnLi4vc29ja2V0aW8vc29ja2V0aW8ucm91dGVyJztcbmltcG9ydCBJdGVtc1JvdXRlciBmcm9tICcuLi9pdGVtcy9pdGVtcy5yb3V0ZXInO1xuXG5leHBvcnQgY29uc3QgRVFVSVBTX1NDSEVNQSA9IHtcbiAgICBoZWFkOiBJVEVNX0lOU1RBTkNFX1NDSEVNQSxcbiAgICBjaGVzdDogSVRFTV9JTlNUQU5DRV9TQ0hFTUEsXG4gICAgbGVnczogSVRFTV9JTlNUQU5DRV9TQ0hFTUEsXG4gICAgZ2xvdmVzOiBJVEVNX0lOU1RBTkNFX1NDSEVNQSxcbiAgICBzaG9lczogSVRFTV9JTlNUQU5DRV9TQ0hFTUEsXG4gICAgd2VhcG9uOiBJVEVNX0lOU1RBTkNFX1NDSEVNQSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVxdWlwc01vZGVsIGV4dGVuZHMgTWFzdGVyTW9kZWwge1xuICAgIHByb3RlY3RlZCBiZWdpblNjaGVtYTtcbiAgICBwcm90ZWN0ZWQgc29ja2V0aW9Sb3V0ZXI6IFNvY2tldGlvUm91dGVyO1xuICAgIHByb3RlY3RlZCBpdGVtc1JvdXRlcjogSXRlbXNSb3V0ZXI7XG5cdFxuICAgIGluaXQoZmlsZXMsIGFwcCkge1xuXHRcdHRoaXMuc29ja2V0aW9Sb3V0ZXIgPSBmaWxlcy5yb3V0ZXJzLnNvY2tldGlvO1xuXHRcdHRoaXMuaXRlbXNSb3V0ZXIgPSBmaWxlcy5yb3V0ZXJzLml0ZW1zO1xuICAgICAgICB0aGlzLmhhc0lkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2NoZW1hID0gXy5jbG9uZShFUVVJUFNfU0NIRU1BKTtcbiAgICAgICAgdGhpcy5iZWdpblNjaGVtYSA9IF8uY2xvbmUoRVFVSVBTX1NDSEVNQSk7XG4gICAgICAgIGZvciAobGV0IGkgaW4gdGhpcy5zY2hlbWEpIHtcbiAgICAgICAgICAgIHRoaXMuc2NoZW1hW2ldID0gdGhpcy5tb25nb29zZS5TY2hlbWEuVHlwZXMuTWl4ZWQ7XG4gICAgICAgICAgICB0aGlzLmJlZ2luU2NoZW1hW2ldID0gU3RyaW5nO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IHByaW9yaXR5KCkge1xuICAgICAgICByZXR1cm4gMjA7XG4gICAgfVxuXG4gICAgY3JlYXRlTW9kZWwoKSB7XG4gICAgICAgIHRoaXMuc2V0TW9kZWwoXCJFcXVpcFwiKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuYWRkVG9TY2hlbWEoXCJDaGFyYWN0ZXJcIiwgeyBlcXVpcHM6IHRoaXMuZ2V0TW9kZWwoKS5zY2hlbWEgfSk7XG4gICAgICAgIHRoaXMuYWRkVG9TY2hlbWEoXCJDb25maWdcIiwgeyBiZWdpbkVxdWlwczogdGhpcy5iZWdpblNjaGVtYSB9KTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMubGlzdGVuRm9yRmllbGRBZGRpdGlvbihcIkNoYXJhY3RlclwiLCBcImVxdWlwc1wiLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgZXF1aXBzID0gXy5jbG9uZShFUVVJUFNfU0NIRU1BKTtcbiAgICAgICAgICAgIGxldCBJdGVtTW9kZWwgPSB0aGlzLmdldE1vZGVsKFwiSXRlbUluc3RhbmNlXCIpO1xuICAgICAgICAgICAgbGV0IGNvbmZpZyA9IHRoaXMuc29ja2V0aW9Sb3V0ZXIuZ2V0Q29uZmlnKCk7XG4gICAgICAgICAgICBmb3IgKGxldCB0eXBlIGluIGVxdWlwcykge1xuICAgICAgICAgICAgICAgIGxldCBpdGVtSW5zdGFuY2UgPSB0aGlzLml0ZW1zUm91dGVyLmdldEl0ZW1JbnN0YW5jZShjb25maWcuYmVnaW5FcXVpcHNbdHlwZV0pIHx8IHt9O1xuICAgICAgICAgICAgICAgIGVxdWlwc1t0eXBlXSA9IG5ldyBJdGVtTW9kZWwoaXRlbUluc3RhbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlcXVpcHM7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbn07Il19

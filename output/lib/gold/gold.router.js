'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const socketio_router_base_1 = require("../socketio/socketio.router.base");
let dropsConfig = require('../../../server/lib/drops/drops.config.json');
let config = require('../../../server/lib/gold/gold.config.json');
class GoldRouter extends socketio_router_base_1.default {
    init(files, app) {
        super.init(files, app);
        this.itemsRouter = files.routers.items;
        this.partyRouter = files.routers.party;
    }
    [config.SERVER_GETS.ITEM_PICK.name](data, socket) {
        this.emitter.emit(dropsConfig.SERVER_INNER.ITEM_PICK.name, data, socket, (item) => {
            let itemInfo = this.itemsRouter.getItemInfo(item.key);
            if (!this.middleware.isGold(itemInfo)) {
                return;
            }
            let partySockets = this.partyRouter.getPartyMembersInMap(socket);
            item.stack = Math.ceil(item.stack / partySockets.length);
            for (let memberSocket of partySockets) {
                this[config.SERVER_INNER.ITEM_ADD.name]({ item }, memberSocket);
            }
            return true;
        });
    }
    [config.SERVER_INNER.ITEM_ADD.name](data, socket) {
        let { item } = data;
        if (this.middleware.isGold(item)) {
            socket.character.gold += +item.stack;
            socket.emit(this.CLIENT_GETS.CHANGE_GOLD.name, {
                amount: item.stack
            });
            this.log(data, socket, "Gaining item");
        }
    }
    [config.SERVER_INNER.ITEM_REMOVE.name](data, socket) {
        let { stack, key } = data.item;
        if (this.middleware.isGold({ key })) {
            socket.character.gold -= stack;
            socket.emit(this.CLIENT_GETS.CHANGE_GOLD.name, {
                amount: -stack
            });
            this.log(data, socket, "Remove item");
        }
    }
    [config.SERVER_GETS.DROP_GOLD.name](data, socket) {
        let { amount } = data;
        if (!(amount > 0)) {
            this.sendError(data, socket, "Must mention what gold amount to throw");
        }
        else if (socket.character.gold === 0) {
            this.sendError(data, socket, "Character does not have gold to throw!");
        }
        else {
            let item = this.itemsRouter.getItemInstance("gold");
            item.stack = Math.min(amount, socket.character.gold);
            this.emitter.emit(config.SERVER_INNER.ITEM_REMOVE.name, { item }, socket);
            this.emitter.emit(dropsConfig.SERVER_INNER.ITEMS_DROP.name, {}, socket, [item]);
        }
    }
}
exports.default = GoldRouter;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci9saWIvZ29sZC9nb2xkLnJvdXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7O0FBQ2IsMkVBQWtFO0FBS2xFLElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO0FBQ3pFLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBRWxFLGdCQUFnQyxTQUFRLDhCQUFrQjtJQUt6RCxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUc7UUFDZCxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7SUFDOUMsQ0FBQztJQUVELENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLE1BQWtCO1FBQzNELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsSUFBbUI7WUFDbkYsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RELEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwQyxNQUFNLENBQUM7WUFDWCxDQUFDO1lBQ0QsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUVqRSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FB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Q0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxFQUFDLElBQUksRUFBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3hFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNwRixDQUFDO0lBQ1IsQ0FBQztDQUNEO0FBL0RELDZCQStEQztBQUFBLENBQUMiLCJmaWxlIjoibGliL2dvbGQvZ29sZC5yb3V0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5pbXBvcnQgU29ja2V0aW9Sb3V0ZXJCYXNlIGZyb20gJy4uL3NvY2tldGlvL3NvY2tldGlvLnJvdXRlci5iYXNlJztcbmltcG9ydCBJdGVtc1JvdXRlciBmcm9tICcuLi9pdGVtcy9pdGVtcy5yb3V0ZXInO1xuaW1wb3J0IEdvbGRNaWRkbGV3YXJlIGZyb20gJy4vZ29sZC5taWRkbGV3YXJlJztcbmltcG9ydCBQYXJ0eVJvdXRlciBmcm9tICcuLi9wYXJ0eS9wYXJ0eS5yb3V0ZXInO1xuXG5sZXQgZHJvcHNDb25maWcgPSByZXF1aXJlKCcuLi8uLi8uLi9zZXJ2ZXIvbGliL2Ryb3BzL2Ryb3BzLmNvbmZpZy5qc29uJyk7XG5sZXQgY29uZmlnID0gcmVxdWlyZSgnLi4vLi4vLi4vc2VydmVyL2xpYi9nb2xkL2dvbGQuY29uZmlnLmpzb24nKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR29sZFJvdXRlciBleHRlbmRzIFNvY2tldGlvUm91dGVyQmFzZSB7XG5cdHByb3RlY3RlZCBtaWRkbGV3YXJlOiBHb2xkTWlkZGxld2FyZTtcbiAgICBwcm90ZWN0ZWQgaXRlbXNSb3V0ZXI6IEl0ZW1zUm91dGVyO1xuICAgIHByb3RlY3RlZCBwYXJ0eVJvdXRlcjogUGFydHlSb3V0ZXI7XG5cblx0aW5pdChmaWxlcywgYXBwKSB7XG5cdFx0c3VwZXIuaW5pdChmaWxlcywgYXBwKTtcblx0XHR0aGlzLml0ZW1zUm91dGVyID0gZmlsZXMucm91dGVycy5pdGVtcztcbiAgICAgICAgdGhpcy5wYXJ0eVJvdXRlciA9IGZpbGVzLnJvdXRlcnMucGFydHk7XG5cdH1cblxuXHRbY29uZmlnLlNFUlZFUl9HRVRTLklURU1fUElDSy5uYW1lXShkYXRhLCBzb2NrZXQ6IEdhbWVTb2NrZXQpIHtcblx0XHR0aGlzLmVtaXR0ZXIuZW1pdChkcm9wc0NvbmZpZy5TRVJWRVJfSU5ORVIuSVRFTV9QSUNLLm5hbWUsIGRhdGEsIHNvY2tldCwgKGl0ZW06IElURU1fSU5TVEFOQ0UpOiBhbnkgPT4ge1xuICAgICAgICAgICAgbGV0IGl0ZW1JbmZvID0gdGhpcy5pdGVtc1JvdXRlci5nZXRJdGVtSW5mbyhpdGVtLmtleSk7XG4gICAgICAgICAgICBpZiAoIXRoaXMubWlkZGxld2FyZS5pc0dvbGQoaXRlbUluZm8pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHBhcnR5U29ja2V0cyA9IHRoaXMucGFydHlSb3V0ZXIuZ2V0UGFydHlNZW1iZXJzSW5NYXAoc29ja2V0KTtcbiAgICAgICAgICAgIC8vIGRpdmlkZSB0aGUgZ29sZCBlcXVhbGx5IGFtb25nIHBhcnR5IG1lbWJlcnMgaW4gcm9vbVxuICAgICAgICAgICAgaXRlbS5zdGFjayA9IE1hdGguY2VpbChpdGVtLnN0YWNrIC8gcGFydHlTb2NrZXRzLmxlbmd0aCk7XG4gICAgICAgICAgICBmb3IgKGxldCBtZW1iZXJTb2NrZXQgb2YgcGFydHlTb2NrZXRzKSB7XG4gICAgICAgICAgICAgICAgdGhpc1tjb25maWcuU0VSVkVSX0lOTkVSLklURU1fQURELm5hbWVdKHtpdGVtfSwgbWVtYmVyU29ja2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHRcdH0pO1xuXHR9XG5cblx0W2NvbmZpZy5TRVJWRVJfSU5ORVIuSVRFTV9BREQubmFtZV0oZGF0YToge2l0ZW06IElURU1fSU5TVEFOQ0V9LCBzb2NrZXQ6IEdhbWVTb2NrZXQpIHtcbiAgICAgICAgbGV0IHtpdGVtfSA9IGRhdGE7XG5cbiAgICAgICAgaWYgKHRoaXMubWlkZGxld2FyZS5pc0dvbGQoaXRlbSkpIHtcbiAgICAgICAgICAgIHNvY2tldC5jaGFyYWN0ZXIuZ29sZCArPSAraXRlbS5zdGFjaztcbiAgICAgICAgICAgIHNvY2tldC5lbWl0KHRoaXMuQ0xJRU5UX0dFVFMuQ0hBTkdFX0dPTEQubmFtZSwge1xuICAgICAgICAgICAgICAgIGFtb3VudDogaXRlbS5zdGFja1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmxvZyhkYXRhLCBzb2NrZXQsIFwiR2FpbmluZyBpdGVtXCIpO1xuICAgICAgICB9XG5cdH1cblxuXHRbY29uZmlnLlNFUlZFUl9JTk5FUi5JVEVNX1JFTU9WRS5uYW1lXShkYXRhOiB7aXRlbTogSVRFTV9JTlNUQU5DRX0sIHNvY2tldDogR2FtZVNvY2tldCkge1xuXHRcdGxldCB7c3RhY2ssIGtleX0gPSBkYXRhLml0ZW07XG5cdFx0aWYgKHRoaXMubWlkZGxld2FyZS5pc0dvbGQoe2tleX0pKSB7XG4gICAgICAgICAgICBzb2NrZXQuY2hhcmFjdGVyLmdvbGQgLT0gc3RhY2s7XG4gICAgICAgICAgICBzb2NrZXQuZW1pdCh0aGlzLkNMSUVOVF9HRVRTLkNIQU5HRV9HT0xELm5hbWUsIHtcbiAgICAgICAgICAgICAgICBhbW91bnQ6IC1zdGFja1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmxvZyhkYXRhLCBzb2NrZXQsIFwiUmVtb3ZlIGl0ZW1cIik7XG5cdFx0fVxuXHR9XG5cblx0W2NvbmZpZy5TRVJWRVJfR0VUUy5EUk9QX0dPTEQubmFtZV0oZGF0YSwgc29ja2V0OiBHYW1lU29ja2V0KSB7XG4gICAgICAgIGxldCB7YW1vdW50fSA9IGRhdGE7XG4gICAgICAgIGlmICghKGFtb3VudCA+IDApKSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRFcnJvcihkYXRhLCBzb2NrZXQsIFwiTXVzdCBtZW50aW9uIHdoYXQgZ29sZCBhbW91bnQgdG8gdGhyb3dcIik7XG4gICAgICAgIH0gZWxzZSBpZiAoc29ja2V0LmNoYXJhY3Rlci5nb2xkID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRFcnJvcihkYXRhLCBzb2NrZXQsIFwiQ2hhcmFjdGVyIGRvZXMgbm90IGhhdmUgZ29sZCB0byB0aHJvdyFcIik7XG4gICAgICAgIH0gZWxzZSB7XG5cdFx0XHRsZXQgaXRlbSA9IHRoaXMuaXRlbXNSb3V0ZXIuZ2V0SXRlbUluc3RhbmNlKFwiZ29sZFwiKTtcbiAgICAgICAgICAgIGl0ZW0uc3RhY2sgPSBNYXRoLm1pbihhbW91bnQsIHNvY2tldC5jaGFyYWN0ZXIuZ29sZCk7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdChjb25maWcuU0VSVkVSX0lOTkVSLklURU1fUkVNT1ZFLm5hbWUsIHtpdGVtfSwgc29ja2V0KTtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KGRyb3BzQ29uZmlnLlNFUlZFUl9JTk5FUi5JVEVNU19EUk9QLm5hbWUsIHt9LCBzb2NrZXQsIFtpdGVtXSk7XG4gICAgICAgIH1cblx0fVxufTtcbiJdfQ==

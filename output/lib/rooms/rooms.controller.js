'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const master_controller_1 = require("../master/master.controller");
const _ = require("underscore");
let config = require('../../../server/lib/rooms/rooms.config.json');
class RoomsController extends master_controller_1.default {
    constructor() {
        super(...arguments);
        this.roomBitchKeys = new Map();
        this.roomBitches = new Map();
        this.roomBitchTimeouts = new Map();
    }
    socketJoinRoom(socket) {
        let room = socket.character.room;
        socket.join(room);
        let roomObject = socket.adapter.rooms[room];
        if (roomObject.length === 1) {
            this.setNewBitch(socket, room);
        }
        else {
            this.askForBitch(room);
        }
    }
    socketLeaveRoom(socket, room) {
        if (socket.bitch) {
            this.removeBitch(socket, room);
            let roomObject = socket.adapter.rooms[room];
            if (roomObject && roomObject.length) {
                let socketId = this.pickRandomSocket(Object.keys(roomObject.sockets));
                let newBitch = socket.map.get(socketId);
                this.setNewBitch(newBitch, room);
                if (roomObject.length > 1) {
                    this.askForBitch(room);
                }
            }
        }
    }
    removeBitch(socket, room) {
        console.log("stopping bitch: %s, room: %s", socket.character.name, room);
        socket.bitch = false;
        this.roomBitches.delete(room);
        socket.emit(config.CLIENT_GETS.BITCH_CHOOSE.name, {
            is_bitch: false
        });
    }
    askForBitch(room) {
        clearTimeout(this.roomBitchTimeouts.get(room));
        let sockets = this.io.sockets.adapter.rooms[room];
        if (sockets && sockets.length > 1) {
            let key = _.uniqueId("bitch-");
            this.roomBitchKeys.set(room, key);
            console.log("asking bitch please. key %s, room:", key, room);
            this.io.to(room).emit(config.CLIENT_GETS.BITCH_PLEASE.name, {
                key
            });
            let timeout = setTimeout(() => {
                this.askForBitch(room);
            }, config.BITCH_INTERVAL);
            this.roomBitchTimeouts.set(room, timeout);
        }
    }
    newBitchRequest(socket, key) {
        let room = socket.character.room;
        let roomKey = this.roomBitchKeys.get(room);
        if (key == roomKey) {
            let oldBitch = this.roomBitches.get(room);
            if (oldBitch === socket) {
                console.log("Same bitch in the room.");
            }
            else {
                this.removeBitch(oldBitch, room);
                this.setNewBitch(socket, room);
            }
        }
    }
    setNewBitch(socket, room) {
        console.log("new bitch: %s, room: %s", socket.character.name, room);
        socket.bitch = true;
        this.roomBitches.set(room, socket);
        socket.emit(config.CLIENT_GETS.BITCH_CHOOSE.name, {
            is_bitch: true
        });
    }
    pickRandomPortal(roomInfo) {
        return _.sample(roomInfo.portals);
    }
    pickRandomSocket(sockets) {
        return _.sample(sockets);
    }
    generateRoom(req, res, next) {
        this.services.generateRoom(req.body.scene)
            .then(d => {
            this.sendData(res, this.LOGS.GENERATE_ROOM, d);
        })
            .catch(e => {
            this.sendError(res, this.LOGS.MASTER_INTERNAL_ERROR, { e, fn: "generateRoom", file: "rooms.controller.js" });
        });
    }
    warmRoomsInfo() {
        this.services.getRooms()
            .catch(e => {
            console.error("Had an error getting rooms from the db!");
            throw e;
        });
    }
}
exports.default = RoomsController;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

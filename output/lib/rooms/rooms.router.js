'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const socketio_router_base_1 = require("../socketio/socketio.router.base");
const _ = require("underscore");
let config = require('../../../server/lib/rooms/rooms.config.json');
class RoomsRouter extends socketio_router_base_1.default {
    init(files, app) {
        this.services = files.services;
        super.init(files, app);
    }
    initRoutes(app) {
        app.post(this.ROUTES.GENERATE, this.middleware.validateHasSercetKey.bind(this.middleware), this.controller.generateRoom.bind(this.controller));
    }
    getRoomInfo(room) {
        return this.services.getRoomInfo(room);
    }
    [config.SERVER_GETS.ENTERED_ROOM.name](data, socket) {
        socket.broadcast.to(socket.character.room).emit(this.CLIENT_GETS.JOIN_ROOM.name, {
            character: this.middleware.getPublicCharInfo(socket.character)
        });
        let roomObject = socket.adapter.rooms[socket.character.room];
        if (roomObject) {
            _.each(roomObject.sockets, (value, socketId) => {
                socket.emit(this.CLIENT_GETS.JOIN_ROOM.name, {
                    character: this.middleware.getPublicCharInfo(socket.map.get(socketId).character)
                });
            });
        }
        this.controller.socketJoinRoom(socket);
    }
    [config.SERVER_GETS.ENTER_PORTAL.name](data, socket) {
        let roomInfo = this.services.getRoomInfo(socket.character.room);
        if (!roomInfo) {
            this.sendError(data, socket, "No room info available!");
        }
        else if (!roomInfo.portals[data.portal]) {
            this.sendError(data, socket, "No portal with such key in room: " + socket.character.room);
        }
        else {
            let portal = roomInfo.portals[data.portal];
            let targetRoomInfo = this.services.getRoomInfo(portal.targetRoom);
            if (!targetRoomInfo) {
                this.sendError(data, socket, "No target room info available!");
            }
            else if (!targetRoomInfo.portals[portal.targetPortal]) {
                this.sendError(data, socket, "No target portal in room!");
            }
            else {
                let targetPortal = targetRoomInfo.portals[portal.targetPortal];
                this.moveRoom(socket, portal.targetRoom, targetPortal);
            }
        }
    }
    [config.SERVER_INNER.MOVE_TO_TOWN.name](data, socket) {
        let roomInfo = this.services.getRoomInfo(socket.character.room);
        if (!roomInfo) {
            this.sendError(data, socket, "No room info available for " + socket.character.room);
        }
        else {
            let targetRoomInfo = this.services.getRoomInfo(roomInfo.town);
            if (!targetRoomInfo) {
                this.sendError(data, socket, "No target room info available for " + roomInfo.town);
            }
            else {
                let targetPortal = this.controller.pickRandomPortal(targetRoomInfo);
                this.moveRoom(socket, targetRoomInfo.name, targetPortal);
            }
        }
    }
    moveRoom(socket, room, targetPortal) {
        socket.leave(socket.character.room);
        this.emitter.emit(config.SERVER_INNER.LEFT_ROOM.name, {}, socket);
        socket.character.room = room;
        socket.character.position.x = targetPortal.x;
        socket.character.position.y = targetPortal.y;
        socket.emit(this.CLIENT_GETS.MOVE_ROOM.name, {
            room,
            character: socket.character
        });
    }
    [config.SERVER_GETS.DISCONNECT.name](data, socket) {
        this.emitter.emit(config.SERVER_INNER.LEFT_ROOM.name, {}, socket);
    }
    [config.SERVER_INNER.LEFT_ROOM.name](data, socket) {
        this.controller.socketLeaveRoom(socket, socket.character.room);
        socket.broadcast.to(socket.character.room).emit(this.CLIENT_GETS.LEFT_ROOM.name, {
            id: socket.character._id
        });
    }
    [config.SERVER_GETS.BITCH_PLEASE.name](data, socket) {
        let key = data.key;
        this.controller.newBitchRequest(socket, key);
    }
    onConnected(socket) {
        socket.emit(this.CLIENT_GETS.MOVE_ROOM.name, {
            room: socket.character.room,
            character: socket.character,
        });
    }
}
exports.default = RoomsRouter;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const master_services_1 = require("../master/master.services");
class RoomsServices extends master_services_1.default {
    constructor() {
        super(...arguments);
        this.roomsInfo = new Map();
    }
    generateRoom(scene) {
        console.log("Generating room from scene:", scene);
        let portals = {};
        (scene.Portals || []).forEach(portal => {
            let portalModel = {
                x: portal.PositionX,
                y: portal.PositionY,
                targetRoom: portal.TargetLevel,
                targetPortal: portal.targetPortal,
            };
            portals[portal.key] = portalModel;
        });
        let spawns = [];
        (scene.Spawners || []).forEach(spawner => {
            spawns.push({
                mobId: spawner.MonsterKey,
                cap: spawner.SpawnCap,
                interval: spawner.RespawnTime,
                x: spawner.PositionX,
                y: spawner.PositionY
            });
        });
        let room = {
            name: scene.name,
            town: scene.nearestTownScene,
            portals,
            spawns
        };
        let roomModel = new this.Model(room);
        let updatedDocPromise = this.Model.findOneAndUpdate({ name: room.name }, roomModel, { new: true, upsert: true });
        return updatedDocPromise;
    }
    getRooms() {
        return this.Model.find({}).lean()
            .then((docs) => {
            docs.forEach(doc => {
                this.roomsInfo.set(doc.name, doc);
            });
            console.log("got rooms");
            return this.roomsInfo;
        });
    }
    getRoomInfo(room) {
        return this.roomsInfo.get(room);
    }
}
exports.default = RoomsServices;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci9saWIvcm9vbXMvcm9vbXMuc2VydmljZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUNiLCtEQUF1RDtBQUV2RCxtQkFBbUMsU0FBUSx5QkFBYztJQUF6RDs7UUFDUyxjQUFTLEdBQTRCLElBQUksR0FBRyxFQUFFLENBQUM7SUFvRHhELENBQUM7SUFoRE8sWUFBWSxDQUFFLEtBQUs7UUFDekIsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsRCxJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDakIsQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNO1lBQ25DLElBQUksV0FBVyxHQUFpQjtnQkFDL0IsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxTQUFTO2dCQUNuQixDQUFDLEVBQUUsTUFBTSxDQUFDLFNBQVM7Z0JBQ25CLFVBQVUsRUFBRSxNQUFNLENBQUMsV0FBVztnQkFDOUIsWUFBWSxFQUFFLE1BQU0sQ0FBQyxZQUFZO2FBQ2pDLENBQUM7WUFDRixPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFdBQVcsQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksTUFBTSxHQUFrQixFQUFFLENBQUM7UUFDL0IsQ0FBQyxLQUFLLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPO1lBQ3JDLE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQ1gsS0FBSyxFQUFFLE9BQU8sQ0FBQyxVQUFVO2dCQUN6QixHQUFHLEVBQUUsT0FBTyxDQUFDLFFBQVE7Z0JBQ3JCLFFBQVEsRUFBRSxPQUFPLENBQUMsV0FBVztnQkFDN0IsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxTQUFTO2dCQUNwQixDQUFDLEVBQUUsT0FBTyxDQUFDLFNBQVM7YUFDcEIsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLElBQUksR0FBZTtZQUN0QixJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7WUFDaEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxnQkFBZ0I7WUFDNUIsT0FBTztZQUNQLE1BQU07U0FDTixDQUFBO1FBQ0QsSUFBSSxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXJDLElBQUksaUJBQWlCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFDLEVBQUUsU0FBUyxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztRQUM3RyxNQUFNLENBQU0saUJBQWlCLENBQUM7SUFDL0IsQ0FBQztJQUVNLFFBQVE7UUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFO2FBQy9CLElBQUksQ0FBQyxDQUFDLElBQWtCO1lBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRztnQkFDZixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ25DLENBQUMsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxXQUFXLENBQUMsSUFBWTtRQUM5QixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQztDQUNEO0FBckRELGdDQXFEQztBQUFBLENBQUMiLCJmaWxlIjoibGliL3Jvb21zL3Jvb21zLnNlcnZpY2VzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IE1hc3RlclNlcnZpY2VzIGZyb20gJy4uL21hc3Rlci9tYXN0ZXIuc2VydmljZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb29tc1NlcnZpY2VzIGV4dGVuZHMgTWFzdGVyU2VydmljZXMge1xuXHRwcml2YXRlIHJvb21zSW5mbzogTWFwPHN0cmluZywgUk9PTV9NT0RFTD4gPSBuZXcgTWFwKCk7XG5cbiAgICAvLyBIVFRQIGZ1bmN0aW9uc1xuXHQvLyA9PT09PT09PT09PT09PT09PVxuXHRwdWJsaWMgZ2VuZXJhdGVSb29tIChzY2VuZSk6IFByb21pc2U8YW55PiB7XG5cdFx0Y29uc29sZS5sb2coXCJHZW5lcmF0aW5nIHJvb20gZnJvbSBzY2VuZTpcIiwgc2NlbmUpO1xuXHRcdGxldCBwb3J0YWxzID0ge307XG5cdFx0KHNjZW5lLlBvcnRhbHMgfHwgW10pLmZvckVhY2gocG9ydGFsID0+IHtcblx0XHRcdGxldCBwb3J0YWxNb2RlbDogUE9SVEFMX01PREVMID0ge1xuXHRcdFx0XHR4OiBwb3J0YWwuUG9zaXRpb25YLFxuXHRcdFx0XHR5OiBwb3J0YWwuUG9zaXRpb25ZLFxuXHRcdFx0XHR0YXJnZXRSb29tOiBwb3J0YWwuVGFyZ2V0TGV2ZWwsXG5cdFx0XHRcdHRhcmdldFBvcnRhbDogcG9ydGFsLnRhcmdldFBvcnRhbCxcblx0XHRcdH07XG5cdFx0XHRwb3J0YWxzW3BvcnRhbC5rZXldID0gcG9ydGFsTW9kZWw7XG5cdFx0fSk7XG5cdFx0bGV0IHNwYXduczogU1BBV05fTU9ERUxbXSA9IFtdO1xuXHRcdChzY2VuZS5TcGF3bmVycyB8fCBbXSkuZm9yRWFjaChzcGF3bmVyID0+IHtcblx0XHRcdHNwYXducy5wdXNoKHtcblx0XHRcdFx0bW9iSWQ6IHNwYXduZXIuTW9uc3RlcktleSxcblx0XHRcdFx0Y2FwOiBzcGF3bmVyLlNwYXduQ2FwLFxuXHRcdFx0XHRpbnRlcnZhbDogc3Bhd25lci5SZXNwYXduVGltZSxcblx0XHRcdFx0eDogc3Bhd25lci5Qb3NpdGlvblgsXG5cdFx0XHRcdHk6IHNwYXduZXIuUG9zaXRpb25ZXG5cdFx0XHR9KTtcblx0XHR9KTtcblx0XHRsZXQgcm9vbTogUk9PTV9NT0RFTCA9IHtcblx0XHRcdG5hbWU6IHNjZW5lLm5hbWUsXG5cdFx0XHR0b3duOiBzY2VuZS5uZWFyZXN0VG93blNjZW5lLFxuXHRcdFx0cG9ydGFscyxcblx0XHRcdHNwYXduc1xuXHRcdH1cblx0XHRsZXQgcm9vbU1vZGVsID0gbmV3IHRoaXMuTW9kZWwocm9vbSk7XG5cdFx0XG5cdFx0bGV0IHVwZGF0ZWREb2NQcm9taXNlID0gdGhpcy5Nb2RlbC5maW5kT25lQW5kVXBkYXRlKHtuYW1lOiByb29tLm5hbWV9LCByb29tTW9kZWwsIHtuZXc6IHRydWUsIHVwc2VydDogdHJ1ZX0pO1xuXHRcdHJldHVybiA8YW55PnVwZGF0ZWREb2NQcm9taXNlO1xuXHR9XG5cblx0cHVibGljIGdldFJvb21zKCk6IFByb21pc2U8TWFwPHN0cmluZywgUk9PTV9NT0RFTD4+IHtcblx0XHRyZXR1cm4gdGhpcy5Nb2RlbC5maW5kKHt9KS5sZWFuKClcblx0XHRcdC50aGVuKChkb2NzOiBST09NX01PREVMW10pID0+IHtcblx0XHRcdFx0ZG9jcy5mb3JFYWNoKGRvYyA9PiB7XG5cdFx0XHRcdFx0dGhpcy5yb29tc0luZm8uc2V0KGRvYy5uYW1lLCBkb2MpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJnb3Qgcm9vbXNcIik7XG5cdFx0XHRcdHJldHVybiB0aGlzLnJvb21zSW5mbztcblx0XHRcdH0pO1xuXHR9XG5cblx0cHVibGljIGdldFJvb21JbmZvKHJvb206IHN0cmluZyk6IFJPT01fTU9ERUx8dW5kZWZpbmVkIHtcblx0XHRyZXR1cm4gdGhpcy5yb29tc0luZm8uZ2V0KHJvb20pO1xuXHR9XG59OyJdfQ==

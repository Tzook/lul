'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const master_controller_1 = require("../master/master.controller");
const _ = require("underscore");
let config = require('../../../server/lib/mobs/mobs.config.json');
let statsConfig = require('../../../server/lib/stats/stats.config.json');
class MobsController extends master_controller_1.default {
    constructor() {
        super(...arguments);
        this.roomsMobs = new Map();
        this.mobById = new Map();
    }
    hasRoom(room) {
        return this.roomsMobs.has(room);
    }
    hasMob(mobId, socket) {
        return this.mobById.has(this.services.getMobRoomId(socket.character.room, mobId));
    }
    startSpawningMobs(roomInfo) {
        let roomMobs = {
            spawns: []
        };
        roomInfo.spawns.forEach(spawnInfo => {
            let spawn = Object.assign({}, spawnInfo);
            let mobsInSpawn = new Map();
            this.spawnMobs(spawn, mobsInSpawn, roomInfo.name);
            spawn.mobs = mobsInSpawn;
            roomMobs.spawns.push(spawn);
        });
        this.roomsMobs.set(roomInfo.name, roomMobs);
    }
    spawnMobs(spawnInfo, mobsInSpawn, room) {
        let mobsToSpawn = spawnInfo.cap - mobsInSpawn.size;
        console.log("spawning mob");
        if (mobsToSpawn > 0) {
            let mob = this.spawnMob(spawnInfo, room);
            mob.spawn = spawnInfo;
            mobsInSpawn.set(mob.id, mob);
            if (mobsToSpawn > 1) {
                this.setRespawnTimer(mob, room);
            }
        }
    }
    spawnMob(spawnInfo, room) {
        let mob = this.services.getMobInfo(spawnInfo.mobId);
        mob.id = _.uniqueId("mob-");
        mob.x = spawnInfo.x;
        mob.y = spawnInfo.y;
        mob.dmgers = new Map();
        mob.threat = {
            top: "",
            map: new Map()
        };
        mob.dmged = 0;
        this.mobById.set(this.services.getMobRoomId(room, mob.id), mob);
        this.notifyAboutMob(mob, this.io.to(room));
        return mob;
    }
    notifyAboutMob(mob, to) {
        to.emit(config.CLIENT_GETS.MOB_SPAWN.name, {
            mob_id: mob.id,
            x: mob.x,
            y: mob.y,
            key: mob.mobId,
            hp: mob.hp,
        });
    }
    notifyAboutMobs(socket) {
        this.roomsMobs.get(socket.character.room).spawns.forEach(spawn => {
            spawn.mobs.forEach(mob => {
                this.notifyAboutMob(mob, socket);
            });
        });
    }
    moveMob(mobId, x, y, socket) {
        let mob = this.mobById.get(this.services.getMobRoomId(socket.character.room, mobId));
        mob.x = x;
        mob.y = y;
        socket.broadcast.to(socket.character.room).emit(config.CLIENT_GETS.MOB_MOVE.name, {
            mob_id: mobId,
            x,
            y,
        });
    }
    calculateDamage(socket, load) {
        let baseDmg = socket.character.stats.str + socket.bonusStats.str;
        let bonusDmg = load * baseDmg / 100;
        let maxDmg = baseDmg + bonusDmg;
        let minDmg = maxDmg / 2;
        let dmg = this.services.getDamageRange(minDmg, maxDmg);
        return dmg;
    }
    hurtMob(mobId, dmg, socket) {
        let mob = this.mobById.get(this.services.getMobRoomId(socket.character.room, mobId));
        let actualDmg = this.services.getDamageToHurt(mob.hp, dmg);
        mob.hp -= actualDmg;
        let charDmgSoFar = mob.dmgers.get(socket.character.name) || 0;
        mob.dmgers.set(socket.character.name, charDmgSoFar + actualDmg);
        mob.dmged += actualDmg;
        this.addThreat(mob, actualDmg, socket);
        return mob;
    }
    addThreat(mob, threat, socket) {
        if (socket.character.stats.primaryAbility === statsConfig.ABILITY_MELEE) {
            threat *= config.MEELE_THREAT;
        }
        threat += mob.threat.map.get(socket.character.name) || 0;
        mob.threat.map.set(socket.character.name, threat);
        if (!mob.threat.top || (mob.threat.top !== socket.character.name && threat > mob.threat.map.get(mob.threat.top))) {
            if (mob.threat.top) {
                socket.map.get(mob.threat.top).threats.delete(mob);
            }
            socket.threats.add(mob);
            mob.threat.top = socket.character.name;
            this.aggroChanged(mob, socket.character.room, socket.character._id);
        }
    }
    aggroChanged(mob, room, id) {
        console.log("Changing aggro", mob.id);
        this.io.to(room).emit(config.CLIENT_GETS.AGGRO.name, {
            id,
            mob_id: mob.id,
        });
    }
    removeThreat(mob, socket) {
        let maxSocket;
        let maxThreat = 0;
        for (let [char, threat] of mob.threat.map) {
            let charSocket = socket.map.get(char);
            if (charSocket && charSocket.character.room === socket.character.room && threat > maxThreat) {
                [maxSocket, maxThreat] = [charSocket, threat];
            }
        }
        mob.threat.top = maxSocket ? maxSocket.character.room : undefined;
        this.aggroChanged(mob, socket.character.room, maxSocket ? maxSocket.character._id : undefined);
    }
    getHurtCharDmg(mobId, socket) {
        let mob = this.mobById.get(this.services.getMobRoomId(socket.character.room, mobId));
        let dmg = this.services.getDamageRange(mob.minDmg, mob.maxDmg);
        return dmg;
    }
    despawnMob(mob, socket) {
        console.log("despawning mob", mob.id);
        this.io.to(socket.character.room).emit(config.CLIENT_GETS.MOB_DIE.name, {
            mob_id: mob.id,
        });
        if (mob.threat.top) {
            socket.map.get(mob.threat.top).threats.delete(mob);
        }
        mob.spawn.mobs.delete(mob.id);
        this.mobById.delete(this.services.getMobRoomId(socket.character.room, mob.id));
        if (mob.spawn.cap == mob.spawn.mobs.size + 1) {
            this.setRespawnTimer(mob, socket.character.room);
        }
    }
    setRespawnTimer(mob, room) {
        console.log("setting interval to respawn", mob.id);
        setTimeout(() => {
            this.spawnMobs(mob.spawn, mob.spawn.mobs, room);
        }, mob.spawn.interval * 1000);
    }
    generateMobs(req, res, next) {
        this.services.generateMobs(req.body.mobs)
            .then(d => {
            this.sendData(res, this.LOGS.GENERATE_MOB, d);
        })
            .catch(e => {
            this.sendError(res, this.LOGS.MASTER_INTERNAL_ERROR, { e, fn: "generateMobs", file: "mobs.controller.js" });
        });
    }
    warmMobsInfo() {
        this.services.getMobs()
            .catch(e => {
            console.error("Had an error getting mobs from the db!");
            throw e;
        });
    }
}
exports.default = MobsController;
;
//# sourceMappingURL=data:application/json;base64,
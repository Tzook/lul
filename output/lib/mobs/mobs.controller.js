'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const master_controller_1 = require("../master/master.controller");
const _ = require("underscore");
let CLIENT_GETS = require('../../../server/lib/mobs/mobs.config.json').CLIENT_GETS;
class MobsController extends master_controller_1.default {
    constructor() {
        super();
        this.roomsMobs = new Map();
        this.mobById = new Map();
    }
    setIo(io) {
        this.io = io;
    }
    // Socket functions
    // =================
    hasRoom(room) {
        return this.roomsMobs.has(room);
    }
    startSpawningMobs(roomInfo) {
        let roomMobs = {
            spawns: []
        };
        roomInfo.spawns.forEach(spawnInfo => {
            let spawn = Object.assign({}, spawnInfo);
            let mobsInSpawn = [];
            this.spawnMobs(spawn, mobsInSpawn, roomInfo.name);
            spawn.mobs = mobsInSpawn;
            roomMobs.spawns.push(spawn);
        });
        this.roomsMobs.set(roomInfo.name, roomMobs);
    }
    spawnMobs(spawnInfo, mobsInSpawn, room) {
        let mobsToSpawn = spawnInfo.cap - mobsInSpawn.length;
        for (let i = 0; i < mobsToSpawn; i++) {
            let mob = this.spawnMob(spawnInfo, room);
            mob.spawn = spawnInfo; // useful for when we delete the mob
            mobsInSpawn.push(mob);
        }
    }
    spawnMob(spawnInfo, room) {
        let mob = this.services.getMobInfo(spawnInfo.mobId);
        mob.id = _.uniqueId();
        mob.x = spawnInfo.x;
        mob.y = spawnInfo.y;
        this.mobById.set(mob.id, mob);
        this.notifyAboutMob(mob, this.io.to(room));
        return mob;
    }
    notifyAboutMob(mob, to) {
        to.emit(CLIENT_GETS.MOB_SPAWN, {
            id: mob.id,
            x: mob.x,
            y: mob.y,
            mob_key: mob.mobId,
            mob_hp: mob.hp,
        });
    }
    notifyAboutMobs(socket) {
        this.roomsMobs.get(socket.character.room).spawns.forEach(spawn => {
            spawn.mobs.forEach(mob => {
                this.notifyAboutMob(mob, socket);
            });
        });
    }
    // HTTP functions
    // =================
    generateMobs(req, res, next) {
        this.services.generateMobs(req.body.mobs)
            .then(d => {
            this.sendData(res, this.LOGS.GENERATE_MOB, d);
        })
            .catch(e => {
            this.sendError(res, this.LOGS.MASTER_INTERNAL_ERROR, { e, fn: "generateMobs", file: "mobs.controller.js" });
        });
    }
    warmMobsInfo() {
        this.services.getMobs()
            .catch(e => {
            console.error("Had an error getting mobs from the db!");
            throw e;
        });
    }
}
exports.default = MobsController;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9icy5jb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc2VydmVyL2xpYi9tb2JzL21vYnMuY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7O0FBQ2IsbUVBQTJEO0FBRTNELGdDQUFnQztBQUNoQyxJQUFJLFdBQVcsR0FBRyxPQUFPLENBQUMsMkNBQTJDLENBQUMsQ0FBQyxXQUFXLENBQUM7QUFFbkYsb0JBQW9DLFNBQVEsMkJBQWdCO0lBTTNEO1FBQ0MsS0FBSyxFQUFFLENBQUM7UUFMRCxjQUFTLEdBQTJCLElBQUksR0FBRyxFQUFFLENBQUM7UUFDOUMsWUFBTyxHQUE4QixJQUFJLEdBQUcsRUFBRSxDQUFDO0lBS3ZELENBQUM7SUFFTSxLQUFLLENBQUMsRUFBRTtRQUNkLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELG1CQUFtQjtJQUNuQixvQkFBb0I7SUFDYixPQUFPLENBQUMsSUFBWTtRQUMxQixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVNLGlCQUFpQixDQUFDLFFBQXFCO1FBQzdDLElBQUksUUFBUSxHQUFjO1lBQ3pCLE1BQU0sRUFBRSxFQUFFO1NBQ1YsQ0FBQztRQUNGLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVM7WUFDaEMsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFFekMsSUFBSSxXQUFXLEdBQW1CLEVBQUUsQ0FBQztZQUNyQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xELEtBQUssQ0FBQyxJQUFJLEdBQUcsV0FBVyxDQUFDO1lBQ3pCLFFBQVEsQ0FBQyxNQUFNLENBQUMs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
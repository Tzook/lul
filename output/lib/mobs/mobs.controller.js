'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const master_controller_1 = require("../master/master.controller");
const _ = require("underscore");
let CLIENT_GETS = require('../../../server/lib/mobs/mobs.config.json').CLIENT_GETS;
class MobsController extends master_controller_1.default {
    constructor() {
        super();
        this.roomsMobs = new Map();
        this.mobById = new Map();
    }
    setIo(io) {
        this.io = io;
    }
    // Socket functions
    // =================
    hasRoom(room) {
        return this.roomsMobs.has(room);
    }
    hasMob(id) {
        return this.mobById.has(id);
    }
    startSpawningMobs(roomInfo) {
        let roomMobs = {
            spawns: []
        };
        roomInfo.spawns.forEach(spawnInfo => {
            let spawn = Object.assign({}, spawnInfo);
            let mobsInSpawn = new Map();
            this.spawnMobs(spawn, mobsInSpawn, roomInfo.name);
            spawn.mobs = mobsInSpawn;
            roomMobs.spawns.push(spawn);
        });
        this.roomsMobs.set(roomInfo.name, roomMobs);
    }
    spawnMobs(spawnInfo, mobsInSpawn, room) {
        let mobsToSpawn = spawnInfo.cap - mobsInSpawn.size;
        console.log("spawning %d mobs", mobsToSpawn);
        for (let i = 0; i < mobsToSpawn; i++) {
            let mob = this.spawnMob(spawnInfo, room);
            mob.spawn = spawnInfo; // useful for when we delete the mob
            mobsInSpawn.set(mob.id, mob);
        }
    }
    spawnMob(spawnInfo, room) {
        let mob = this.services.getMobInfo(spawnInfo.mobId);
        mob.id = _.uniqueId();
        mob.x = spawnInfo.x;
        mob.y = spawnInfo.y;
        this.mobById.set(mob.id, mob);
        this.notifyAboutMob(mob, this.io.to(room));
        return mob;
    }
    notifyAboutMob(mob, to) {
        to.emit(CLIENT_GETS.MOB_SPAWN, {
            id: mob.id,
            x: mob.x,
            y: mob.y,
            key: mob.mobId,
            hp: mob.hp,
        });
    }
    notifyAboutMobs(socket) {
        this.roomsMobs.get(socket.character.room).spawns.forEach(spawn => {
            spawn.mobs.forEach(mob => {
                this.notifyAboutMob(mob, socket);
            });
        });
    }
    moveMob(id, x, y, socket) {
        let mob = this.mobById.get(id);
        mob.x = x;
        mob.y = y;
        socket.broadcast.to(socket.character.room).emit(CLIENT_GETS.MOB_MOVE, {
            mob_id: id,
            x,
            y,
        });
    }
    hurtMob(id, dmg) {
        let mob = this.mobById.get(id);
        mob.hp = Math.max(0, mob.hp - dmg);
        return mob;
    }
    hurtChar(id, socket) {
        let mob = this.mobById.get(id);
        let dmg = _.random(mob.minDmg, mob.maxDmg);
        socket.character.stats.hp.now = Math.max(0, socket.character.stats.hp.now - dmg);
        this.io.to(socket.character.room).emit(CLIENT_GETS.TAKE_DMG, {
            id: socket.character._id,
            dmg,
            hp: socket.character.stats.hp.now
        });
        console.log("Taking damage", socket.character.name, dmg, socket.character.stats.hp.now);
    }
    despawnMob(mob, room) {
        console.log("despawning mob", mob.id);
        this.io.to(room).emit(CLIENT_GETS.MOB_DIE, {
            mob_id: mob.id,
        });
        // remove mob references
        mob.spawn.mobs.delete(mob.id);
        this.mobById.delete(mob.id);
        if (mob.spawn.cap == mob.spawn.mobs.size + 1) {
            // if it's the first mob that we kill, set a timer to respawn
            console.log("setting interval to respawn", mob.id);
            setInterval(() => {
                this.spawnMobs(mob.spawn, mob.spawn.mobs, room);
            }, mob.spawn.interval * 1000);
        }
    }
    // HTTP functions
    // =================
    generateMobs(req, res, next) {
        this.services.generateMobs(req.body.mobs)
            .then(d => {
            this.sendData(res, this.LOGS.GENERATE_MOB, d);
        })
            .catch(e => {
            this.sendError(res, this.LOGS.MASTER_INTERNAL_ERROR, { e, fn: "generateMobs", file: "mobs.controller.js" });
        });
    }
    warmMobsInfo() {
        this.services.getMobs()
            .catch(e => {
            console.error("Had an error getting mobs from the db!");
            throw e;
        });
    }
}
exports.default = MobsController;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9icy5jb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc2VydmVyL2xpYi9tb2JzL21vYnMuY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7O0FBQ2IsbUVBQTJEO0FBRTNELGdDQUFnQztBQUNoQyxJQUFJLFdBQVcsR0FBRyxPQUFPLENBQUMsMkNBQTJDLENBQUMsQ0FBQyxXQUFXLENBQUM7QUFFbkYsb0JBQW9DLFNBQVEsMkJBQWdCO0lBTTNEO1FBQ0MsS0FBSyxFQUFFLENBQUM7UUFMRCxjQUFTLEdBQTJCLElBQUksR0FBRyxFQUFFLENBQUM7UUFDOUMsWUFBTyxHQUE4QixJQUFJLEdBQUcsRUFBRSxDQUFDO0lBS3ZELENBQUM7SUFFTSxLQUFLLENBQUMsRUFBRTtRQUNkLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELG1CQUFtQjtJQUNuQixvQkFBb0I7SUFDYixPQUFPLENBQUMsSUFBWTtRQUMxQixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxFQUFVO1FBQ3ZCLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRU0saUJBQWlCLENBQUMsUUFBcUI7UUFDN0MsSUFBSSxRQUFRLEdBQWM7WUFDekIsTUFBTSxFQUFFLEVBQUU7U0FDVixDQUFDO1FBQ0YsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUztZQUNoQyxJQUFJLEtBQUssR0FBbUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFFekQsSUFBSSxXQUFXLEdBQThCLElBQUksR0FBRyxFQUFFLENBQUM7WUFDdkQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFL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
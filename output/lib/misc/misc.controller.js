'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const master_controller_1 = require("../master/master.controller");
let itemsConfig = require('../../../server/lib/items/items.config.json');
let config = require('../../../server/lib/misc/misc.config.json');
class MiscController extends master_controller_1.default {
    init(files, app) {
        super.init(files, app);
        this.middleware = files.middleware;
    }
    pickMiscItem(socket, slots, item, itemInfo) {
        slots.forEach(slot => {
            if (this.middleware.hasItem(socket, slot)) {
                let slotItem = socket.character.items[slot];
                let stackToAdd = Math.min(item.stack, itemInfo.cap - slotItem.stack);
                slotItem.stack += stackToAdd;
                socket.character.items.set(slot, slotItem);
                item.stack -= stackToAdd;
                socket.emit(config.CLIENT_GETS.STACK_CHANGE.name, { slot, amount: slotItem.stack });
            }
            else {
                let itemClone = Object.assign({}, item);
                itemClone.stack = Math.min(item.stack, itemInfo.cap);
                socket.character.items.set(slot, itemClone);
                item.stack -= itemClone.stack;
                socket.emit(itemsConfig.CLIENT_GETS.ITEM_ADD.name, { slot, item: itemClone });
            }
        });
    }
}
exports.default = MiscController;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci9saWIvbWlzYy9taXNjLmNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUNiLG1FQUEyRDtBQUUzRCxJQUFJLFdBQVcsR0FBRyxPQUFPLENBQUMsNkNBQTZDLENBQUMsQ0FBQztBQUN6RSxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsMkNBQTJDLENBQUMsQ0FBQztBQUVsRSxvQkFBb0MsU0FBUSwyQkFBZ0I7SUFHM0QsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHO1FBQ2QsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO0lBQ3BDLENBQUM7SUFFUyxZQUFZLENBQUMsTUFBa0IsRUFBRSxLQUFlLEVBQUUsSUFBbUIsRUFBRSxRQUFvQjtRQUM5RixLQUFLLENBQUMsT0FBTyxDQUFDLElBQUk7WUFDZCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN4QyxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDNUMsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNyRSxRQUFRLENBQUMsS0FBSyxJQUFJLFVBQVUsQ0FBQztnQkFDN0IsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztnQkFDM0MsSUFBSSxDQUFDLEtBQUssSUFBSSxVQUFVLENBQUM7Z0JBQ3pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN4RixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osSUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQ3hDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDckQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztnQkFDNUMsSUFBSSxDQUFDLEtBQUssSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDO2dCQUM5QixNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztZQUNsRixDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUExQkQsaUNBMEJDO0FBQUEsQ0FBQyIsImZpbGUiOiJsaWIvbWlzYy9taXNjLmNvbnRyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5pbXBvcnQgTWFzdGVyQ29udHJvbGxlciBmcm9tICcuLi9tYXN0ZXIvbWFzdGVyLmNvbnRyb2xsZXInO1xuaW1wb3J0IE1pc2NNaWRkbGV3YXJlIGZyb20gXCIuL21pc2MubWlkZGxld2FyZVwiO1xubGV0IGl0ZW1zQ29uZmlnID0gcmVxdWlyZSgnLi4vLi4vLi4vc2VydmVyL2xpYi9pdGVtcy9pdGVtcy5jb25maWcuanNvbicpO1xubGV0IGNvbmZpZyA9IHJlcXVpcmUoJy4uLy4uLy4uL3NlcnZlci9saWIvbWlzYy9taXNjLmNvbmZpZy5qc29uJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1pc2NDb250cm9sbGVyIGV4dGVuZHMgTWFzdGVyQ29udHJvbGxlciB7XG4gICAgcHJvdGVjdGVkIG1pZGRsZXdhcmU6IE1pc2NNaWRkbGV3YXJlO1xuXG5cdGluaXQoZmlsZXMsIGFwcCkge1xuXHRcdHN1cGVyLmluaXQoZmlsZXMsIGFwcCk7XG5cdFx0dGhpcy5taWRkbGV3YXJlID0gZmlsZXMubWlkZGxld2FyZTtcblx0fVxuXG4gICAgcHVibGljIHBpY2tNaXNjSXRlbShzb2NrZXQ6IEdhbWVTb2NrZXQsIHNsb3RzOiBudW1iZXJbXSwgaXRlbTogSVRFTV9JTlNUQU5DRSwgaXRlbUluZm86IElURU1fTU9ERUwpIHtcbiAgICAgICAgc2xvdHMuZm9yRWFjaChzbG90ID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1pZGRsZXdhcmUuaGFzSXRlbShzb2NrZXQsIHNsb3QpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNsb3RJdGVtID0gc29ja2V0LmNoYXJhY3Rlci5pdGVtc1tzbG90XTtcbiAgICAgICAgICAgICAgICBsZXQgc3RhY2tUb0FkZCA9IE1hdGgubWluKGl0ZW0uc3RhY2ssIGl0ZW1JbmZvLmNhcCAtIHNsb3RJdGVtLnN0YWNrKTtcbiAgICAgICAgICAgICAgICBzbG90SXRlbS5zdGFjayArPSBzdGFja1RvQWRkO1xuICAgICAgICAgICAgICAgIHNvY2tldC5jaGFyYWN0ZXIuaXRlbXMuc2V0KHNsb3QsIHNsb3RJdGVtKTtcbiAgICAgICAgICAgICAgICBpdGVtLnN0YWNrIC09IHN0YWNrVG9BZGQ7XG4gICAgICAgICAgICAgICAgc29ja2V0LmVtaXQoY29uZmlnLkNMSUVOVF9HRVRTLlNUQUNLX0NIQU5HRS5uYW1lLCB7IHNsb3QsIGFtb3VudDogc2xvdEl0ZW0uc3RhY2sgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBpdGVtQ2xvbmUgPSBPYmplY3QuYXNzaWduKHt9LCBpdGVtKTtcbiAgICAgICAgICAgICAgICBpdGVtQ2xvbmUuc3RhY2sgPSBNYXRoLm1pbihpdGVtLnN0YWNrLCBpdGVtSW5mby5jYXApO1xuICAgICAgICAgICAgICAgIHNvY2tldC5jaGFyYWN0ZXIuaXRlbXMuc2V0KHNsb3QsIGl0ZW1DbG9uZSk7XG4gICAgICAgICAgICAgICAgaXRlbS5zdGFjayAtPSBpdGVtQ2xvbmUuc3RhY2s7XG4gICAgICAgICAgICAgICAgc29ja2V0LmVtaXQoaXRlbXNDb25maWcuQ0xJRU5UX0dFVFMuSVRFTV9BREQubmFtZSwgeyBzbG90LCBpdGVtOiBpdGVtQ2xvbmUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn07Il19

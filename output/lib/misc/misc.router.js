'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const socketio_router_base_1 = require("../socketio/socketio.router.base");
let dropsConfig = require('../../../server/lib/drops/drops.config.json');
let itemsConfig = require('../../../server/lib/items/items.config.json');
let config = require('../../../server/lib/misc/misc.config.json');
class MiscRouter extends socketio_router_base_1.default {
    init(files, app) {
        super.init(files, app);
        this.itemsRouter = files.routers.items;
    }
    [config.SERVER_GETS.ITEM_PICK.name](data, socket) {
        this.emitter.emit(dropsConfig.SERVER_INNER.ITEM_PICK.name, data, socket, (item) => {
            let itemInfo = this.itemsRouter.getItemInfo(item.key);
            if (!this.middleware.isMisc(itemInfo)) {
                return;
            }
            let slots = this.middleware.getStackSlots(socket, item, itemInfo);
            console.log("picking up item for slots", item, slots);
            if (slots.length === 0) {
                this.sendError(data, socket, itemsConfig.LOGS.INVENTORY_FULL.MSG, true, true);
            }
            else {
                this.controller.pickMiscItem(socket, slots, item, itemInfo);
                return true;
            }
        });
    }
    [config.SERVER_INNER.ITEM_ADD.name](data, socket) {
        let { slots, item } = data;
        let itemInfo = this.itemsRouter.getItemInfo(item.key);
        if (this.middleware.isMisc(itemInfo)) {
            this.controller.pickMiscItem(socket, slots, item, itemInfo);
        }
    }
    [config.SERVER_INNER.ITEM_REMOVE.name](data, socket) {
        let { stack, key } = data.item;
        let itemInfo = this.itemsRouter.getItemInfo(key);
        if (this.middleware.isMisc(itemInfo)) {
            for (let slot = 0; slot < socket.character.items.length; slot++) {
                let item = socket.character.items[slot];
                if (item.key === key) {
                    if (item.stack <= stack) {
                        stack -= item.stack;
                        this.itemsRouter.deleteItem(socket, slot);
                    }
                    else {
                        item.stack -= stack;
                        stack = 0;
                        socket.emit(config.CLIENT_GETS.STACK_CHANGE.name, { slot, amount: item.stack });
                    }
                    if (stack === 0) {
                        break;
                    }
                }
            }
        }
    }
    [config.SERVER_GETS.MISC_DROP.name](data, socket) {
    }
}
exports.default = MiscRouter;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

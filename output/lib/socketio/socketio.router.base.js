'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const master_router_1 = require("../master/master.router");
let config = require('../../../server/lib/socketio/socketio.config.json');
class SocketioRouterBase extends master_router_1.default {
    init(files, app) {
        this.io = app.socketio;
        super.init(files, app);
        this.CLIENT_GETS = files.config.CLIENT_GETS;
        this.SERVER_GETS = files.config.SERVER_GETS || [];
        this.SERVER_INNER = files.config.SERVER_INNER || [];
    }
    onConnected(socket) {
    }
    set eventEmitter(emitter) {
        this.emitter = emitter;
    }
    get connection() {
        return 'socketio';
    }
    log(data, socket, message) {
        console.info(message, socket.character.name, data);
    }
    sendError(data, socket, error, emit = true, display = false) {
        let event = "";
        try {
            event = (new Error()).stack.match(/at (\S+)/g)[1].slice(3).split('.')[1];
        }
        catch (e) { }
        console.error("Sending error to socket %s:", socket.character.name, error, data, event);
        emit && socket.emit(config.CLIENT_GETS.EVENT_ERROR.name, {
            error,
            data,
            event,
            display,
        });
    }
}
exports.default = SocketioRouterBase;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci9saWIvc29ja2V0aW8vc29ja2V0aW8ucm91dGVyLmJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUNiLDJEQUFtRDtBQUVuRCxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsbURBQW1ELENBQUMsQ0FBQztBQUUxRSx3QkFBd0MsU0FBUSx1QkFBWTtJQU8zRCxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUc7UUFDZCxJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7UUFDdkIsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztRQUM1QyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQztRQUNsRCxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxJQUFJLEVBQUUsQ0FBQztJQUNyRCxDQUFDO0lBRU0sV0FBVyxDQUFDLE1BQWtCO0lBRXJDLENBQUM7SUFFRCxJQUFJLFlBQVksQ0FBQyxPQUFPO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxJQUFJLFVBQVU7UUFDYixNQUFNLENBQUMsVUFBVSxDQUFDO0lBQ25CLENBQUM7SUFFWSxHQUFHLENBQUMsSUFBUyxFQUFFLE1BQWtCLEVBQUUsT0FBZTtRQUN4RCxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRU0sU0FBUyxDQUFDLElBQVMsRUFBRSxNQUFrQixFQUFFLEtBQWEsRUFBRSxJQUFJLEdBQUcsSUFBSSxFQUFFLE9BQU8sR0FBRyxLQUFLO1FBQzdGLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNmLElBQUksQ0FBQztZQUVKLEtBQUssR0FBRyxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUUsQ0FBQztRQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDO1FBQ2QsT0FBTyxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3hGLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRTtZQUN4RCxLQUFLO1lBQ0wsSUFBSTtZQUNKLEtBQUs7WUFDTCxPQUFPO1NBQ1AsQ0FBQyxDQUFDO0lBQ0osQ0FBQztDQUNEO0FBN0NELHFDQTZDQztBQUFBLENBQUMiLCJmaWxlIjoibGliL3NvY2tldGlvL3NvY2tldGlvLnJvdXRlci5iYXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IE1hc3RlclJvdXRlciBmcm9tICcuLi9tYXN0ZXIvbWFzdGVyLnJvdXRlcic7XG5pbXBvcnQgRW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpO1xubGV0IGNvbmZpZyA9IHJlcXVpcmUoJy4uLy4uLy4uL3NlcnZlci9saWIvc29ja2V0aW8vc29ja2V0aW8uY29uZmlnLmpzb24nKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU29ja2V0aW9Sb3V0ZXJCYXNlIGV4dGVuZHMgTWFzdGVyUm91dGVyIHtcblx0cHJvdGVjdGVkIGlvOiBTb2NrZXRJTy5OYW1lc3BhY2U7XG5cdHByb3RlY3RlZCBlbWl0dGVyOiBFbWl0dGVyLkV2ZW50RW1pdHRlcjtcblx0cHVibGljIENMSUVOVF9HRVRTO1xuXHRwdWJsaWMgU0VSVkVSX0dFVFM7XG5cdHB1YmxpYyBTRVJWRVJfSU5ORVI7XG5cblx0aW5pdChmaWxlcywgYXBwKSB7XG5cdFx0dGhpcy5pbyA9IGFwcC5zb2NrZXRpbztcblx0XHRzdXBlci5pbml0KGZpbGVzLCBhcHApO1xuXHRcdHRoaXMuQ0xJRU5UX0dFVFMgPSBmaWxlcy5jb25maWcuQ0xJRU5UX0dFVFM7XG5cdFx0dGhpcy5TRVJWRVJfR0VUUyA9IGZpbGVzLmNvbmZpZy5TRVJWRVJfR0VUUyB8fCBbXTtcblx0XHR0aGlzLlNFUlZFUl9JTk5FUiA9IGZpbGVzLmNvbmZpZy5TRVJWRVJfSU5ORVIgfHwgW107XG5cdH1cblxuXHRwdWJsaWMgb25Db25uZWN0ZWQoc29ja2V0OiBHYW1lU29ja2V0KSB7XG5cblx0fVxuXG5cdHNldCBldmVudEVtaXR0ZXIoZW1pdHRlcikge1xuXHRcdHRoaXMuZW1pdHRlciA9IGVtaXR0ZXI7XG5cdH1cblxuXHRnZXQgY29ubmVjdGlvbigpIHtcblx0XHRyZXR1cm4gJ3NvY2tldGlvJztcblx0fVxuXG4gICAgcHJvdGVjdGVkIGxvZyhkYXRhOiBhbnksIHNvY2tldDogR2FtZVNvY2tldCwgbWVzc2FnZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnNvbGUuaW5mbyhtZXNzYWdlLCBzb2NrZXQuY2hhcmFjdGVyLm5hbWUsIGRhdGEpO1xuICAgIH1cblxuXHRwcm90ZWN0ZWQgc2VuZEVycm9yKGRhdGE6IGFueSwgc29ja2V0OiBHYW1lU29ja2V0LCBlcnJvcjogc3RyaW5nLCBlbWl0ID0gdHJ1ZSwgZGlzcGxheSA9IGZhbHNlKSB7XG5cdFx0bGV0IGV2ZW50ID0gXCJcIjtcblx0XHR0cnkge1xuXHRcdFx0Ly8gZ3JhYiBldmVudCBmcm9tIHN0YWNrIHRyYWNlXG5cdFx0XHRldmVudCA9IChuZXcgRXJyb3IoKSkuc3RhY2subWF0Y2goL2F0IChcXFMrKS9nKVsxXS5zbGljZSgzKS5zcGxpdCgnLicpWzFdO1xuXHRcdH0gY2F0Y2ggKGUpIHt9XG5cdFx0Y29uc29sZS5lcnJvcihcIlNlbmRpbmcgZXJyb3IgdG8gc29ja2V0ICVzOlwiLCBzb2NrZXQuY2hhcmFjdGVyLm5hbWUsIGVycm9yLCBkYXRhLCBldmVudCk7XG5cdFx0ZW1pdCAmJiBzb2NrZXQuZW1pdChjb25maWcuQ0xJRU5UX0dFVFMuRVZFTlRfRVJST1IubmFtZSwge1xuXHRcdFx0ZXJyb3IsXG5cdFx0XHRkYXRhLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHRkaXNwbGF5LFxuXHRcdH0pO1xuXHR9XG59OyJdfQ==

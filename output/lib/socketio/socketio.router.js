'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const socketio_router_base_1 = require("./socketio.router.base");
const Emitter = require("events");
const Heroku = require("heroku-client");
require('./socketio.fixer');
let passportSocketIo = require('passport.socketio');
let config = require('../../../server/lib/socketio/socketio.config.json');
class SocketioRouter extends socketio_router_base_1.default {
    constructor() {
        super();
        this.routers = [this];
        this.map = new Map();
    }
    init(files, app) {
        super.init(files, app);
        this.services = files.services;
        this.mapRouters(files.routers);
        this.initDependencies(app.mongoStore);
        this.initListeners();
        this.restartServerEvent(app);
    }
    getConfig() {
        return this.services.getConfig();
    }
    mapRouters(routers) {
        for (let i in routers) {
            if (routers[i].connection === "socketio") {
                this.routers.push(routers[i]);
            }
        }
    }
    initDependencies(mongoStore) {
        this.io.use((socket, next) => {
            if (socket.request._query.unicorn) {
                socket.request._query.session_id = socket.request._query.unicorn.split(/s:|\./)[1];
            }
            next();
        });
        this.io.use(passportSocketIo.authorize({
            key: 'unicorn',
            secret: 'UnicornsAreAmazingB0ss',
            store: mongoStore,
            success: this.onAuthorizeSuccess.bind(this),
            fail: this.onAuthorizeFail.bind(this),
        }));
    }
    onAuthorizeSuccess(req, next) {
        for (let i = 0; i < req.user.characters.length; i++) {
            if (req.user.characters[i]._id.equals(req._query.id)) {
                req.character = req.user.characters[i];
                break;
            }
        }
        if (!req.character) {
            let errorMessage = 'no character param OR no such character in user, param was' + req._query.id;
            console.error(errorMessage);
            next(new Error(errorMessage));
        }
        else if (this.map.has(req.user._id.toString())) {
            let errorMessage = `Users character is already logged in: ${req._query.id}~`;
            console.error(errorMessage);
            next(new Error(errorMessage));
        }
        else {
            next();
        }
    }
    onAuthorizeFail(req, message, error, next) {
        let errorMessage = 'Error occured trying to connect to user: ' + message;
        console.error(errorMessage);
        next(new Error(errorMessage));
    }
    initListeners() {
        this.io.on(this.ROUTES.BEGIN_CONNECTION, (socket) => {
            if (!this.isProduction() && socket.request._query.test === 'true') {
                socket.test = true;
            }
            socket.user = socket.client.request.user;
            socket.character = socket.client.request.character;
            if (this.map.has(socket.user._id.toString())) {
                socket.disconnect();
                return;
            }
            socket.throttles = new Map();
            this.map.set(socket.user._id.toString(), socket);
            this.map.set(socket.character.name, socket);
            this.map.set(socket.id, socket);
            let emitter = new Emitter.EventEmitter();
            for (let j in this.routers) {
                let router = this.routers[j];
                router.eventEmitter = emitter;
                this.listenToEvents(router, router.SERVER_GETS, [socket, emitter], config.EVENTS_THROTTLE);
                this.listenToEvents(router, router.SERVER_INNER, [emitter], 0);
            }
            console.log('connected', socket.character.name);
            socket.map = this.map;
            for (let j in this.routers) {
                let router = this.routers[j];
                router.onConnected(socket);
            }
        });
    }
    listenToEvents(router, events, listeners, defaultThrottle) {
        for (let i in events) {
            let event = events[i];
            let routerFn = router[event.name].bind(router);
            for (let j in listeners) {
                listeners[j].on(event.name, (...args) => {
                    let socket = args[1];
                    if (this.fitThrottle(socket, event, defaultThrottle, routerFn) &&
                        this.fitBitch(socket, event) &&
                        this.fitAlive(socket, event)) {
                        event.log && this.log(args[0], socket, event.name);
                        routerFn.apply(router, args);
                    }
                });
            }
        }
    }
    fitThrottle(socket, event, defaultThrottle, routerFn) {
        let throttle = event.throttle >= 0 ? event.throttle : defaultThrottle;
        if (throttle && !socket.test) {
            let lastTime = socket.throttles.get(routerFn) || 0;
            let now = Date.now();
            let time = now - lastTime;
            if (time < throttle) {
                console.error('Throttling event!', event.name);
                return false;
            }
            socket.throttles.set(routerFn, now);
        }
        return true;
    }
    fitBitch(socket, event) {
        if (event.bitch !== undefined) {
            if (event.bitch !== socket.bitch) {
                console.error('Not bitch!', event.name);
                return false;
            }
        }
        return true;
    }
    fitAlive(socket, event) {
        if (event.alive !== undefined) {
            if (event.alive !== socket.alive) {
                console.error('Not alive!', event.name);
                return false;
            }
        }
        return true;
    }
    [config.SERVER_GETS.DISCONNECT.name](data, socket) {
        if (!this.map.has(socket.id)) {
            return;
        }
        this.log({}, socket, "Disconnected");
        if (!socket.test) {
            socket.user.save(e => {
                if (e) {
                    console.error("Saving user error", e);
                }
            });
        }
        this.map.delete(socket.user._id.toString());
        this.map.delete(socket.character.name);
        this.map.delete(socket.id);
    }
    restartServerEvent(app) {
        let token = process.env.herokuAuth ? process.env.herokuAuth : require('../../../config/.env.json').herokuAuth;
        let heroku = new Heroku({ token });
        app.post(this.ROUTES.RESTART, this.middleware.validateHasSercetKey.bind(this.middleware), (req, res) => {
            heroku.delete('/apps/lul/dynos')
                .then(apps => {
                console.log("Restarting dynos");
                res.send({ data: 'Restarting server.' });
            })
                .catch(e => {
                console.error("Had an error restarting lul:", e);
            });
        });
    }
    isProduction() {
        return process.env.NODE_ENV === "production";
    }
}
exports.default = SocketioRouter;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const socketio_router_base_1 = require("./socketio.router.base");
const Emitter = require("events");
const Heroku = require("heroku-client");
require('./socketio.fixer');
let passportSocketIo = require('passport.socketio');
let SERVER_GETS = require('../../../server/lib/socketio/socketio.config.json').SERVER_GETS;
class SocketioRouter extends socketio_router_base_1.default {
    constructor() {
        super();
        this.routers = [this];
        this.map = new Map();
    }
    init(files, app) {
        super.init(files, app);
        this.mapRouters(files.routers);
        this.initDependencies(app.mongoStore);
        this.initListeners();
        this.restartServerEvent(app);
    }
    mapRouters(routers) {
        for (let i in routers) {
            if (routers[i].connection === "socketio") {
                this.routers.push(routers[i]);
            }
        }
    }
    initDependencies(mongoStore) {
        this.io.use((socket, next) => {
            if (socket.request._query.unicorn) {
                socket.request._query.session_id = socket.request._query.unicorn.split(/s:|\./)[1];
            }
            next();
        });
        this.io.use(passportSocketIo.authorize({
            key: 'unicorn',
            secret: 'UnicornsAreAmazingB0ss',
            store: mongoStore,
            success: this.onAuthorizeSuccess.bind(this),
            fail: this.onAuthorizeFail.bind(this),
        }));
    }
    onAuthorizeSuccess(req, next) {
        for (let i = 0; i < req.user.characters.length; i++) {
            if (req.user.characters[i]._id.equals(req._query.id)) {
                req.character = req.user.characters[i];
                break;
            }
        }
        if (!req.character) {
            let errorMessage = 'no character param OR no such character in user, param was' + req._query.id;
            console.error(errorMessage);
            next(new Error(errorMessage));
        }
        else if (this.map.has(req.user._id.toString())) {
            let errorMessage = `Users character is already logged in: ${req._query.id}~`;
            console.error(errorMessage);
            next(new Error(errorMessage));
        }
        else {
            next();
        }
    }
    onAuthorizeFail(req, message, error, next) {
        let errorMessage = 'Error occured trying to connect to user: ' + message;
        console.error(errorMessage);
        next(new Error(errorMessage));
    }
    initListeners() {
        this.io.on(this.ROUTES.BEGIN_CONNECTION, (socket) => {
            if (!this.isProduction() && socket.request._query.test === 'true') {
                socket.test = true;
            }
            socket.user = socket.client.request.user;
            socket.character = socket.client.request.character;
            if (this.map.has(socket.user._id.toString())) {
                socket.disconnect();
                return;
            }
            this.map.set(socket.user._id.toString(), socket);
            this.map.set(socket.character.name, socket);
            this.map.set(socket.id, socket);
            let emitter = new Emitter.EventEmitter();
            for (let j in this.routers) {
                let router = this.routers[j];
                router.eventEmitter = emitter;
                this.listenToEvents(router, router.SERVER_GETS, [socket, emitter]);
                this.listenToEvents(router, router.SERVER_INNER, [emitter]);
            }
            console.log('connected', socket.character.name);
            socket.map = this.map;
            for (let j in this.routers) {
                let router = this.routers[j];
                router.onConnected(socket);
            }
        });
    }
    listenToEvents(router, events, listeners) {
        for (let i in events) {
            let event = events[i];
            let routerFn = router[event.name].bind(router);
            for (let j in listeners) {
                listeners[j].on(event.name, routerFn);
            }
        }
    }
    [SERVER_GETS.DISCONNECT.name](data, socket) {
        if (!this.map.has(socket.id)) {
            return;
        }
        console.log('disconnected', socket.character.name);
        if (!socket.test) {
            socket.user.save(e => {
                if (e) {
                    console.error(e);
                }
            });
        }
        this.map.delete(socket.user._id.toString());
        this.map.delete(socket.character.name);
        this.map.delete(socket.id);
    }
    restartServerEvent(app) {
        let token = process.env.herokuAuth ? process.env.herokuAuth : require('../../../config/.env.json').herokuAuth;
        let heroku = new Heroku({ token });
        app.post(this.ROUTES.RESTART, this.middleware.validateHasSercetKey.bind(this.middleware), (req, res) => {
            heroku.delete('/apps/lul/dynos')
                .then(apps => {
                console.log("Restarting dynos");
                res.send({ data: 'Restarting server.' });
            })
                .catch(e => {
                console.error("Had an error restarting lul:", e);
            });
        });
    }
    isProduction() {
        return process.env.NODE_ENV === "production";
    }
}
exports.default = SocketioRouter;
;
//# sourceMappingURL=data:application/json;base64,
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const Emitter = require("events");
const mongoose = require("mongoose");
let emitter = new Emitter.EventEmitter();
class MasterModel {
    constructor() {
        this.mongoose = mongoose;
        this.hasId = true;
        this.strict = true;
        this.minimize = false;
    }
    init(files, app) {
    }
    createModel() {
        return Promise.resolve();
    }
    setModel(name) {
        try {
            this.model = this.mongoose.model(name);
        }
        catch (e) {
            this.model = this.createNewModel(name, this.schema);
        }
    }
    createNewModel(name, schema, params = {}) {
        return this.mongoose.model(name, new this.mongoose.Schema(schema, Object.assign({ _id: this.hasId, minimize: this.minimize, strict: this.strict }, params)));
    }
    getModel(name) {
        return name ? this.mongoose.model(name) : this.model;
    }
    get priority() {
        return 1;
    }
    addToSchema(model, data) {
        emitter.emit(model + "Schema", data);
    }
    listenForSchemaAddition(model) {
        emitter.on(model + "Schema", this.addModelToSchema.bind(this));
    }
    removeListen(model) {
        emitter.removeAllListeners(model + "Schema");
    }
    addModelToSchema(data) {
        for (let i in data) {
            this.schema[i] = data[i];
        }
    }
    listenForFieldAddition(model, field, data) {
        emitter.on(model + "Field", this.addFieldToModel.bind(this, field, data));
    }
    addFields(obj, reqBody) {
        emitter.emit(this.model.modelName + "Field", obj, reqBody);
    }
    addFieldToModel(field, data, obj, reqBody) {
        data = typeof data === "function" ? data() : data;
        obj[field] = data;
    }
}
exports.default = MasterModel;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci9saWIvbWFzdGVyL21hc3Rlci5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7O0FBQ2Isa0NBQW1DO0FBQ25DLHFDQUFxQztBQUNyQyxJQUFJLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUV6QztJQVFJO1FBQ0ksSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRztJQUVmLENBQUM7SUFFRCxXQUFXO1FBQ1AsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsUUFBUSxDQUFDLElBQUk7UUFDVCxJQUFJLENBQUM7WUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNDLENBQUM7UUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1QsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEQsQ0FBQztJQUNMLENBQUM7SUFFUyxjQUFjLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsRUFBRTtRQUM5QyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvSixDQUFDO0lBRUQsUUFBUSxDQUFDLElBQUs7UUFDVixNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDekQsQ0FBQztJQUVELElBQUksUUFBUTtRQUNSLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDYixDQUFDO0lBRVMsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJO1FBQzdCLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRVMsdUJBQXVCLENBQUMsS0FBSztRQUNuQyxPQUFPLENBQUMsRUFBRSxDQUFDLEtBQUssR0FBRyxRQUFRLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRCxZQUFZLENBQUMsS0FBSztRQUNkLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVPLGdCQUFnQixDQUFDLElBQUk7UUFDekIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNqQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QixDQUFDO0lBQ0wsQ0FBQztJQUVTLHNCQUFzQixDQUFDLEtBQWEsRUFBRSxLQUFhLEVBQUUsSUFBSztRQUNoRSxPQUFPLENBQUMsRUFBRSxDQUFDLEtBQUssR0FBRyxPQUFPLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFRCxTQUFTLENBQUMsR0FBRyxFQUFFLE9BQU87UUFDbEIsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxPQUFPLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFUyxlQUFlLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsT0FBTztRQUMvQyxJQUFJLEdBQUcsT0FBTyxJQUFJLEtBQUssVUFBVSxHQUFHLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQztRQUNsRCxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQ3RCLENBQUM7Q0FDSjtBQXpFRCw4QkF5RUM7QUFBQSxDQUFDIiwiZmlsZSI6ImxpYi9tYXN0ZXIvbWFzdGVyLm1vZGVsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKTtcbmltcG9ydCAqIGFzIG1vbmdvb3NlIGZyb20gXCJtb25nb29zZVwiO1xubGV0IGVtaXR0ZXIgPSBuZXcgRW1pdHRlci5FdmVudEVtaXR0ZXIoKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFzdGVyTW9kZWwge1xuICAgIHByb3RlY3RlZCBtb25nb29zZTogdHlwZW9mIG1vbmdvb3NlO1xuICAgIHByb3RlY3RlZCBtb2RlbDtcbiAgICBwcm90ZWN0ZWQgc2NoZW1hO1xuICAgIHByb3RlY3RlZCBoYXNJZDogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgc3RyaWN0OiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBtaW5pbWl6ZTogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm1vbmdvb3NlID0gbW9uZ29vc2U7XG4gICAgICAgIHRoaXMuaGFzSWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnN0cmljdCA9IHRydWU7XG4gICAgICAgIHRoaXMubWluaW1pemUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpbml0KGZpbGVzLCBhcHApIHtcblxuICAgIH1cblxuICAgIGNyZWF0ZU1vZGVsKCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgc2V0TW9kZWwobmFtZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5tb2RlbCA9IHRoaXMubW9uZ29vc2UubW9kZWwobmFtZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMubW9kZWwgPSB0aGlzLmNyZWF0ZU5ld01vZGVsKG5hbWUsIHRoaXMuc2NoZW1hKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBjcmVhdGVOZXdNb2RlbChuYW1lLCBzY2hlbWEsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vbmdvb3NlLm1vZGVsKG5hbWUsIG5ldyB0aGlzLm1vbmdvb3NlLlNjaGVtYShzY2hlbWEsIE9iamVjdC5hc3NpZ24oe19pZDogdGhpcy5oYXNJZCwgbWluaW1pemU6IHRoaXMubWluaW1pemUsIHN0cmljdDogdGhpcy5zdHJpY3R9LCBwYXJhbXMpKSk7XG4gICAgfVxuXG4gICAgZ2V0TW9kZWwobmFtZT8pIHtcbiAgICAgICAgcmV0dXJuIG5hbWUgPyB0aGlzLm1vbmdvb3NlLm1vZGVsKG5hbWUpIDogdGhpcy5tb2RlbDtcbiAgICB9XG5cbiAgICBnZXQgcHJpb3JpdHkoKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBhZGRUb1NjaGVtYShtb2RlbCwgZGF0YSkge1xuICAgICAgICBlbWl0dGVyLmVtaXQobW9kZWwgKyBcIlNjaGVtYVwiLCBkYXRhKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgbGlzdGVuRm9yU2NoZW1hQWRkaXRpb24obW9kZWwpIHtcbiAgICAgICAgZW1pdHRlci5vbihtb2RlbCArIFwiU2NoZW1hXCIsIHRoaXMuYWRkTW9kZWxUb1NjaGVtYS5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICByZW1vdmVMaXN0ZW4obW9kZWwpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVBbGxMaXN0ZW5lcnMobW9kZWwgKyBcIlNjaGVtYVwiKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZE1vZGVsVG9TY2hlbWEoZGF0YSkge1xuICAgICAgICBmb3IgKGxldCBpIGluIGRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuc2NoZW1hW2ldID0gZGF0YVtpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBsaXN0ZW5Gb3JGaWVsZEFkZGl0aW9uKG1vZGVsOiBzdHJpbmcsIGZpZWxkOiBzdHJpbmcsIGRhdGE/KSB7XG4gICAgICAgIGVtaXR0ZXIub24obW9kZWwgKyBcIkZpZWxkXCIsIHRoaXMuYWRkRmllbGRUb01vZGVsLmJpbmQodGhpcywgZmllbGQsIGRhdGEpKTtcbiAgICB9XG5cbiAgICBhZGRGaWVsZHMob2JqLCByZXFCb2R5KSB7XG4gICAgICAgIGVtaXR0ZXIuZW1pdCh0aGlzLm1vZGVsLm1vZGVsTmFtZSArIFwiRmllbGRcIiwgb2JqLCByZXFCb2R5KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYWRkRmllbGRUb01vZGVsKGZpZWxkLCBkYXRhLCBvYmosIHJlcUJvZHkpIHtcbiAgICAgICAgZGF0YSA9IHR5cGVvZiBkYXRhID09PSBcImZ1bmN0aW9uXCIgPyBkYXRhKCkgOiBkYXRhO1xuICAgICAgICBvYmpbZmllbGRdID0gZGF0YTtcbiAgICB9XG59OyJdfQ==

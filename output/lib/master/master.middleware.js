'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const master_response_1 = require("./master.response");
class MasterMiddleware extends master_response_1.default {
    validateParams(req, res, next, params) {
        let promises = [];
        for (let i in params) {
            promises.push(this.services.isNotEmpty(req.body[params[i].param], { error: this.LOGS.MASTER_INVALID_PARAM, params: { param: params[i].param } }));
            promises.push(this.services.inArray(typeof req.body[params[i].param], params[i].isType, this.LOGS.MASTER_INVALID_PARAM, params[i].param));
            params[i].callback && promises.push(params[i].callback.apply(this.services, params[i].args));
        }
        return Promise.all(promises)
            .then(d => {
            next();
        })
            .catch(err => {
            this.sendError(res, err.error, err.params);
        });
    }
    isLoggedIn(req, res, next) {
        if (req.user) {
            next();
        }
        else {
            this.sendError(res, this.LOGS.MASTER_NOT_LOGGED_IN);
        }
    }
    validateHasSercetKey(req, res, next) {
        let pass = process.env.secretKey ? process.env.secretKey : require('../../../config/.env.json').secretKey;
        if (pass && req.body.pass === pass) {
            next();
        }
        else {
            this.sendError(res, this.LOGS.MASTER_INVALID_PARAM_TYPE, { param: 'pass' });
        }
    }
}
exports.default = MasterMiddleware;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci9saWIvbWFzdGVyL21hc3Rlci5taWRkbGV3YXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7QUFDYix1REFBeUM7QUFFekMsc0JBQXNDLFNBQVEseUJBQVE7SUFFM0MsY0FBYyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU07UUFDOUMsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDdEIsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLE1BQU0sRUFBRSxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUksUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUMxSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM5RixDQUFDO1FBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDO2FBQzNCLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxFQUFFLENBQUM7UUFDUixDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsR0FBRztZQUNULElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELFVBQVUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUk7UUFFeEIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDZCxJQUFJLEVBQUUsQ0FBQztRQUNSLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNQLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUNyRCxDQUFDO0lBQ0YsQ0FBQztJQUVNLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSTtRQUN6QyxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFDMUcsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDcEMsSUFBSSxFQUFFLENBQUM7UUFDUixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDUCxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLHlCQUF5QixFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUE7UUFDNUUsQ0FBQztJQUNGLENBQUM7Q0FDRDtBQW5DRCxtQ0FtQ0M7QUFBQSxDQUFDIiwiZmlsZSI6ImxpYi9tYXN0ZXIvbWFzdGVyLm1pZGRsZXdhcmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5pbXBvcnQgUmVzcG9uc2UgZnJvbSAnLi9tYXN0ZXIucmVzcG9uc2UnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXN0ZXJNaWRkbGV3YXJlIGV4dGVuZHMgUmVzcG9uc2Uge1xuXG5cdHByb3RlY3RlZCB2YWxpZGF0ZVBhcmFtcyhyZXEsIHJlcywgbmV4dCwgcGFyYW1zKSB7XG5cdFx0bGV0IHByb21pc2VzID0gW107XG5cdFx0Zm9yIChsZXQgaSBpbiBwYXJhbXMpIHtcblx0XHRcdHByb21pc2VzLnB1c2godGhpcy5zZXJ2aWNlcy5pc05vdEVtcHR5KHJlcS5ib2R5W3BhcmFtc1tpXS5wYXJhbV0sIHtlcnJvcjogdGhpcy5MT0dTLk1BU1RFUl9JTlZBTElEX1BBUkFNLCBwYXJhbXM6IHtwYXJhbTogcGFyYW1zW2ldLnBhcmFtfX0pKTtcblx0XHRcdHByb21pc2VzLnB1c2godGhpcy5zZXJ2aWNlcy5pbkFycmF5KHR5cGVvZiByZXEuYm9keVtwYXJhbXNbaV0ucGFyYW1dLCBwYXJhbXNbaV0uaXNUeXBlLCB0aGlzLkxPR1MuTUFTVEVSX0lOVkFMSURfUEFSQU0sIHBhcmFtc1tpXS5wYXJhbSkpO1xuXHRcdFx0cGFyYW1zW2ldLmNhbGxiYWNrICYmIHByb21pc2VzLnB1c2gocGFyYW1zW2ldLmNhbGxiYWNrLmFwcGx5KHRoaXMuc2VydmljZXMsIHBhcmFtc1tpXS5hcmdzKSk7XG5cdFx0fVxuXHRcdHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcylcblx0XHQudGhlbihkID0+IHtcblx0XHRcdG5leHQoKTtcblx0XHR9KVxuXHRcdC5jYXRjaChlcnIgPT4ge1xuXHRcdFx0dGhpcy5zZW5kRXJyb3IocmVzLCBlcnIuZXJyb3IsIGVyci5wYXJhbXMpO1xuXHRcdH0pO1xuXHR9XG5cblx0aXNMb2dnZWRJbihyZXEsIHJlcywgbmV4dCkge1xuXHRcdC8vIGlmIHVzZXIgaXMgYXV0aGVudGljYXRlZCBpbiB0aGUgc2Vzc2lvbiwgY2Fycnkgb25cblx0XHRpZiAocmVxLnVzZXIpIHtcblx0XHRcdG5leHQoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5zZW5kRXJyb3IocmVzLCB0aGlzLkxPR1MuTUFTVEVSX05PVF9MT0dHRURfSU4pO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyB2YWxpZGF0ZUhhc1NlcmNldEtleShyZXEsIHJlcywgbmV4dCkge1xuXHRcdGxldCBwYXNzID0gcHJvY2Vzcy5lbnYuc2VjcmV0S2V5ID8gcHJvY2Vzcy5lbnYuc2VjcmV0S2V5IDogcmVxdWlyZSgnLi4vLi4vLi4vY29uZmlnLy5lbnYuanNvbicpLnNlY3JldEtleTtcblx0XHRpZiAocGFzcyAmJiByZXEuYm9keS5wYXNzID09PSBwYXNzKSB7XG5cdFx0XHRuZXh0KCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuc2VuZEVycm9yKHJlcywgdGhpcy5MT0dTLk1BU1RFUl9JTlZBTElEX1BBUkFNX1RZUEUsIHsgcGFyYW06ICdwYXNzJyB9KVxuXHRcdH1cblx0fVxufTsiXX0=

Object.defineProperty(exports, "__esModule", { value: true });
const Q = require("q");
class MasterServices {
    constructor() {
        this.Q = Q;
    }
    init(files, app) {
        this.model = files.model;
        this.mongoose = files.model.mongoose;
    }
    setModel(Model) {
        this.Model = Model;
    }
    promiseByCondition(cond, d, e) {
        return cond ? Promise.resolve(d) : Promise.reject(e);
    }
    isNotEmpty(d, e) {
        return this.promiseByCondition(d, d, e);
    }
    isEmpty(d, e) {
        return this.promiseByCondition(!d, d, e);
    }
    checkEquals(item1, item2, d, e) {
        return this.promiseByCondition(item1 === item2, d, e);
    }
    replaceTokens(msg, tokens) {
        for (let token in tokens) {
            msg = msg.replace(`{${token}}`, tokens[token]);
        }
        return Promise.resolve(msg);
    }
    inRange(item, start, end, error, param) {
        return this.promiseByCondition(item >= start && item <= end, [], { error, params: { param } });
    }
    inArray(needle, hay, error, param) {
        return this.promiseByCondition(hay.indexOf(needle) !== -1, [], { error, params: { param } });
    }
    invalidatesRegex(item, pattern, error, param) {
        return this.promiseByCondition(!pattern.test(item), [], { error, params: { param } });
    }
}
exports.default = MasterServices;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci9saWIvbWFzdGVyL21hc3Rlci5zZXJ2aWNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsdUJBQXVCO0FBR3ZCO0lBTUk7UUFDSSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNmLENBQUM7SUFFSixJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUc7UUFDUixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztJQUN0QyxDQUFDO0lBRUUsUUFBUSxDQUFDLEtBQUs7UUFDaEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVPLGtCQUFrQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUNqQyxNQUFNLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ1gsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDUixNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsV0FBVyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDMUIsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEtBQUssS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsYUFBYSxDQUFDLEdBQUcsRUFBRSxNQUFNO1FBQ3JCLEdBQUcsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDdkIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLEdBQUcsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNuRCxDQUFDO1FBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSztRQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUMsS0FBSyxFQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQy9GLENBQUM7SUFFRCxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSztRQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFDLEtBQUssRUFBQyxFQUFDLENBQUMsQ0FBQztJQUM3RixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSztRQUN4QyxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUMsS0FBSyxFQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQ3RGLENBQUM7Q0FDSjtBQXJERCxpQ0FxREM7QUFBQSxDQUFDIiwiZmlsZSI6ImxpYi9tYXN0ZXIvbWFzdGVyLnNlcnZpY2VzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgbW9uZ29vc2UgZnJvbSBcIm1vbmdvb3NlXCI7XG5pbXBvcnQgKiBhcyBRIGZyb20gXCJxXCI7XG5pbXBvcnQgTWFzdGVyTW9kZWwgZnJvbSBcIi4vbWFzdGVyLm1vZGVsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hc3RlclNlcnZpY2VzIHtcbiAgICBwcm90ZWN0ZWQgUTtcbiAgICBwcm90ZWN0ZWQgbW9uZ29vc2U6IHR5cGVvZiBtb25nb29zZTtcbiAgICBwcm90ZWN0ZWQgbW9kZWw6IE1hc3Rlck1vZGVsO1xuICAgIHByb3RlY3RlZCBNb2RlbDogbW9uZ29vc2UuTW9kZWw8YW55PjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLlEgPSBRO1xuICAgIH1cblxuXHRpbml0KGZpbGVzLCBhcHApIHtcbiAgICAgICAgdGhpcy5tb2RlbCA9IGZpbGVzLm1vZGVsO1xuXHRcdHRoaXMubW9uZ29vc2UgPSBmaWxlcy5tb2RlbC5tb25nb29zZTtcblx0fVxuXG4gICAgc2V0TW9kZWwoTW9kZWwpIHtcblx0XHR0aGlzLk1vZGVsID0gTW9kZWw7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwcm9taXNlQnlDb25kaXRpb24oY29uZCwgZCwgZSkge1xuICAgICAgICByZXR1cm4gY29uZCA/IFByb21pc2UucmVzb2x2ZShkKSA6IFByb21pc2UucmVqZWN0KGUpO1xuICAgIH1cblxuICAgIGlzTm90RW1wdHkoZCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9taXNlQnlDb25kaXRpb24oZCwgZCwgZSk7XG4gICAgfVxuXG4gICAgaXNFbXB0eShkLCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb21pc2VCeUNvbmRpdGlvbighZCwgZCwgZSk7XG4gICAgfVxuXG4gICAgY2hlY2tFcXVhbHMoaXRlbTEsIGl0ZW0yLCBkLCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb21pc2VCeUNvbmRpdGlvbihpdGVtMSA9PT0gaXRlbTIsIGQsIGUpO1xuICAgIH1cblxuICAgIHJlcGxhY2VUb2tlbnMobXNnLCB0b2tlbnMpIHtcbiAgICAgICAgZm9yIChsZXQgdG9rZW4gaW4gdG9rZW5zKSB7XG4gICAgICAgICAgICBtc2cgPSBtc2cucmVwbGFjZShgeyR7dG9rZW59fWAsIHRva2Vuc1t0b2tlbl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobXNnKTtcbiAgICB9XG5cbiAgICBpblJhbmdlKGl0ZW0sIHN0YXJ0LCBlbmQsIGVycm9yLCBwYXJhbSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9taXNlQnlDb25kaXRpb24oaXRlbSA+PSBzdGFydCAmJiBpdGVtIDw9IGVuZCwgW10sIHtlcnJvciwgcGFyYW1zOiB7cGFyYW19fSk7XG4gICAgfVxuXG4gICAgaW5BcnJheShuZWVkbGUsIGhheSwgZXJyb3IsIHBhcmFtKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb21pc2VCeUNvbmRpdGlvbihoYXkuaW5kZXhPZihuZWVkbGUpICE9PSAtMSwgW10sIHtlcnJvciwgcGFyYW1zOiB7cGFyYW19fSk7XG4gICAgfVxuXG4gICAgaW52YWxpZGF0ZXNSZWdleChpdGVtLCBwYXR0ZXJuLCBlcnJvciwgcGFyYW0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvbWlzZUJ5Q29uZGl0aW9uKCFwYXR0ZXJuLnRlc3QoaXRlbSksIFtdLCB7ZXJyb3IsIHBhcmFtczoge3BhcmFtfX0pO1xuICAgIH1cbn07Il19

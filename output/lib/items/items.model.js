"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const master_model_1 = require("../master/master.model");
const stats_model_1 = require("../stats/stats.model");
let config = require('../../../server/lib/items/items.config.json');
exports.REQUIRE_SCHEMA = {
    str: Number,
    mag: Number,
    dex: Number,
    lvl: Number,
};
exports.ITEM_SCHEMA = {
    key: String,
    type: String,
    gold: Number,
    chance: Number,
    cap: Number,
    stats: stats_model_1.BASE_STATS_SCHEMA,
    req: exports.REQUIRE_SCHEMA,
};
exports.ITEM_INSTANCE_SCHEMA = Object.assign({
    key: String,
    stack: Number,
}, stats_model_1.BASE_STATS_SCHEMA);
class ItemsModel extends master_model_1.default {
    init(files, app) {
        this.controller = files.controller;
        this.schema = exports.ITEM_SCHEMA;
    }
    get priority() {
        return 25;
    }
    createModel() {
        this.setModel("Item");
        let ItemInstanceModel = this.createNewModel("ItemInstance", exports.ITEM_INSTANCE_SCHEMA, { _id: false });
        this.addToSchema("Character", { items: [ItemInstanceModel.schema] });
        let items = [];
        for (var i = 0; i < config.MAX_ITEMS; i++) {
            items[i] = new ItemInstanceModel({});
        }
        this.listenForFieldAddition("Character", "items", items);
        setTimeout(() => this.controller.warmItemsInfo());
        return Promise.resolve();
    }
}
exports.default = ItemsModel;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci9saWIvaXRlbXMvaXRlbXMubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUNiLHlEQUFpRDtBQUVqRCxzREFBeUQ7QUFDekQsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7QUFFdkQsUUFBQSxjQUFjLEdBQUc7SUFDMUIsR0FBRyxFQUFFLE1BQU07SUFDWCxHQUFHLEVBQUUsTUFBTTtJQUNYLEdBQUcsRUFBRSxNQUFNO0lBQ1gsR0FBRyxFQUFFLE1BQU07Q0FDZCxDQUFDO0FBRVcsUUFBQSxXQUFXLEdBQUc7SUFDdkIsR0FBRyxFQUFFLE1BQU07SUFDWCxJQUFJLEVBQUUsTUFBTTtJQUNaLElBQUksRUFBRSxNQUFNO0lBQ1osTUFBTSxFQUFFLE1BQU07SUFDZCxHQUFHLEVBQUUsTUFBTTtJQUNYLEtBQUssRUFBRSwrQkFBaUI7SUFDeEIsR0FBRyxFQUFFLHNCQUFjO0NBQ3RCLENBQUM7QUFFVyxRQUFBLG9CQUFvQixHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDOUMsR0FBRyxFQUFFLE1BQU07SUFDWCxLQUFLLEVBQUUsTUFBTTtDQUNoQixFQUFFLCtCQUFpQixDQUFDLENBQUM7QUFFdEIsZ0JBQWdDLFNBQVEsc0JBQVc7SUFHL0MsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHO1FBQ1gsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO1FBRW5DLElBQUksQ0FBQyxNQUFNLEdBQUcsbUJBQVcsQ0FBQztJQUM5QixDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1IsTUFBTSxDQUFDLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV0QixJQUFJLGlCQUFpQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsY0FBYyxFQUFFLDRCQUFvQixFQUFFLEVBQUMsR0FBRyxFQUFFLEtBQUssRUFBQyxDQUFDLENBQUM7UUFDaEcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsRUFBQyxLQUFLLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsRUFBQyxDQUFDLENBQUM7UUFDbkUsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ2YsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDeEMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekMsQ0FBQztRQUNELElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXpELFVBQVUsQ0FBQyxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztRQUNsRCxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzdCLENBQUM7Q0FDSjtBQTNCRCw2QkEyQkM7QUFBQSxDQUFDIiwiZmlsZSI6ImxpYi9pdGVtcy9pdGVtcy5tb2RlbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IE1hc3Rlck1vZGVsIGZyb20gXCIuLi9tYXN0ZXIvbWFzdGVyLm1vZGVsXCI7XG5pbXBvcnQgSXRlbXNDb250cm9sbGVyIGZyb20gJy4vaXRlbXMuY29udHJvbGxlcic7XG5pbXBvcnQgeyBCQVNFX1NUQVRTX1NDSEVNQSB9IGZyb20gXCIuLi9zdGF0cy9zdGF0cy5tb2RlbFwiO1xubGV0IGNvbmZpZyA9IHJlcXVpcmUoJy4uLy4uLy4uL3NlcnZlci9saWIvaXRlbXMvaXRlbXMuY29uZmlnLmpzb24nKTtcblxuZXhwb3J0IGNvbnN0IFJFUVVJUkVfU0NIRU1BID0ge1xuICAgIHN0cjogTnVtYmVyLFxuICAgIG1hZzogTnVtYmVyLFxuICAgIGRleDogTnVtYmVyLFxuICAgIGx2bDogTnVtYmVyLFxufTtcblxuZXhwb3J0IGNvbnN0IElURU1fU0NIRU1BID0ge1xuICAgIGtleTogU3RyaW5nLFxuICAgIHR5cGU6IFN0cmluZyxcbiAgICBnb2xkOiBOdW1iZXIsXG4gICAgY2hhbmNlOiBOdW1iZXIsXG4gICAgY2FwOiBOdW1iZXIsXG4gICAgc3RhdHM6IEJBU0VfU1RBVFNfU0NIRU1BLFxuICAgIHJlcTogUkVRVUlSRV9TQ0hFTUEsXG59O1xuXG5leHBvcnQgY29uc3QgSVRFTV9JTlNUQU5DRV9TQ0hFTUEgPSBPYmplY3QuYXNzaWduKHtcbiAgICBrZXk6IFN0cmluZyxcbiAgICBzdGFjazogTnVtYmVyLFxufSwgQkFTRV9TVEFUU19TQ0hFTUEpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJdGVtc01vZGVsIGV4dGVuZHMgTWFzdGVyTW9kZWwge1xuICAgIHByb3RlY3RlZCBjb250cm9sbGVyOiBJdGVtc0NvbnRyb2xsZXI7XG5cbiAgICBpbml0KGZpbGVzLCBhcHApIHtcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gZmlsZXMuY29udHJvbGxlcjtcblxuICAgICAgICB0aGlzLnNjaGVtYSA9IElURU1fU0NIRU1BO1xuICAgIH1cblxuICAgIGdldCBwcmlvcml0eSgpIHtcbiAgICAgICAgcmV0dXJuIDI1O1xuICAgIH1cblxuICAgIGNyZWF0ZU1vZGVsKCkge1xuICAgICAgICB0aGlzLnNldE1vZGVsKFwiSXRlbVwiKTtcblxuICAgICAgICBsZXQgSXRlbUluc3RhbmNlTW9kZWwgPSB0aGlzLmNyZWF0ZU5ld01vZGVsKFwiSXRlbUluc3RhbmNlXCIsIElURU1fSU5TVEFOQ0VfU0NIRU1BLCB7X2lkOiBmYWxzZX0pO1xuICAgICAgICB0aGlzLmFkZFRvU2NoZW1hKFwiQ2hhcmFjdGVyXCIsIHtpdGVtczogW0l0ZW1JbnN0YW5jZU1vZGVsLnNjaGVtYV19KTtcbiAgICAgICAgbGV0IGl0ZW1zID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29uZmlnLk1BWF9JVEVNUzsgaSsrKSB7XG4gICAgICAgICAgICBpdGVtc1tpXSA9IG5ldyBJdGVtSW5zdGFuY2VNb2RlbCh7fSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5saXN0ZW5Gb3JGaWVsZEFkZGl0aW9uKFwiQ2hhcmFjdGVyXCIsIFwiaXRlbXNcIiwgaXRlbXMpO1xuICAgICAgICBcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLmNvbnRyb2xsZXIud2FybUl0ZW1zSW5mbygpKTsgLy8gdGltZW91dCBzbyB0aGUgTW9kZWwgY2FuIGJlIHNldFxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxufTsiXX0=

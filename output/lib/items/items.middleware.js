'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const master_middleware_1 = require("../master/master.middleware");
let config = require('../../../server/lib/items/items.config.json');
exports.NO_SLOT = -1;
class ItemsMiddleware extends master_middleware_1.default {
    getFirstAvailableSlot(socket, blacklist = new Set()) {
        for (var slot = 0; slot < config.MAX_ITEMS; slot++) {
            if (blacklist.has(slot)) {
                continue;
            }
            if (!this.hasItem(socket, slot)) {
                break;
            }
        }
        return slot < config.MAX_ITEMS ? slot : exports.NO_SLOT;
    }
    isValidItemSlot(slot) {
        return slot >= 0 && slot < config.MAX_ITEMS;
    }
    hasItem(socket, slot) {
        return this.isItem(socket.character.items[slot]);
    }
    isItem(item) {
        return !!item.key;
    }
    isMisc(item) {
        return item.cap > 1 && !this.isGold(item);
    }
    isGold(item) {
        return item.key === "gold";
    }
    getStackSlots(socket, item, itemInfo, blacklist = new Set()) {
        let { stack } = item;
        let slots = [];
        for (let slot = 0; slot < config.MAX_ITEMS; slot++) {
            if (stack <= 0) {
                break;
            }
            let slotItem = socket.character.items[slot];
            if (slotItem.key === item.key && slotItem.stack < itemInfo.cap) {
                slots.push(slot);
                stack -= (itemInfo.cap - slotItem.stack);
            }
        }
        for (let slot = 0; slot < config.MAX_ITEMS; slot++) {
            if (blacklist.has(slot)) {
                continue;
            }
            if (stack <= 0) {
                break;
            }
            if (!this.hasItem(socket, slot)) {
                slots.push(slot);
                stack -= itemInfo.cap;
            }
        }
        return stack <= 0 ? slots : [];
    }
    getItemsSlots(socket, items) {
        let itemsToSlots = {};
        let blacklist = new Set();
        for (let item of items) {
            let itemInfo = this.services.getItemInfo(item.key);
            if (this.isMisc(itemInfo)) {
                let slots = this.getStackSlots(socket, item, itemInfo, blacklist);
                if (slots.length === 0) {
                    return false;
                }
                else {
                    slots.forEach(slot => blacklist.add(slot));
                    itemsToSlots[item.key] = slots;
                }
            }
            else if (!this.isGold(itemInfo)) {
                let slot = this.getFirstAvailableSlot(socket, blacklist);
                if (slot === exports.NO_SLOT) {
                    return false;
                }
                else {
                    blacklist.add(slot);
                    itemsToSlots[item.key] = [slot];
                }
            }
        }
        return itemsToSlots;
    }
}
exports.default = ItemsMiddleware;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

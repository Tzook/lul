'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const socketio_router_base_1 = require("../socketio/socketio.router.base");
let dropsConfig = require('../../../server/lib/drops/drops.config.json');
let config = require('../../../server/lib/items/items.config.json');
class ItemsRouter extends socketio_router_base_1.default {
    init(files, app) {
        this.services = files.services;
        super.init(files, app);
    }
    initRoutes(app) {
        app.post(this.ROUTES.GENERATE, this.middleware.validateHasSercetKey.bind(this.middleware), this.controller.generateItems.bind(this.controller));
    }
    getItemInfo(key) {
        return this.services.getItemInfo(key);
    }
    getItemInstance(key) {
        return this.services.getItemInstance(key);
    }
    getItemsCounts(socket) {
        let map = new Map();
        for (let item of socket.character.items) {
            let currentCount = map.get(item.key) || 0;
            map.set(item.key, currentCount + (item.stack || 1));
        }
        return map;
    }
    getItemsSlots(socket, items) {
        return this.middleware.getItemsSlots(socket, items);
    }
    [config.SERVER_GETS.ITEM_PICK.name](data, socket) {
        this.emitter.emit(dropsConfig.SERVER_INNER.ITEM_PICK.name, data, socket, (item) => {
            let itemInfo = this.getItemInfo(item.key);
            if (itemInfo.cap > 1) {
                return;
            }
            let slot = this.middleware.getFirstAvailableSlot(socket);
            if (!(slot >= 0)) {
                this.sendError(data, socket, config.LOGS.INVENTORY_FULL.MSG, true, true);
            }
            else {
                this[config.SERVER_INNER.ITEM_ADD.name]({ slots: [slot], item }, socket);
                return true;
            }
        });
    }
    [config.SERVER_INNER.ITEM_ADD.name](data, socket) {
        let { slots, item } = data;
        let itemInfo = this.getItemInfo(item.key);
        if (!this.middleware.isGold(item) && !this.middleware.isMisc(itemInfo)) {
            socket.character.items.set(slots[0], item);
            socket.emit(this.CLIENT_GETS.ITEM_ADD.name, { slot: slots[0], item });
        }
    }
    [config.SERVER_INNER.ITEM_REMOVE.name](data, socket) {
        let { stack, key } = data.item;
        let itemInfo = this.getItemInfo(key);
        if (!this.middleware.isMisc(itemInfo)) {
            for (let slot = 0; slot < socket.character.items.length; slot++) {
                let item = socket.character.items[slot];
                if (item.key === key) {
                    this.deleteItem(socket, slot);
                    if (--stack === 0) {
                        break;
                    }
                }
            }
        }
    }
    deleteItem(socket, slot) {
        socket.character.items.set(slot, {});
        socket.emit(this.CLIENT_GETS.ITEM_DELETE.name, { slot });
    }
    [config.SERVER_GETS.ITEM_DROP.name](data, socket) {
        let slot = data.slot;
        if (!this.middleware.hasItem(socket, slot)) {
            this.sendError(data, socket, "Trying to drop an item but nothing's there!");
        }
        else {
            let item = socket.character.items[slot];
            this.emitter.emit(dropsConfig.SERVER_INNER.ITEMS_DROP.name, {}, socket, [item]);
            this.deleteItem(socket, slot);
        }
    }
    [config.SERVER_GETS.ITEM_MOVE.name](data, socket) {
        if (!this.middleware.isValidItemSlot(data.from)
            || !this.middleware.isValidItemSlot(data.to)) {
            this.sendError(data, socket, "Invalid slots!");
        }
        else {
            let itemFrom = socket.character.items[data.from];
            let itemTo = socket.character.items[data.to];
            socket.character.items.set(data.to, itemFrom);
            socket.character.items.set(data.from, itemTo);
            socket.emit(this.CLIENT_GETS.ITEM_MOVE.name, {
                id: socket.character._id,
                from: data.from,
                to: data.to
            });
        }
    }
}
exports.default = ItemsRouter;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const master_services_1 = require("../master/master.services");
const items_model_1 = require("./items.model");
const _ = require("underscore");
const stats_model_1 = require("../stats/stats.model");
class ItemsServices extends master_services_1.default {
    constructor() {
        super(...arguments);
        this.itemsInfo = new Map();
    }
    generateItems(items) {
        console.log("Generating items from data:", items);
        let models = [];
        (items || []).forEach(item => {
            let itemSchema = {
                key: item.key,
                type: item.type,
                gold: item.goldValue,
                chance: item.dropChance,
                cap: item.stackCap,
            };
            this.pushStats(itemSchema, item, "req", items_model_1.REQUIRE_SCHEMA);
            this.pushStats(itemSchema, item, "stats", stats_model_1.BASE_STATS_SCHEMA);
            let itemModel = new this.Model(itemSchema);
            models.push(itemModel);
        });
        return this.Model.remove({})
            .then(d => this.Model.create(models));
    }
    pushStats(itemSchema, item, key, schema) {
        let stats = {};
        let itemStats = item[key];
        for (var stat in schema) {
            if (itemStats && itemStats[stat] > 0) {
                stats[stat] = itemStats[stat];
            }
        }
        if (!_.isEmpty(stats)) {
            itemSchema[key] = stats;
        }
    }
    getItems() {
        return this.Model.find({}).lean()
            .then((docs) => {
            docs.forEach(doc => {
                this.itemsInfo.set(doc.key, doc);
            });
            console.log("got items");
            return this.itemsInfo;
        });
    }
    getItemInfo(key) {
        return this.itemsInfo.get(key);
    }
    getItemInstance(key) {
        let itemInfo = this.getItemInfo(key);
        let instance;
        if (itemInfo) {
            instance = {
                key: itemInfo.key
            };
            if (itemInfo.stats) {
                for (var statKey in itemInfo.stats) {
                    instance[statKey] = itemInfo.stats[statKey];
                }
            }
        }
        return instance;
    }
}
exports.default = ItemsServices;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci9saWIvaXRlbXMvaXRlbXMuc2VydmljZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUNiLCtEQUF1RDtBQUN2RCwrQ0FBK0M7QUFDL0MsZ0NBQWdDO0FBQ2hDLHNEQUF5RDtBQUV6RCxtQkFBbUMsU0FBUSx5QkFBYztJQUF6RDs7UUFDUyxjQUFTLEdBQTRCLElBQUksR0FBRyxFQUFFLENBQUM7SUF1RXhELENBQUM7SUFyRVUsYUFBYSxDQUFDLEtBQVk7UUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVsRCxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFFaEIsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUk7WUFDekIsSUFBSSxVQUFVLEdBQWU7Z0JBQzVCLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztnQkFDYixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTO2dCQUNwQixNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVU7Z0JBQ3ZCLEdBQUcsRUFBRSxJQUFJLENBQUMsUUFBUTthQUNsQixDQUFDO1lBRUYsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSw0QkFBYyxDQUFDLENBQUM7WUFDeEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSwrQkFBaUIsQ0FBQyxDQUFDO1lBRTdELElBQUksU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUMzQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQzthQUMxQixJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVTLFNBQVMsQ0FBQyxVQUFzQixFQUFFLElBQUksRUFBRSxHQUFXLEVBQUUsTUFBTTtRQUNwRSxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDZixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUIsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQztZQUN6QixFQUFFLENBQUMsQ0FBQyxTQUFTLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDL0IsQ0FBQztRQUNGLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDekIsQ0FBQztJQUNGLENBQUM7SUFFUyxRQUFRO1FBQ2pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUU7YUFDL0IsSUFBSSxDQUFDLENBQUMsSUFBa0I7WUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHO2dCQUNmLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDbEMsQ0FBQyxDQUFDLENBQUM7WUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLFdBQVcsQ0FBQyxHQUFXO1FBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRU0sZUFBZSxDQUFDLEdBQVc7UUFFakMsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyQyxJQUFJLFFBQXVCLENBQUM7UUFDNUIsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNkLFFBQVEsR0FBRztnQkFDVixHQUFHLEVBQUUsUUFBUSxDQUFDLEdBQUc7YUFDakIsQ0FBQztZQUNGLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNwQixHQUFHLENBQUMsQ0FBQyxJQUFJLE9BQU8sSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztvQkFDcEMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQzdDLENBQUM7WUFDRixDQUFDO1FBQ0YsQ0FBQztRQUNELE1BQU0sQ0FBQyxRQUFRLENBQUE7SUFDaEIsQ0FBQztDQUNEO0FBeEVELGdDQXdFQztBQUFBLENBQUMiLCJmaWxlIjoibGliL2l0ZW1zL2l0ZW1zLnNlcnZpY2VzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IE1hc3RlclNlcnZpY2VzIGZyb20gJy4uL21hc3Rlci9tYXN0ZXIuc2VydmljZXMnO1xuaW1wb3J0IHsgUkVRVUlSRV9TQ0hFTUEgfSBmcm9tIFwiLi9pdGVtcy5tb2RlbFwiO1xuaW1wb3J0ICogYXMgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCB7IEJBU0VfU1RBVFNfU0NIRU1BIH0gZnJvbSBcIi4uL3N0YXRzL3N0YXRzLm1vZGVsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEl0ZW1zU2VydmljZXMgZXh0ZW5kcyBNYXN0ZXJTZXJ2aWNlcyB7XG5cdHByaXZhdGUgaXRlbXNJbmZvOiBNYXA8c3RyaW5nLCBJVEVNX01PREVMPiA9IG5ldyBNYXAoKTtcblxuICAgIHB1YmxpYyBnZW5lcmF0ZUl0ZW1zKGl0ZW1zOiBhbnlbXSk6IFByb21pc2U8YW55PiB7XG5cdFx0Y29uc29sZS5sb2coXCJHZW5lcmF0aW5nIGl0ZW1zIGZyb20gZGF0YTpcIiwgaXRlbXMpO1xuXHRcdFxuXHRcdGxldCBtb2RlbHMgPSBbXTtcblxuXHRcdChpdGVtcyB8fCBbXSkuZm9yRWFjaChpdGVtID0+IHtcblx0XHRcdGxldCBpdGVtU2NoZW1hOiBJVEVNX01PREVMID0ge1xuXHRcdFx0XHRrZXk6IGl0ZW0ua2V5LFxuXHRcdFx0XHR0eXBlOiBpdGVtLnR5cGUsXG5cdFx0XHRcdGdvbGQ6IGl0ZW0uZ29sZFZhbHVlLFxuXHRcdFx0XHRjaGFuY2U6IGl0ZW0uZHJvcENoYW5jZSxcblx0XHRcdFx0Y2FwOiBpdGVtLnN0YWNrQ2FwLFxuXHRcdFx0fTtcblxuXHRcdFx0dGhpcy5wdXNoU3RhdHMoaXRlbVNjaGVtYSwgaXRlbSwgXCJyZXFcIiwgUkVRVUlSRV9TQ0hFTUEpO1xuXHRcdFx0dGhpcy5wdXNoU3RhdHMoaXRlbVNjaGVtYSwgaXRlbSwgXCJzdGF0c1wiLCBCQVNFX1NUQVRTX1NDSEVNQSk7XG5cblx0XHRcdGxldCBpdGVtTW9kZWwgPSBuZXcgdGhpcy5Nb2RlbChpdGVtU2NoZW1hKTtcblx0XHRcdG1vZGVscy5wdXNoKGl0ZW1Nb2RlbCk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gdGhpcy5Nb2RlbC5yZW1vdmUoe30pXG5cdFx0XHQudGhlbihkID0+IHRoaXMuTW9kZWwuY3JlYXRlKG1vZGVscykpO1xuXHR9XG5cblx0cHJvdGVjdGVkIHB1c2hTdGF0cyhpdGVtU2NoZW1hOiBJVEVNX01PREVMLCBpdGVtLCBrZXk6IHN0cmluZywgc2NoZW1hKSB7XG5cdFx0bGV0IHN0YXRzID0ge307XG5cdFx0bGV0IGl0ZW1TdGF0cyA9IGl0ZW1ba2V5XTtcblx0XHRmb3IgKHZhciBzdGF0IGluIHNjaGVtYSkge1xuXHRcdFx0aWYgKGl0ZW1TdGF0cyAmJiBpdGVtU3RhdHNbc3RhdF0gPiAwKSB7XG5cdFx0XHRcdHN0YXRzW3N0YXRdID0gaXRlbVN0YXRzW3N0YXRdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoIV8uaXNFbXB0eShzdGF0cykpIHtcblx0XHRcdGl0ZW1TY2hlbWFba2V5XSA9IHN0YXRzO1xuXHRcdH1cblx0fVxuXG4gICAgcHVibGljIGdldEl0ZW1zKCk6IFByb21pc2U8TWFwPHN0cmluZywgSVRFTV9NT0RFTD4+IHtcblx0XHRyZXR1cm4gdGhpcy5Nb2RlbC5maW5kKHt9KS5sZWFuKClcblx0XHRcdC50aGVuKChkb2NzOiBJVEVNX01PREVMW10pID0+IHtcblx0XHRcdFx0ZG9jcy5mb3JFYWNoKGRvYyA9PiB7XG5cdFx0XHRcdFx0dGhpcy5pdGVtc0luZm8uc2V0KGRvYy5rZXksIGRvYyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcImdvdCBpdGVtc1wiKTtcblx0XHRcdFx0cmV0dXJuIHRoaXMuaXRlbXNJbmZvO1xuXHRcdFx0fSk7XG5cdH1cblxuXHRwdWJsaWMgZ2V0SXRlbUluZm8oa2V5OiBzdHJpbmcpOiBJVEVNX01PREVMfHVuZGVmaW5lZCB7XG5cdFx0cmV0dXJuIHRoaXMuaXRlbXNJbmZvLmdldChrZXkpO1xuXHR9XG5cblx0cHVibGljIGdldEl0ZW1JbnN0YW5jZShrZXk6IHN0cmluZyk6IElURU1fSU5TVEFOQ0V8dW5kZWZpbmVkIHtcblx0XHQvLyBhbHdheXMgcmV0dXJuIGEgY29weSBvZiB0aGUgaXRlbSwgc28gaXQgY2FuIGJlIG1vZGlmaWVkIGZyZWVseVxuXHRcdGxldCBpdGVtSW5mbyA9IHRoaXMuZ2V0SXRlbUluZm8oa2V5KTtcblx0XHRsZXQgaW5zdGFuY2U6IElURU1fSU5TVEFOQ0U7XG5cdFx0aWYgKGl0ZW1JbmZvKSB7XG5cdFx0XHRpbnN0YW5jZSA9IHtcblx0XHRcdFx0a2V5OiBpdGVtSW5mby5rZXlcblx0XHRcdH07XG5cdFx0XHRpZiAoaXRlbUluZm8uc3RhdHMpIHtcblx0XHRcdFx0Zm9yICh2YXIgc3RhdEtleSBpbiBpdGVtSW5mby5zdGF0cykge1xuXHRcdFx0XHRcdGluc3RhbmNlW3N0YXRLZXldID0gaXRlbUluZm8uc3RhdHNbc3RhdEtleV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGluc3RhbmNlXG5cdH1cbn07Il19

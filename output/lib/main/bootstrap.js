Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
class Bootstrap {
    constructor(app) {
        this.app = app;
        this.app.get('/', (req, res) => {
            res.sendFile(path.resolve(`playground/test.html`));
        });
        this.app.get('/assets.html', (req, res) => {
            res.sendFile(path.resolve(`playground/assets`));
        });
    }
    init() {
        let structure = require('../../../config/config.structure.json');
        let routers = {};
        var filesGroups = [];
        for (let i = 0; i < structure.folders.length; i++) {
            if (structure.skip[structure.folders[i]]) {
                continue;
            }
            let files = this.createFiles(structure, i);
            files.routers = routers;
            filesGroups.push(files);
            routers[structure.folders[i]] = files.router;
        }
        this.initObjects(structure.templates, filesGroups, this.app);
        filesGroups.sort((a, b) => b.model.priority - a.model.priority);
        this.createModel(filesGroups, 0);
    }
    createFiles(structure, i) {
        let files = {};
        for (let j = 0; j < structure.templates.length; j++) {
            let path = `../${structure.folders[i]}/${structure.folders[i]}.${structure.templates[j]}.js`;
            files[structure.templates[j]] = new (require(path).default)();
        }
        for (let j = 0; j < structure.configs.length; j++) {
            files[structure.configs[j]] = require(`../../../server/lib/${structure.folders[i]}/${structure.folders[i]}.${structure.configs[j]}.json`);
        }
        return files;
    }
    createModel(filesGroups, i) {
        if (i === filesGroups.length) {
            return;
        }
        filesGroups[i].model.createModel()
            .then(() => {
            this.createModel(filesGroups, i + 1);
            filesGroups[i].services.setModel(filesGroups[i].model.getModel());
        });
    }
    initObjects(templates, objectsToInit, app) {
        objectsToInit.forEach(objToInit => {
            templates.forEach(template => {
                objToInit[template].init(objToInit, app);
            });
        });
    }
}
exports.default = Bootstrap;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci9saWIvbWFpbi9ib290c3RyYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDZCQUE2QjtBQUU3QjtJQUdJLFlBQVksR0FBRztRQUNYLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBRWYsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUc7WUFDdkIsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHO1lBQ2xDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7UUFDcEQsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU0sSUFBSTtRQUNQLElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO1FBQ2pFLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNqQixJQUFJLFdBQVcsR0FBRyxFQUFFLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ2hELEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdkMsUUFBUSxDQUFDO1lBQ2IsQ0FBQztZQUNELElBQUksS0FBSyxHQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2hELEtBQUssQ0FBQyxPQUFPLEdB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ImxpYi9tYWluL2Jvb3RzdHJhcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb3RzdHJhcCB7XG4gICAgcHJvdGVjdGVkIGFwcDtcblxuICAgIGNvbnN0cnVjdG9yKGFwcCkge1xuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcblxuICAgICAgICB0aGlzLmFwcC5nZXQoJy8nLCAocmVxLCByZXMpID0+IHtcbiAgICAgICAgICAgIHJlcy5zZW5kRmlsZShwYXRoLnJlc29sdmUoYHBsYXlncm91bmQvdGVzdC5odG1sYCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hcHAuZ2V0KCcvYXNzZXRzLmh0bWwnLCAocmVxLCByZXMpID0+IHtcbiAgICAgICAgICAgIHJlcy5zZW5kRmlsZShwYXRoLnJlc29sdmUoYHBsYXlncm91bmQvYXNzZXRzYCkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaW5pdCgpIHtcbiAgICAgICAgbGV0IHN0cnVjdHVyZSA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbmZpZy9jb25maWcuc3RydWN0dXJlLmpzb24nKTtcbiAgICAgICAgbGV0IHJvdXRlcnMgPSB7fTtcbiAgICAgICAgdmFyIGZpbGVzR3JvdXBzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RydWN0dXJlLmZvbGRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChzdHJ1Y3R1cmUuc2tpcFtzdHJ1Y3R1cmUuZm9sZGVyc1tpXV0pIHsgLy8gVGhlcmUgYXJlIGNsYXNzZXMgdGhhdCB3ZSBkbyBub3Qgd2FudCB0byBpbnN0YW50aWF0ZSwgbGlrZSBNYXN0ZXIgLSBldmVyeXRoaW5nIGluaGVyaXRzIGZyb20gaXRcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBmaWxlczogYW55ID0gdGhpcy5jcmVhdGVGaWxlcyhzdHJ1Y3R1cmUsIGkpO1xuICAgICAgICAgICAgZmlsZXMucm91dGVycyA9IHJvdXRlcnM7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZpbGVzR3JvdXBzLnB1c2goZmlsZXMpO1xuICAgICAgICAgICAgcm91dGVyc1tzdHJ1Y3R1cmUuZm9sZGVyc1tpXV0gPSBmaWxlcy5yb3V0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbml0T2JqZWN0cyhzdHJ1Y3R1cmUudGVtcGxhdGVzLCBmaWxlc0dyb3VwcywgdGhpcy5hcHApO1xuICAgICAgICBcbiAgICAgICAgZmlsZXNHcm91cHMuc29ydCgoYSwgYikgPT4gYi5tb2RlbC5wcmlvcml0eSAtIGEubW9kZWwucHJpb3JpdHkpO1xuICAgICAgICB0aGlzLmNyZWF0ZU1vZGVsKGZpbGVzR3JvdXBzLCAwKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZUZpbGVzKHN0cnVjdHVyZSwgaSkge1xuICAgICAgICBsZXQgZmlsZXMgPSB7fTtcbiAgICAgICAgLy8gY3JlYXRlcyBuZXcgaW5zdGFuY2VzXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc3RydWN0dXJlLnRlbXBsYXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgbGV0IHBhdGggPSBgLi4vJHtzdHJ1Y3R1cmUuZm9sZGVyc1tpXX0vJHtzdHJ1Y3R1cmUuZm9sZGVyc1tpXX0uJHtzdHJ1Y3R1cmUudGVtcGxhdGVzW2pdfS5qc2A7XG4gICAgICAgICAgICBmaWxlc1tzdHJ1Y3R1cmUudGVtcGxhdGVzW2pdXSA9IG5ldyAocmVxdWlyZShwYXRoKS5kZWZhdWx0KSgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGxvYWQgY29uZmlnIGZpbGVzXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc3RydWN0dXJlLmNvbmZpZ3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGZpbGVzW3N0cnVjdHVyZS5jb25maWdzW2pdXSA9IHJlcXVpcmUoYC4uLy4uLy4uL3NlcnZlci9saWIvJHtzdHJ1Y3R1cmUuZm9sZGVyc1tpXX0vJHtzdHJ1Y3R1cmUuZm9sZGVyc1tpXX0uJHtzdHJ1Y3R1cmUuY29uZmlnc1tqXX0uanNvbmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWxlcztcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZU1vZGVsKGZpbGVzR3JvdXBzOiBhbnlbXSwgaSkge1xuICAgICAgICBpZiAoaSA9PT0gZmlsZXNHcm91cHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZmlsZXNHcm91cHNbaV0ubW9kZWwuY3JlYXRlTW9kZWwoKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTW9kZWwoZmlsZXNHcm91cHMsIGkgKyAxKTtcbiAgICAgICAgICAgICAgICBmaWxlc0dyb3Vwc1tpXS5zZXJ2aWNlcy5zZXRNb2RlbChmaWxlc0dyb3Vwc1tpXS5tb2RlbC5nZXRNb2RlbCgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdE9iamVjdHModGVtcGxhdGVzLCBvYmplY3RzVG9Jbml0LCBhcHApIHtcbiAgICAgICAgb2JqZWN0c1RvSW5pdC5mb3JFYWNoKG9ialRvSW5pdCA9PiB7XG4gICAgICAgICAgICB0ZW1wbGF0ZXMuZm9yRWFjaCh0ZW1wbGF0ZSA9PiB7XG4gICAgICAgICAgICAgICAgb2JqVG9Jbml0W3RlbXBsYXRlXS5pbml0KG9ialRvSW5pdCwgYXBwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59OyJdfQ==

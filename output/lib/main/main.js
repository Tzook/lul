'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
let express = require('express'), http = require('http'), mongoose = require('mongoose'), session = require('express-session'), MongoStore = require('connect-mongo')(session), cookieParser = require('cookie-parser'), bodyParser = require('body-parser'), cors = require('cors'), compression = require('compression');
const bootstrap_1 = require("./bootstrap");
class Main {
    constructor() {
        this.app = express();
    }
    useDb() {
        mongoose.Promise = global.Promise;
        mongoose.connect(process.env.dbUrl ? process.env.dbUrl : require('../../../config/.env.json').dbUrl);
        mongoose.connection.on('error', console.error.bind(console, 'connection error:'));
    }
    useDependencies() {
        this.app.dependencies = [
            compression({ level: 1 }),
            cookieParser(),
            bodyParser.json(),
            cors()
        ];
        this.app.use((req, res, next) => {
            let count = this.app.dependencies.length;
            for (let i in this.app.dependencies) {
                this.app.dependencies[i](req, res, done);
            }
            function done(err) {
                (err && next(err)) || (!--count && next());
            }
        });
    }
    beginServer() {
        this.app.set('view engine', 'jade');
        this.app.set('port', (process.env.PORT || 5000));
        this.app.server = http.createServer(this.app).listen(this.app.get('port'));
        this.app.socketio = require('socket.io')(this.app.server);
    }
    attachAppVariables() {
        this.app.cookieParser = cookieParser;
        this.app.session = session;
        this.app.db = mongoose.connection;
        this.app.mongoStore = new MongoStore({ mongooseConnection: this.app.db });
    }
    connectToDbAndBootstrap() {
        this.app.db.once('open', () => {
            console.info("\t+*+*+ Connected to mongodb! on MongoLab +*+*+");
            let bootstrap = new bootstrap_1.default(this.app);
            bootstrap.init();
        });
    }
}
exports.default = Main;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci9saWIvbWFpbi9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7QUFFYixJQUFLLE9BQU8sR0FBSyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQ2pDLElBQUksR0FBSyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQ3hCLFFBQVEsR0FBSyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQ2hDLE9BQU8sR0FBSyxPQUFPLENBQUMsaUJBQWlCLENBQUMsRUFDdEMsVUFBVSxHQUFLLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFDaEQsWUFBWSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsRUFDdkMsVUFBVSxHQUFJLE9BQU8sQ0FBQyxhQUFhLENBQUMsRUFDcEMsSUFBSSxHQUFLLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFDeEIsV0FBVyxHQUFJLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUd4QywyQ0FBb0M7QUFFcEM7SUFHQztRQUNPLElBQUksQ0FBQyxHQUFHLEdBQUcsT0FBTyxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVKLEtBQUs7UUFDSixRQUFRLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDbEMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyRyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLG1CQUFtQixDQUFDLENBQUMsQ0FBQztJQUNuRixDQUFDO0lBRUQsZUFBZTtRQUdkLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxHQUFHO1lBQ3ZCLFdBQVcsQ0FBQyxFQUFDLEtBQUssRUFBRSxDQUFDLEVBQUMsQ0FBQztZQUN2QixZQUFZLEVBQUU7WUFDZCxVQUFVLENBQUMsSUFBSSxFQUFFO1lBQ2pCLElBQUksRUFBRTtTQUNOLENBQUM7UUFDRixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSTtZQUMzQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7WUFDekMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO2dCQUNyQyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzFDLENBQUM7WUFDRCxjQUFlLEdBQUc7Z0JBQ2pCLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEtBQUssSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQzVDLENBQUM7UUFDRixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxXQUFXO1FBQ1YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDM0UsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVELGtCQUFrQjtRQUNqQixJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDckMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQzNCLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUM7UUFDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsSUFBSSxVQUFVLENBQUMsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVELHVCQUF1QjtRQUN0QixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ3hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsaURBQWlELENBQUMsQ0FBQztZQUNoRSxJQUFJLFNBQVMsR0FBRyxJQUFJLG1CQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3hDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNsQixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7Q0FDRDtBQXRERCx1QkFzREM7QUFBQSxDQUFDIiwiZmlsZSI6ImxpYi9tYWluL21haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vLyBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbmxldCBcdGV4cHJlc3MgXHRcdD0gcmVxdWlyZSgnZXhwcmVzcycpLFxuXHRcdGh0dHBcdFx0XHQ9IHJlcXVpcmUoJ2h0dHAnKSxcblx0XHRtb25nb29zZSBcdFx0PSByZXF1aXJlKCdtb25nb29zZScpLFxuXHRcdHNlc3Npb25cdFx0XHQ9IHJlcXVpcmUoJ2V4cHJlc3Mtc2Vzc2lvbicpLFxuXHRcdE1vbmdvU3RvcmUgXHRcdD0gcmVxdWlyZSgnY29ubmVjdC1tb25nbycpKHNlc3Npb24pLFxuXHRcdGNvb2tpZVBhcnNlclx0PSByZXF1aXJlKCdjb29raWUtcGFyc2VyJyksXG5cdFx0Ym9keVBhcnNlclx0XHQ9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJyksXG5cdFx0Y29yc1x0XHRcdD0gcmVxdWlyZSgnY29ycycpLFxuXHRcdGNvbXByZXNzaW9uXHRcdD0gcmVxdWlyZSgnY29tcHJlc3Npb24nKTtcblxuLy8gSW50ZXJuYWxcbmltcG9ydCBCb290c3RyYXAgZnJvbSAnLi9ib290c3RyYXAnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYWluIHtcblx0cHJpdmF0ZSBhcHA7XG5cblx0Y29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYXBwID0gZXhwcmVzcygpO1xuICAgIH1cblxuXHR1c2VEYigpIHtcblx0XHRtb25nb29zZS5Qcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG5cdFx0bW9uZ29vc2UuY29ubmVjdChwcm9jZXNzLmVudi5kYlVybCA/IHByb2Nlc3MuZW52LmRiVXJsIDogcmVxdWlyZSgnLi4vLi4vLi4vY29uZmlnLy5lbnYuanNvbicpLmRiVXJsKTtcblx0XHRtb25nb29zZS5jb25uZWN0aW9uLm9uKCdlcnJvcicsIGNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlLCAnY29ubmVjdGlvbiBlcnJvcjonKSk7XG5cdH1cblxuXHR1c2VEZXBlbmRlbmNpZXMoKSB7XG5cdFx0Ly8gUnVuIGFsbCBhc3luYyAtIHRoZXkgZG9uJ3QgbmVlZCB0byBydW4gYWZ0ZXIgZWFjaCBvdGhlci5cblx0XHQvLyBUbyBhZGQgYSBkZXBlbmRlbmN5IHRvIHJ1biB3aXRoIHRoZW0sIHNpbXBseSBwdXNoIGl0IHRvIHRoZSBkZXBlbmRlbmNpZXMgYXJyYXlcblx0XHR0aGlzLmFwcC5kZXBlbmRlbmNpZXMgPSBbXG5cdFx0XHRjb21wcmVzc2lvbih7bGV2ZWw6IDF9KSxcblx0XHRcdGNvb2tpZVBhcnNlcigpLFxuXHRcdFx0Ym9keVBhcnNlci5qc29uKCksXG5cdFx0XHRjb3JzKClcblx0XHRdO1xuXHRcdHRoaXMuYXBwLnVzZSgocmVxLCByZXMsIG5leHQpID0+IHtcblx0XHRcdGxldCBjb3VudCA9IHRoaXMuYXBwLmRlcGVuZGVuY2llcy5sZW5ndGg7XG5cdFx0XHRmb3IgKGxldCBpIGluIHRoaXMuYXBwLmRlcGVuZGVuY2llcykge1xuXHRcdFx0XHR0aGlzLmFwcC5kZXBlbmRlbmNpZXNbaV0ocmVxLCByZXMsIGRvbmUpO1xuXHRcdFx0fVxuXHRcdFx0ZnVuY3Rpb24gZG9uZSAoZXJyKSB7XG5cdFx0XHRcdChlcnIgJiYgbmV4dChlcnIpKSB8fCAoIS0tY291bnQgJiYgbmV4dCgpKTsgLy8gaWYgaGFkIGVycm9yIC0gbmV4dCB3aWxsIGhhbmRsZSBpdC4gb3RoZXJ3aXNlLCB3aGVuIGFsbCBmaW5pc2hlZCwgcHJvY2NlZWQuXG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRiZWdpblNlcnZlcigpIHtcblx0XHR0aGlzLmFwcC5zZXQoJ3ZpZXcgZW5naW5lJywgJ2phZGUnKTtcblx0XHR0aGlzLmFwcC5zZXQoJ3BvcnQnLCAocHJvY2Vzcy5lbnYuUE9SVCB8fCA1MDAwKSk7XG5cdFx0dGhpcy5hcHAuc2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIodGhpcy5hcHApLmxpc3Rlbih0aGlzLmFwcC5nZXQoJ3BvcnQnKSk7XG5cdFx0dGhpcy5hcHAuc29ja2V0aW8gPSByZXF1aXJlKCdzb2NrZXQuaW8nKSh0aGlzLmFwcC5zZXJ2ZXIpO1xuXHR9XG5cblx0YXR0YWNoQXBwVmFyaWFibGVzKCkge1xuXHRcdHRoaXMuYXBwLmNvb2tpZVBhcnNlciA9IGNvb2tpZVBhcnNlcjtcblx0XHR0aGlzLmFwcC5zZXNzaW9uID0gc2Vzc2lvbjtcblx0XHR0aGlzLmFwcC5kYiA9IG1vbmdvb3NlLmNvbm5lY3Rpb247XG5cdFx0dGhpcy5hcHAubW9uZ29TdG9yZSA9IG5ldyBNb25nb1N0b3JlKHsgbW9uZ29vc2VDb25uZWN0aW9uOiB0aGlzLmFwcC5kYiB9KTtcblx0fVxuXG5cdGNvbm5lY3RUb0RiQW5kQm9vdHN0cmFwKCkge1xuXHRcdHRoaXMuYXBwLmRiLm9uY2UoJ29wZW4nLCAoKSA9PiB7XG5cdFx0XHRjb25zb2xlLmluZm8oXCJcXHQrKisqKyBDb25uZWN0ZWQgdG8gbW9uZ29kYiEgb24gTW9uZ29MYWIgKyorKitcIik7XG5cdFx0XHRsZXQgYm9vdHN0cmFwID0gbmV3IEJvb3RzdHJhcCh0aGlzLmFwcCk7XG5cdFx0XHRib290c3RyYXAuaW5pdCgpO1xuXHRcdH0pO1xuXHR9XG59OyJdfQ==

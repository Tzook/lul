'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const socketio_router_base_1 = require("../socketio/socketio.router.base");
let SERVER_GETS = require('../../../server/lib/chat/chat.config.json').SERVER_GETS;
class ChatRouter extends socketio_router_base_1.default {
    init(files, app) {
        super.init(files, app);
        this.partyRouter = files.routers.party;
    }
    [SERVER_GETS.SHOUT.name](data, socket) {
        socket.broadcast.emit(this.CLIENT_GETS.SHOUT.name, {
            id: socket.character._id,
            msg: data.msg,
        });
    }
    [SERVER_GETS.CHAT.name](data, socket) {
        socket.broadcast.to(socket.character.room).emit(this.CLIENT_GETS.CHAT.name, {
            id: socket.character._id,
            msg: data.msg,
        });
    }
    [SERVER_GETS.WHISPER.name](data, socket) {
        let targetSocket = socket.map.get(data.to);
        if (!targetSocket) {
            this.sendError(data, socket, "Failed to find socket for whisper");
        }
        else {
            targetSocket.emit(this.CLIENT_GETS.WHISPER.name, {
                name: socket.character.name,
                msg: data.msg,
            });
        }
    }
    [SERVER_GETS.PARTY_CHAT.name](data, socket) {
        const party = this.partyRouter.getCharParty(socket);
        if (!party) {
            this.sendError(data, socket, "Failed to find party for engaging in party chat");
        }
        else {
            socket.broadcast.to(party.name).emit(this.CLIENT_GETS.PARTY_CHAT.name, {
                id: socket.character._id,
                msg: data.msg,
            });
        }
    }
}
exports.default = ChatRouter;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci9saWIvY2hhdC9jaGF0LnJvdXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7O0FBQ2IsMkVBQWtFO0FBRWxFLElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztBQUVuRixnQkFBZ0MsU0FBUSw4QkFBa0I7SUFHekQsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHO1FBQ2QsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUM5QyxDQUFDO0lBRUQsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFrQjtRQUNoRCxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUU7WUFDbEQsRUFBRSxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRztZQUN4QixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7U0FDYixDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFrQjtRQUMvQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDM0UsRUFBRSxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRztZQUN4QixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7U0FDYixDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFrQjtRQUNsRCxJQUFJLFlBQVksR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDM0MsRUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBQ25CLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxtQ0FBbUMsQ0FBQyxDQUFDO1FBQ25FLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNQLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFO2dCQUNoRCxJQUFJLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJO2dCQUMzQixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7YUFDYixDQUFDLENBQUM7UUFDSixDQUFDO0lBQ0YsQ0FBQztJQUVELENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsTUFBa0I7UUFDckQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEQsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ1osSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLGlEQUFpRCxDQUFDLENBQUM7UUFDakYsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ1AsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUU7Z0JBQ3RFLEVBQUUsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUc7Z0JBQ3hCLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRzthQUNiLENBQUMsQ0FBQztRQUNKLENBQUM7SUFDRixDQUFDO0NBQ0Q7QUE3Q0QsNkJBNkNDO0FBQUEsQ0FBQyIsImZpbGUiOiJsaWIvY2hhdC9jaGF0LnJvdXRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmltcG9ydCBTb2NrZXRpb1JvdXRlckJhc2UgZnJvbSAnLi4vc29ja2V0aW8vc29ja2V0aW8ucm91dGVyLmJhc2UnO1xuaW1wb3J0IFBhcnR5Um91dGVyIGZyb20gXCIuLi9wYXJ0eS9wYXJ0eS5yb3V0ZXJcIjtcbmxldCBTRVJWRVJfR0VUUyA9IHJlcXVpcmUoJy4uLy4uLy4uL3NlcnZlci9saWIvY2hhdC9jaGF0LmNvbmZpZy5qc29uJykuU0VSVkVSX0dFVFM7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoYXRSb3V0ZXIgZXh0ZW5kcyBTb2NrZXRpb1JvdXRlckJhc2Uge1xuXHRwcm90ZWN0ZWQgcGFydHlSb3V0ZXI6IFBhcnR5Um91dGVyO1xuXHRcblx0aW5pdChmaWxlcywgYXBwKSB7XG5cdFx0c3VwZXIuaW5pdChmaWxlcywgYXBwKTtcbiAgICAgICAgdGhpcy5wYXJ0eVJvdXRlciA9IGZpbGVzLnJvdXRlcnMucGFydHk7XG5cdH1cblxuXHRbU0VSVkVSX0dFVFMuU0hPVVQubmFtZV0oZGF0YSwgc29ja2V0OiBHYW1lU29ja2V0KSB7XG5cdFx0c29ja2V0LmJyb2FkY2FzdC5lbWl0KHRoaXMuQ0xJRU5UX0dFVFMuU0hPVVQubmFtZSwge1xuXHRcdFx0aWQ6IHNvY2tldC5jaGFyYWN0ZXIuX2lkLFxuXHRcdFx0bXNnOiBkYXRhLm1zZyxcblx0XHR9KTtcblx0fVxuXG5cdFtTRVJWRVJfR0VUUy5DSEFULm5hbWVdKGRhdGEsIHNvY2tldDogR2FtZVNvY2tldCkge1xuXHRcdHNvY2tldC5icm9hZGNhc3QudG8oc29ja2V0LmNoYXJhY3Rlci5yb29tKS5lbWl0KHRoaXMuQ0xJRU5UX0dFVFMuQ0hBVC5uYW1lLCB7XG5cdFx0XHRpZDogc29ja2V0LmNoYXJhY3Rlci5faWQsXG5cdFx0XHRtc2c6IGRhdGEubXNnLFxuXHRcdH0pO1xuXHR9XG5cblx0W1NFUlZFUl9HRVRTLldISVNQRVIubmFtZV0oZGF0YSwgc29ja2V0OiBHYW1lU29ja2V0KSB7XG5cdFx0bGV0IHRhcmdldFNvY2tldCA9IHNvY2tldC5tYXAuZ2V0KGRhdGEudG8pO1xuXHRcdGlmICghdGFyZ2V0U29ja2V0KSB7XG5cdFx0XHR0aGlzLnNlbmRFcnJvcihkYXRhLCBzb2NrZXQsIFwiRmFpbGVkIHRvIGZpbmQgc29ja2V0IGZvciB3aGlzcGVyXCIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXRTb2NrZXQuZW1pdCh0aGlzLkNMSUVOVF9HRVRTLldISVNQRVIubmFtZSwge1xuXHRcdFx0XHRuYW1lOiBzb2NrZXQuY2hhcmFjdGVyLm5hbWUsXG5cdFx0XHRcdG1zZzogZGF0YS5tc2csXG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRbU0VSVkVSX0dFVFMuUEFSVFlfQ0hBVC5uYW1lXShkYXRhLCBzb2NrZXQ6IEdhbWVTb2NrZXQpIHtcblx0XHRjb25zdCBwYXJ0eSA9IHRoaXMucGFydHlSb3V0ZXIuZ2V0Q2hhclBhcnR5KHNvY2tldCk7XG5cdFx0aWYgKCFwYXJ0eSkge1xuXHRcdFx0dGhpcy5zZW5kRXJyb3IoZGF0YSwgc29ja2V0LCBcIkZhaWxlZCB0byBmaW5kIHBhcnR5IGZvciBlbmdhZ2luZyBpbiBwYXJ0eSBjaGF0XCIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzb2NrZXQuYnJvYWRjYXN0LnRvKHBhcnR5Lm5hbWUpLmVtaXQodGhpcy5DTElFTlRfR0VUUy5QQVJUWV9DSEFULm5hbWUsIHtcblx0XHRcdFx0aWQ6IHNvY2tldC5jaGFyYWN0ZXIuX2lkLFxuXHRcdFx0XHRtc2c6IGRhdGEubXNnLFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG59O1xuIl19
